CCS PCH C Compiler, Version 4.106, 18916               06-Þub-14 17:43

               Filename: C:\Users\Akýn\Desktop\tam-isi-kontrol\tam-isi-nem.lst

               ROM used: 5228 bytes (16%)
                         Largest free fragment is 27540
               RAM used: 34 (2%) at main() level
                         87 (6%) worst case
               Stack:    5 locations

*
0000:  GOTO   0CBE
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES XT                       //Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOOSCSEN                 //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOSTVREN                 //Stack full/underflow will not cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
.................... #use delay(clock=4000000) 
*
0080:  CLRF   FEA
0082:  MOVLW  29
0084:  MOVWF  FE9
0086:  MOVF   FEF,W
0088:  BZ    00A6
008A:  MOVLW  01
008C:  MOVWF  01
008E:  CLRF   00
0090:  DECFSZ 00,F
0092:  BRA    0090
0094:  DECFSZ 01,F
0096:  BRA    008E
0098:  MOVLW  4A
009A:  MOVWF  00
009C:  DECFSZ 00,F
009E:  BRA    009C
00A0:  BRA    00A2
00A2:  DECFSZ FEF,F
00A4:  BRA    008A
00A6:  RETLW  00
....................  
.................... #include "SHT11.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                           // 
.................... // Driver file for SHT75 Temperature & Humidity Sensor                       // 
.................... //                                                                           // 
.................... // ***** To initialise SHT75 sensor upon power up *****                      // 
.................... //                                                                           // 
.................... // Function : sht_init()                                                     // 
.................... // Return   : none                                                           // 
.................... //                                                                           // 
.................... //                                                                           // 
.................... // ***** To measure and caluculate SHT75 temp & real RH *****                // 
.................... //                                                                           // 
.................... // Function : sht_rd (temp, truehumid)                                       // 
.................... // Return   : temperature & true humidity in float values                    // 
.................... //                                                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................   
.................... #define sht_data_pin   PIN_B7 
.................... #define sht_clk_pin    PIN_B6 
....................  
.................... //***** Function to alert SHT75 ***** 
....................   
.................... void comstart (void) 
.................... { 
....................  output_float(sht_data_pin);  //data high 
*
0170:  BSF    F93.7
....................  output_low(sht_clk_pin);  //clk low 
0172:  BCF    F93.6
0174:  BCF    F8A.6
....................  delay_us(1); 
0176:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
0178:  BCF    F93.6
017A:  BSF    F8A.6
....................  delay_us(1); 
017C:  NOP   
....................  output_low(sht_data_pin); //data low 
017E:  BCF    F93.7
0180:  BCF    F8A.7
....................  delay_us(1); 
0182:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
0184:  BCF    F93.6
0186:  BCF    F8A.6
....................  delay_us(2); 
0188:  BRA    018A
....................  output_high(sht_clk_pin);  //clk high 
018A:  BCF    F93.6
018C:  BSF    F8A.6
....................  delay_us(1); 
018E:  NOP   
....................  output_float(sht_data_pin);  //data high 
0190:  BSF    F93.7
....................  delay_us(1); 
0192:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
0194:  BCF    F93.6
0196:  BCF    F8A.6
.................... } 
0198:  RETLW  00
....................   
.................... //***** Function to write data to SHT75 ***** 
....................   
.................... int1 comwrite (int8 iobyte) 
.................... { 
*
04DE:  MOVLW  80
04E0:  MOVWF  30
....................  int8 i, mask = 0x80; 
....................  int1 ack; 
....................   
....................  //Shift out command 
....................  delay_us(4); 
04E2:  BRA    04E4
04E4:  BRA    04E6
....................  for(i=0; i<8; i++) 
04E6:  CLRF   2F
04E8:  MOVF   2F,W
04EA:  SUBLW  07
04EC:  BNC   0510
....................   { 
....................    output_low(sht_clk_pin);                          //clk low 
04EE:  BCF    F93.6
04F0:  BCF    F8A.6
....................    if((iobyte & mask) > 0) output_float(sht_data_pin);  //data high if MSB high 
04F2:  MOVF   2E,W
04F4:  ANDWF  30,W
04F6:  BZ    04FC
04F8:  BSF    F93.7
....................    else output_low(sht_data_pin);                    //data low if MSB low 
04FA:  BRA    0500
04FC:  BCF    F93.7
04FE:  BCF    F8A.7
....................    delay_us(1); 
0500:  NOP   
....................    output_high(sht_clk_pin);                          //clk high 
0502:  BCF    F93.6
0504:  BSF    F8A.6
....................    delay_us(1); 
0506:  NOP   
....................    mask = mask >> 1;                                    //shift to next bit 
0508:  BCF    FD8.0
050A:  RRCF   30,F
....................   } 
050C:  INCF   2F,F
050E:  BRA    04E8
....................   
....................  //Shift in ack 
....................  output_low(sht_clk_pin);  //clk low 
0510:  BCF    F93.6
0512:  BCF    F8A.6
....................  delay_us(1); 
0514:  NOP   
....................  ack = input(sht_data_pin);   //get ack bit 
0516:  BSF    F93.7
0518:  BCF    31.0
051A:  BTFSC  F81.7
051C:  BSF    31.0
....................  output_high(sht_clk_pin);  //clk high 
051E:  BCF    F93.6
0520:  BSF    F8A.6
....................  delay_us(1); 
0522:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
0524:  BCF    F93.6
0526:  BCF    F8A.6
....................  return(ack); 
0528:  MOVLW  00
052A:  BTFSC  31.0
052C:  MOVLW  01
052E:  MOVWF  01
.................... } 
0530:  RETLW  00
....................   
.................... //***** Function to read data from SHT75 ***** 
....................   
.................... int16 comread (void) 
.................... { 
*
0566:  CLRF   30
0568:  CLRF   2F
....................  int8 i; 
....................  int16 iobyte = 0; 
....................  const int16 mask0 = 0x0000; 
....................  const int16 mask1 = 0x0001; 
....................   
....................  //shift in MSB data 
....................  for(i=0; i<8; i++) 
056A:  CLRF   2E
056C:  MOVF   2E,W
056E:  SUBLW  07
0570:  BNC   0592
....................   { 
....................    iobyte = iobyte << 1; 
0572:  BCF    FD8.0
0574:  RLCF   2F,F
0576:  RLCF   30,F
....................    output_high(sht_clk_pin);                //clk high 
0578:  BCF    F93.6
057A:  BSF    F8A.6
....................    delay_us(1); 
057C:  NOP   
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
057E:  BSF    F93.7
0580:  BTFSS  F81.7
0582:  BRA    0588
0584:  BSF    2F.0
....................    else iobyte |= mask0; 
0586:  BRA    0588
....................    output_low(sht_clk_pin);                //clk low 
0588:  BCF    F93.6
058A:  BCF    F8A.6
....................    delay_us(1); 
058C:  NOP   
....................   } 
058E:  INCF   2E,F
0590:  BRA    056C
....................   
....................  //send ack 0 bit 
....................  output_low(sht_data_pin); //data low 
0592:  BCF    F93.7
0594:  BCF    F8A.7
....................  delay_us(1); 
0596:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
0598:  BCF    F93.6
059A:  BSF    F8A.6
....................  delay_us(2); 
059C:  BRA    059E
....................  output_low(sht_clk_pin);  //clk low 
059E:  BCF    F93.6
05A0:  BCF    F8A.6
....................  delay_us(1); 
05A2:  NOP   
....................  output_float(sht_data_pin);  //data high 
05A4:  BSF    F93.7
....................   
....................  //shift in LSB data 
....................  for(i=0; i<8; i++) 
05A6:  CLRF   2E
05A8:  MOVF   2E,W
05AA:  SUBLW  07
05AC:  BNC   05CE
....................   { 
....................    iobyte = iobyte << 1; 
05AE:  BCF    FD8.0
05B0:  RLCF   2F,F
05B2:  RLCF   30,F
....................    output_high(sht_clk_pin);                //clk high 
05B4:  BCF    F93.6
05B6:  BSF    F8A.6
....................    delay_us(1); 
05B8:  NOP   
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
05BA:  BSF    F93.7
05BC:  BTFSS  F81.7
05BE:  BRA    05C4
05C0:  BSF    2F.0
....................    else iobyte |= mask0; 
05C2:  BRA    05C4
....................    output_low(sht_clk_pin);                //clk low 
05C4:  BCF    F93.6
05C6:  BCF    F8A.6
....................    delay_us(1); 
05C8:  NOP   
....................   } 
05CA:  INCF   2E,F
05CC:  BRA    05A8
....................   
....................  //send ack 1 bit 
....................  output_float(sht_data_pin);  //data high 
05CE:  BSF    F93.7
....................  delay_us(1); 
05D0:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
05D2:  BCF    F93.6
05D4:  BSF    F8A.6
....................  delay_us(2); 
05D6:  BRA    05D8
....................  output_low(sht_clk_pin);  //clk low 
05D8:  BCF    F93.6
05DA:  BCF    F8A.6
....................   
....................  return(iobyte); 
05DC:  MOVFF  2F,01
05E0:  MOVFF  30,02
.................... } 
05E4:  RETLW  00
....................   
.................... //***** Function to wait for SHT75 reading ***** 
....................   
.................... void comwait (void) 
.................... { 
....................  int16 sht_delay; 
....................   
....................  output_float(sht_data_pin);                     //data high 
*
0532:  BSF    F93.7
....................  output_low(sht_clk_pin);                     //clk low 
0534:  BCF    F93.6
0536:  BCF    F8A.6
....................  delay_us(1); 
0538:  NOP   
....................  for(sht_delay=0; sht_delay<30000; sht_delay++)  // wait for max 300ms 
053A:  CLRF   2F
053C:  CLRF   2E
053E:  MOVF   2F,W
0540:  SUBLW  75
0542:  BNC   0564
0544:  BNZ   054C
0546:  MOVF   2E,W
0548:  SUBLW  2F
054A:  BNC   0564
....................   { 
....................    if (!input(sht_data_pin)) break;              //if sht_data_pin low, SHT75 ready 
054C:  BSF    F93.7
054E:  BTFSC  F81.7
0550:  BRA    0554
0552:  BRA    0564
....................    delay_us(10); 
0554:  MOVLW  03
0556:  MOVWF  00
0558:  DECFSZ 00,F
055A:  BRA    0558
....................   } 
055C:  INCF   2E,F
055E:  BTFSC  FD8.2
0560:  INCF   2F,F
0562:  BRA    053E
.................... } 
0564:  RETLW  00
....................   
.................... //***** Function to reset SHT75 communication ***** 
....................   
.................... void comreset (void) 
.................... { 
....................  int8 i; 
....................   
....................  output_float(sht_data_pin);    //data high 
*
019A:  BSF    F93.7
....................  output_low(sht_clk_pin);    //clk low 
019C:  BCF    F93.6
019E:  BCF    F8A.6
....................  delay_us(2); 
01A0:  BRA    01A2
....................  for(i=0; i<9; i++) 
01A2:  CLRF   1B
01A4:  MOVF   1B,W
01A6:  SUBLW  08
01A8:  BNC   01BA
....................   { 
....................    output_high(sht_clk_pin);  //toggle clk 9 times 
01AA:  BCF    F93.6
01AC:  BSF    F8A.6
....................    delay_us(2); 
01AE:  BRA    01B0
....................    output_low(sht_clk_pin); 
01B0:  BCF    F93.6
01B2:  BCF    F8A.6
....................    delay_us(2); 
01B4:  BRA    01B6
....................  } 
01B6:  INCF   1B,F
01B8:  BRA    01A4
....................  comstart(); 
01BA:  RCALL  0170
.................... } 
01BC:  GOTO   01C2 (RETURN)
....................   
.................... //***** Function to soft reset SHT75 ***** 
....................   
.................... void sht_soft_reset (void) 
.................... { 
....................  comreset();           //SHT75 communication reset 
....................  comwrite(0x1e);       //send SHT75 reset command 
....................  delay_ms(15);         //pause 15 ms 
.................... } 
....................   
.................... //***** Function to measure SHT75 temperature ***** 
....................   
.................... int16 measuretemp (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();             //alert SHT75 
*
05E6:  RCALL  0170
....................  ack = comwrite(0x03);   //send measure temp command and read ack status 
05E8:  MOVLW  03
05EA:  MOVWF  2E
05EC:  RCALL  04DE
05EE:  BCF    2B.0
05F0:  BTFSC  01.0
05F2:  BSF    2B.0
....................  if(ack == 1) return; 
05F4:  BTFSS  2B.0
05F6:  BRA    05FA
05F8:  BRA    060E
....................  comwait();              //wait for SHT75 measurement to complete 
05FA:  RCALL  0532
....................  iobyte = comread();     //read SHT75 temp data 
05FC:  RCALL  0566
05FE:  MOVFF  02,2D
0602:  MOVFF  01,2C
....................  return(iobyte); 
0606:  MOVFF  2C,01
060A:  MOVFF  2D,02
.................... } 
060E:  GOTO   0FBA (RETURN)
....................   
.................... //***** Function to measure SHT75 RH ***** 
....................   
.................... int16 measurehumid (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();            //alert SHT75 
0612:  RCALL  0170
....................  ack = comwrite(0x05);  //send measure RH command and read ack status 
0614:  MOVLW  05
0616:  MOVWF  2E
0618:  RCALL  04DE
061A:  BCF    2B.0
061C:  BTFSC  01.0
061E:  BSF    2B.0
....................  if(ack == 1) return; 
0620:  BTFSS  2B.0
0622:  BRA    0626
0624:  BRA    063A
....................  comwait();             //wait for SHT75 measurement to complete 
0626:  RCALL  0532
....................  iobyte = comread();    //read SHT75 temp data 
0628:  RCALL  0566
062A:  MOVFF  02,2D
062E:  MOVFF  01,2C
....................  return(iobyte); 
0632:  MOVFF  2C,01
0636:  MOVFF  2D,02
.................... } 
063A:  GOTO   0FC6 (RETURN)
....................   
.................... //***** Function to calculate SHT75 temp & RH ***** 
....................   
.................... void calculate_data (int16 temp, int16 humid, float & tc, float & rhlin, float & rhtrue) 
.................... { 
....................  float truehumid1, rh; 
....................   
....................  //calculate temperature reading 
....................  tc = ((float) temp * 0.01) - 40.0; 
*
0FDE:  MOVFF  2C,44
0FE2:  MOVFF  2B,43
0FE6:  CALL   063E
0FEA:  MOVFF  00,37
0FEE:  MOVFF  01,38
0FF2:  MOVFF  02,39
0FF6:  MOVFF  03,3A
0FFA:  MOVFF  03,4E
0FFE:  MOVFF  02,4D
1002:  MOVFF  01,4C
1006:  MOVFF  00,4B
100A:  MOVLW  0A
100C:  MOVWF  52
100E:  MOVLW  D7
1010:  MOVWF  51
1012:  MOVLW  23
1014:  MOVWF  50
1016:  MOVLW  78
1018:  MOVWF  4F
101A:  CALL   0674
101E:  MOVFF  00,37
1022:  MOVFF  01,38
1026:  MOVFF  02,39
102A:  MOVFF  03,3A
102E:  BSF    FD8.1
1030:  MOVFF  03,4A
1034:  MOVFF  02,49
1038:  MOVFF  01,48
103C:  MOVFF  00,47
1040:  CLRF   4E
1042:  CLRF   4D
1044:  MOVLW  20
1046:  MOVWF  4C
1048:  MOVLW  84
104A:  MOVWF  4B
104C:  CALL   0766
1050:  MOVFF  03,07
1054:  MOVFF  02,06
1058:  MOVFF  01,05
105C:  MOVFF  00,04
....................   
....................   
....................  //calculate Real RH reading 
....................  rh = (float) humid; 
1060:  MOVFF  2E,44
1064:  MOVFF  2D,43
1068:  CALL   063E
106C:  MOVFF  03,36
1070:  MOVFF  02,35
1074:  MOVFF  01,34
1078:  MOVFF  00,33
....................   
....................  rhlin = (rh * 0.0405) - (rh * rh * 0.0000028) - 4.0; 
107C:  MOVFF  36,4E
1080:  MOVFF  35,4D
1084:  MOVFF  34,4C
1088:  MOVFF  33,4B
108C:  MOVLW  54
108E:  MOVWF  52
1090:  MOVLW  E3
1092:  MOVWF  51
1094:  MOVLW  25
1096:  MOVWF  50
1098:  MOVLW  7A
109A:  MOVWF  4F
109C:  CALL   0674
10A0:  MOVFF  00,37
10A4:  MOVFF  01,38
10A8:  MOVFF  02,39
10AC:  MOVFF  03,3A
10B0:  MOVFF  36,4E
10B4:  MOVFF  35,4D
10B8:  MOVFF  34,4C
10BC:  MOVFF  33,4B
10C0:  MOVFF  36,52
10C4:  MOVFF  35,51
10C8:  MOVFF  34,50
10CC:  MOVFF  33,4F
10D0:  CALL   0674
10D4:  MOVFF  00,3B
10D8:  MOVFF  01,3C
10DC:  MOVFF  02,3D
10E0:  MOVFF  03,3E
10E4:  MOVFF  03,4E
10E8:  MOVFF  02,4D
10EC:  MOVFF  01,4C
10F0:  MOVFF  00,4B
10F4:  MOVLW  A2
10F6:  MOVWF  52
10F8:  MOVLW  E7
10FA:  MOVWF  51
10FC:  MOVLW  3B
10FE:  MOVWF  50
1100:  MOVLW  6C
1102:  MOVWF  4F
1104:  CALL   0674
1108:  BSF    FD8.1
110A:  MOVFF  3A,4A
110E:  MOVFF  39,49
1112:  MOVFF  38,48
1116:  MOVFF  37,47
111A:  MOVFF  03,4E
111E:  MOVFF  02,4D
1122:  MOVFF  01,4C
1126:  MOVFF  00,4B
112A:  CALL   0766
112E:  MOVFF  00,37
1132:  MOVFF  01,38
1136:  MOVFF  02,39
113A:  MOVFF  03,3A
113E:  BSF    FD8.1
1140:  MOVFF  03,4A
1144:  MOVFF  02,49
1148:  MOVFF  01,48
114C:  MOVFF  00,47
1150:  CLRF   4E
1152:  CLRF   4D
1154:  CLRF   4C
1156:  MOVLW  81
1158:  MOVWF  4B
115A:  CALL   0766
115E:  MOVFF  03,22
1162:  MOVFF  02,21
1166:  MOVFF  01,20
116A:  MOVFF  00,1F
....................   
....................  //calculate True RH reading 
....................  rhtrue = ((tc - 25.0) * (0.01 + (0.00008 * rh))) + rhlin; 
116E:  BSF    FD8.1
1170:  MOVFF  07,4A
1174:  MOVFF  06,49
1178:  MOVFF  05,48
117C:  MOVFF  04,47
1180:  CLRF   4E
1182:  CLRF   4D
1184:  MOVLW  48
1186:  MOVWF  4C
1188:  MOVLW  83
118A:  MOVWF  4B
118C:  CALL   0766
1190:  MOVFF  00,37
1194:  MOVFF  01,38
1198:  MOVFF  02,39
119C:  MOVFF  03,3A
11A0:  MOVLW  AC
11A2:  MOVWF  4E
11A4:  MOVLW  C5
11A6:  MOVWF  4D
11A8:  MOVLW  27
11AA:  MOVWF  4C
11AC:  MOVLW  71
11AE:  MOVWF  4B
11B0:  MOVFF  36,52
11B4:  MOVFF  35,51
11B8:  MOVFF  34,50
11BC:  MOVFF  33,4F
11C0:  CALL   0674
11C4:  BCF    FD8.1
11C6:  MOVLW  0A
11C8:  MOVWF  4A
11CA:  MOVLW  D7
11CC:  MOVWF  49
11CE:  MOVLW  23
11D0:  MOVWF  48
11D2:  MOVLW  78
11D4:  MOVWF  47
11D6:  MOVFF  03,4E
11DA:  MOVFF  02,4D
11DE:  MOVFF  01,4C
11E2:  MOVFF  00,4B
11E6:  CALL   0766
11EA:  MOVFF  3A,4E
11EE:  MOVFF  39,4D
11F2:  MOVFF  38,4C
11F6:  MOVFF  37,4B
11FA:  MOVFF  03,52
11FE:  MOVFF  02,51
1202:  MOVFF  01,50
1206:  MOVFF  00,4F
120A:  CALL   0674
120E:  MOVFF  00,37
1212:  MOVFF  01,38
1216:  MOVFF  02,39
121A:  MOVFF  03,3A
121E:  BCF    FD8.1
1220:  MOVFF  03,4A
1224:  MOVFF  02,49
1228:  MOVFF  01,48
122C:  MOVFF  00,47
1230:  MOVFF  22,4E
1234:  MOVFF  21,4D
1238:  MOVFF  20,4C
123C:  MOVFF  1F,4B
1240:  CALL   0766
1244:  MOVFF  03,0B
1248:  MOVFF  02,0A
124C:  MOVFF  01,09
1250:  MOVFF  00,08
.................... } 
....................   
.................... //***** Function to measure & calculate SHT75 temp & RH ***** 
....................   
.................... void sht_rd (float & temp, float & truehumid) 
.................... { 
....................  int16 restemp, reshumid; 
....................  float realhumid; 
....................  restemp = 0; truehumid = 0; 
*
0FAA:  CLRF   1C
0FAC:  CLRF   1B
0FAE:  CLRF   0B
0FB0:  CLRF   0A
0FB2:  CLRF   09
0FB4:  CLRF   08
....................   
....................  restemp = measuretemp();    //measure temp 
0FB6:  GOTO   05E6
0FBA:  MOVFF  02,1C
0FBE:  MOVFF  01,1B
....................  reshumid = measurehumid();  //measure RH 
0FC2:  GOTO   0612
0FC6:  MOVFF  02,1E
0FCA:  MOVFF  01,1D
.................... calculate_data (restemp, reshumid, temp, realhumid, truehumid);  //calculate temp & RH 
0FCE:  MOVFF  1C,2C
0FD2:  MOVFF  1B,2B
0FD6:  MOVFF  1E,2E
0FDA:  MOVFF  1D,2D
.................... } 
....................   
.................... //***** Function to initialise SHT75 on power-up ***** 
....................   
.................... void sht_init (void) 
.................... { 
....................  comreset();    //reset SHT75 
*
01C0:  BRA    019A
....................  delay_ms(20);  //delay for power-up 
01C2:  MOVLW  14
01C4:  MOVWF  29
01C6:  RCALL  0080
.................... } 
01C8:  GOTO   0D48 (RETURN)
....................  
....................  
....................  
.................... #include "new_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
....................  
.................... #define LCD_E     PIN_D0 
.................... #define LCD_RS    PIN_D1 
.................... //#define LCD_RW    0 
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW   1 
....................  
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0x0C,//0xf,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
.................... /* 
.................... byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xC, 1,6}; 
....................  
.................... Value   Cursor  Blink 
.................... 0x0C     Off      Off 
.................... 0x0D     Off      On 
.................... 0x0E     On       Off 
.................... 0x0F     On       On 
....................  
.................... */ 
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
00A8:  BTFSC  30.0
00AA:  BRA    00B0
00AC:  BCF    F8C.4
00AE:  BRA    00B2
00B0:  BSF    F8C.4
00B2:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
00B4:  BTFSC  30.1
00B6:  BRA    00BC
00B8:  BCF    F8C.5
00BA:  BRA    00BE
00BC:  BSF    F8C.5
00BE:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
00C0:  BTFSC  30.2
00C2:  BRA    00C8
00C4:  BCF    F8C.6
00C6:  BRA    00CA
00C8:  BSF    F8C.6
00CA:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
00CC:  BTFSC  30.3
00CE:  BRA    00D4
00D0:  BCF    F8C.7
00D2:  BRA    00D6
00D4:  BSF    F8C.7
00D6:  BCF    F95.7
....................  
....................  delay_cycles(1); 
00D8:  NOP   
....................  output_high(LCD_E); 
00DA:  BCF    F95.0
00DC:  BSF    F8C.0
....................  delay_us(2); 
00DE:  BRA    00E0
....................  output_low(LCD_E); 
00E0:  BCF    F95.0
00E2:  BCF    F8C.0
.................... } 
00E4:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
00E6:  BCF    F95.1
00E8:  BCF    F8C.1
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
00EA:  MOVLW  13
00EC:  MOVWF  00
00EE:  DECFSZ 00,F
00F0:  BRA    00EE
00F2:  BRA    00F4
.................... #endif 
....................  
.................... if(address) 
00F4:  MOVF   2D,F
00F6:  BZ    00FE
....................    output_high(LCD_RS); 
00F8:  BCF    F95.1
00FA:  BSF    F8C.1
.................... else 
00FC:  BRA    0102
....................    output_low(LCD_RS); 
00FE:  BCF    F95.1
0100:  BCF    F8C.1
....................  
....................  delay_cycles(1); 
0102:  NOP   
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0104:  BCF    F95.0
0106:  BCF    F8C.0
....................  
.................... lcd_send_nibble(n >> 4); 
0108:  SWAPF  2E,W
010A:  MOVWF  2F
010C:  MOVLW  0F
010E:  ANDWF  2F,F
0110:  MOVFF  2F,30
0114:  RCALL  00A8
.................... lcd_send_nibble(n & 0xf); 
0116:  MOVF   2E,W
0118:  ANDLW  0F
011A:  MOVWF  2F
011C:  MOVWF  30
011E:  RCALL  00A8
.................... } 
0120:  RETLW  00
....................  
.................... //---------------------------- 
....................  
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0122:  BCF    F95.1
0124:  BCF    F8C.1
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0126:  BCF    F95.0
0128:  BCF    F8C.0
....................  
.................... delay_ms(15); 
012A:  MOVLW  0F
012C:  MOVWF  29
012E:  RCALL  0080
....................  
.................... for(i=0 ;i < 3; i++) 
0130:  CLRF   1B
0132:  MOVF   1B,W
0134:  SUBLW  02
0136:  BNC   0148
....................    { 
....................     lcd_send_nibble(0x03); 
0138:  MOVLW  03
013A:  MOVWF  30
013C:  RCALL  00A8
....................     delay_ms(5); 
013E:  MOVLW  05
0140:  MOVWF  29
0142:  RCALL  0080
....................    } 
0144:  INCF   1B,F
0146:  BRA    0132
....................  
.................... lcd_send_nibble(0x02); 
0148:  MOVLW  02
014A:  MOVWF  30
014C:  RCALL  00A8
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
014E:  CLRF   1B
0150:  MOVF   1B,W
0152:  SUBLW  03
0154:  BNC   016E
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0156:  CLRF   03
0158:  MOVF   1B,W
015A:  RCALL  0004
015C:  MOVWF  1C
015E:  CLRF   2D
0160:  MOVWF  2E
0162:  RCALL  00E6
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
0164:  MOVLW  05
0166:  MOVWF  29
0168:  RCALL  0080
....................     #endif 
....................    } 
016A:  INCF   1B,F
016C:  BRA    0150
....................  
.................... } 
016E:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
034A:  DECFSZ 2A,W
034C:  BRA    0350
034E:  BRA    0356
....................    address = lcd_line_two; 
0350:  MOVLW  40
0352:  MOVWF  2B
.................... else 
0354:  BRA    0358
....................    address=0; 
0356:  CLRF   2B
....................  
.................... address += x-1; 
0358:  MOVLW  01
035A:  SUBWF  29,W
035C:  ADDWF  2B,F
.................... lcd_send_byte(0, 0x80 | address); 
035E:  MOVF   2B,W
0360:  IORLW  80
0362:  MOVWF  2C
0364:  CLRF   2D
0366:  MOVWF  2E
0368:  RCALL  00E6
.................... } 
036A:  RETLW  00
....................  
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
036C:  MOVF   28,W
036E:  XORLW  0C
0370:  BZ    037C
0372:  XORLW  06
0374:  BZ    038C
0376:  XORLW  02
0378:  BZ    0398
037A:  BRA    03A2
....................     case '\f': 
....................       lcd_send_byte(0,1); 
037C:  CLRF   2D
037E:  MOVLW  01
0380:  MOVWF  2E
0382:  RCALL  00E6
....................       delay_ms(2); 
0384:  MOVLW  02
0386:  MOVWF  29
0388:  RCALL  0080
....................       break; 
038A:  BRA    03AE
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
038C:  MOVLW  01
038E:  MOVWF  29
0390:  MOVLW  02
0392:  MOVWF  2A
0394:  RCALL  034A
....................        break; 
0396:  BRA    03AE
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0398:  CLRF   2D
039A:  MOVLW  10
039C:  MOVWF  2E
039E:  RCALL  00E6
....................        break; 
03A0:  BRA    03AE
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
03A2:  MOVLW  01
03A4:  MOVWF  2D
03A6:  MOVFF  28,2E
03AA:  RCALL  00E6
....................        break; 
03AC:  BRA    03AE
....................    } 
.................... } 
03AE:  RETLW  00
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
....................  
.................... //3x4 tuþ takýmý 
.................... #define sut1   pin_A0  
.................... #define sut2   pin_A1  
.................... #define sut3   pin_A2 
....................  
.................... #define sat1   pin_B0  
.................... #define sat2   pin_B1 
.................... #define sat3   pin_B2  
.................... #define sat4   pin_B3  
....................  
.................... // ýsýtýcý ve soðutucu 
.................... #define isitici   pin_C0  
.................... #define sogutucu  pin_C1 
....................  
.................... //sht11 algýlayýcý             
.................... #define sht_data_pin   PIN_B7//(Data pin veya input) 
.................... #define sht_clk_pin    PIN_B6 
....................  
.................... float temp=0,humid=0,sicaklik=0,nem=0; 
.................... int tus=11, katsayi=1, flag=0, a=0, b=0, derece=25; 
....................  
.................... //fonksiyonlar 
....................  
.................... int keypad_oku() // Fonksiyon ismi 
.................... { 
....................  
....................    output_high(sat1); // 1. satýr lojik-1 yapýlýyor 
*
01EE:  BCF    F93.0
01F0:  BSF    F8A.0
....................       if (input(sut1))   // 1. sütun okunuyor 
01F2:  BSF    F92.0
01F4:  BTFSS  F80.0
01F6:  BRA    020C
....................          { delay_ms(20);tus=1; output_high(sut1); output_high(sat1);} 
01F8:  MOVLW  14
01FA:  MOVWF  29
01FC:  RCALL  0080
01FE:  MOVLW  01
0200:  MOVWF  14
0202:  BCF    F92.0
0204:  BSF    F89.0
0206:  BCF    F93.0
0208:  BSF    F8A.0
....................       else if (input(sut2))   // 2. sütun okunuyor 
020A:  BRA    0244
020C:  BSF    F92.1
020E:  BTFSS  F80.1
0210:  BRA    0226
....................          { delay_ms(20); tus=2; output_high(sut2);output_high(sat1);} 
0212:  MOVLW  14
0214:  MOVWF  29
0216:  RCALL  0080
0218:  MOVLW  02
021A:  MOVWF  14
021C:  BCF    F92.1
021E:  BSF    F89.1
0220:  BCF    F93.0
0222:  BSF    F8A.0
....................       else if (input(sut3))   // 3. sütun okunuyor 
0224:  BRA    0244
0226:  BSF    F92.2
0228:  BTFSS  F80.2
022A:  BRA    0240
....................          { delay_ms(20); tus=3;output_high(sut3); output_high(sat1);} 
022C:  MOVLW  14
022E:  MOVWF  29
0230:  RCALL  0080
0232:  MOVLW  03
0234:  MOVWF  14
0236:  BCF    F92.2
0238:  BSF    F89.2
023A:  BCF    F93.0
023C:  BSF    F8A.0
....................       else 
023E:  BRA    0244
....................         output_low(sat1); // 1. satýr lojik-0 yapýlýyor 
0240:  BCF    F93.0
0242:  BCF    F8A.0
....................     
....................    output_high(sat2);// 2. satýr lojik-1 yapýlýyor 
0244:  BCF    F93.1
0246:  BSF    F8A.1
....................       if (input(sut1))   // 1. sütun okunuyor 
0248:  BSF    F92.0
024A:  BTFSS  F80.0
024C:  BRA    0262
....................          { delay_ms(20); tus=4; output_high(sut1);output_high(sat2);} 
024E:  MOVLW  14
0250:  MOVWF  29
0252:  RCALL  0080
0254:  MOVLW  04
0256:  MOVWF  14
0258:  BCF    F92.0
025A:  BSF    F89.0
025C:  BCF    F93.1
025E:  BSF    F8A.1
....................       else if (input(sut2))   // 2. sütun okunuyor 
0260:  BRA    029A
0262:  BSF    F92.1
0264:  BTFSS  F80.1
0266:  BRA    027C
....................          { delay_ms(20); tus=5; output_high(sut2);output_high(sat2);} 
0268:  MOVLW  14
026A:  MOVWF  29
026C:  RCALL  0080
026E:  MOVLW  05
0270:  MOVWF  14
0272:  BCF    F92.1
0274:  BSF    F89.1
0276:  BCF    F93.1
0278:  BSF    F8A.1
....................       else if (input(sut3))   // 3. sütun okunuyor 
027A:  BRA    029A
027C:  BSF    F92.2
027E:  BTFSS  F80.2
0280:  BRA    0296
....................          { delay_ms(20); tus=6; output_high(sut3);output_high(sat2);} 
0282:  MOVLW  14
0284:  MOVWF  29
0286:  RCALL  0080
0288:  MOVLW  06
028A:  MOVWF  14
028C:  BCF    F92.2
028E:  BSF    F89.2
0290:  BCF    F93.1
0292:  BSF    F8A.1
....................       else 
0294:  BRA    029A
....................         output_low(sat2); // 2. satýr lojik-0 yapýlýyor 
0296:  BCF    F93.1
0298:  BCF    F8A.1
....................  
....................     output_high(sat3); // 3. satýr lojik-1 yapýlýyor 
029A:  BCF    F93.2
029C:  BSF    F8A.2
....................       if (input(sut1))   // 1. sütun okunuyor 
029E:  BSF    F92.0
02A0:  BTFSS  F80.0
02A2:  BRA    02B8
....................          { delay_ms(20); tus=7; output_high(sut1);output_high(sat3);} 
02A4:  MOVLW  14
02A6:  MOVWF  29
02A8:  RCALL  0080
02AA:  MOVLW  07
02AC:  MOVWF  14
02AE:  BCF    F92.0
02B0:  BSF    F89.0
02B2:  BCF    F93.2
02B4:  BSF    F8A.2
....................       else if (input(sut2))   // 2. sütun okunuyor 
02B6:  BRA    02F0
02B8:  BSF    F92.1
02BA:  BTFSS  F80.1
02BC:  BRA    02D2
....................          { delay_ms(20); tus=8; output_high(sut2);output_high(sat3);} 
02BE:  MOVLW  14
02C0:  MOVWF  29
02C2:  RCALL  0080
02C4:  MOVLW  08
02C6:  MOVWF  14
02C8:  BCF    F92.1
02CA:  BSF    F89.1
02CC:  BCF    F93.2
02CE:  BSF    F8A.2
....................       else if (input(sut3))   // 3. sütun okunuyor 
02D0:  BRA    02F0
02D2:  BSF    F92.2
02D4:  BTFSS  F80.2
02D6:  BRA    02EC
....................          { delay_ms(20); tus=9; output_high(sut3);output_high(sat3);} 
02D8:  MOVLW  14
02DA:  MOVWF  29
02DC:  RCALL  0080
02DE:  MOVLW  09
02E0:  MOVWF  14
02E2:  BCF    F92.2
02E4:  BSF    F89.2
02E6:  BCF    F93.2
02E8:  BSF    F8A.2
....................       else 
02EA:  BRA    02F0
....................         output_low(sat3); // 3. satýr lojik-0 yapýlýyor 
02EC:  BCF    F93.2
02EE:  BCF    F8A.2
....................     
....................   output_high(sat4); // 3. satýr lojik-1 yapýlýyor 
02F0:  BCF    F93.3
02F2:  BSF    F8A.3
....................       if (input(sut1))   // 1. sütun okunuyor 
02F4:  BSF    F92.0
02F6:  BTFSS  F80.0
02F8:  BRA    030E
....................          { delay_ms(20); tus=10; output_high(sut1);output_high(sat4);} 
02FA:  MOVLW  14
02FC:  MOVWF  29
02FE:  RCALL  0080
0300:  MOVLW  0A
0302:  MOVWF  14
0304:  BCF    F92.0
0306:  BSF    F89.0
0308:  BCF    F93.3
030A:  BSF    F8A.3
....................       else if (input(sut2))   // 2. sütun okunuyor 
030C:  BRA    0344
030E:  BSF    F92.1
0310:  BTFSS  F80.1
0312:  BRA    0326
....................          { delay_ms(20); tus=0; output_high(sut2);output_high(sat4);} 
0314:  MOVLW  14
0316:  MOVWF  29
0318:  RCALL  0080
031A:  CLRF   14
031C:  BCF    F92.1
031E:  BSF    F89.1
0320:  BCF    F93.3
0322:  BSF    F8A.3
....................       else if (input(sut3))   // 3. sütun okunuyor 
0324:  BRA    0344
0326:  BSF    F92.2
0328:  BTFSS  F80.2
032A:  BRA    0340
....................          { delay_ms(20); tus=11; output_high(sut3);output_high(sat4);} 
032C:  MOVLW  14
032E:  MOVWF  29
0330:  RCALL  0080
0332:  MOVLW  0B
0334:  MOVWF  14
0336:  BCF    F92.2
0338:  BSF    F89.2
033A:  BCF    F93.3
033C:  BSF    F8A.3
....................       else 
033E:  BRA    0344
....................         output_low(sat4); // 3. satýr lojik-0 yapýlýyor 
0340:  BCF    F93.3
0342:  BCF    F8A.3
....................  
....................     
....................    return tus; // Fonksiyon "tus" deðeri ile geri döner 
0344:  MOVFF  14,01
.................... } 
0348:  RETLW  00
....................  
....................  
.................... int ChartoInt(char asd) 
.................... { 
....................   switch(asd) 
....................   { 
....................   case '0' : return 0;break; 
....................   case '1' : return 1;break; 
....................   case '2' : return 2;break; 
....................   case '3' : return 3;break; 
....................   case '4' : return 4;break; 
....................   case '5' : return 5;break; 
....................   case '6' : return 6;break; 
....................   case '7' : return 7;break; 
....................   case '8' : return 8;break; 
....................   case '9' : return 9;break; 
....................   default : return 0; 
....................   } 
.................... } 
....................  
.................... void allkeypadlow() 
.................... { 
....................    output_low(sat1); 
*
01CC:  BCF    F93.0
01CE:  BCF    F8A.0
....................    output_low(sat2); 
01D0:  BCF    F93.1
01D2:  BCF    F8A.1
....................    output_low(sat3); 
01D4:  BCF    F93.2
01D6:  BCF    F8A.2
....................    output_low(sat4); 
01D8:  BCF    F93.3
01DA:  BCF    F8A.3
....................    output_low(sut1); 
01DC:  BCF    F92.0
01DE:  BCF    F89.0
....................    output_low(sut2); 
01E0:  BCF    F92.1
01E2:  BCF    F89.1
....................    output_low(sut3); 
01E4:  BCF    F92.2
01E6:  BCF    F89.2
....................    tus=11; 
01E8:  MOVLW  0B
01EA:  MOVWF  14
.................... } 
01EC:  RETLW  00
....................  
....................  
.................... // ana program 
.................... void main() 
.................... { 
*
0CBE:  CLRF   FF8
0CC0:  BCF    FD0.7
0CC2:  CLRF   FEA
0CC4:  CLRF   FE9
0CC6:  CLRF   07
0CC8:  CLRF   06
0CCA:  CLRF   05
0CCC:  CLRF   04
0CCE:  CLRF   0B
0CD0:  CLRF   0A
0CD2:  CLRF   09
0CD4:  CLRF   08
0CD6:  CLRF   0F
0CD8:  CLRF   0E
0CDA:  CLRF   0D
0CDC:  CLRF   0C
0CDE:  CLRF   13
0CE0:  CLRF   12
0CE2:  CLRF   11
0CE4:  CLRF   10
0CE6:  MOVLW  0B
0CE8:  MOVWF  14
0CEA:  MOVLW  01
0CEC:  MOVWF  15
0CEE:  CLRF   16
0CF0:  CLRF   17
0CF2:  CLRF   18
0CF4:  MOVLW  19
0CF6:  MOVWF  19
0CF8:  BSF    FC1.0
0CFA:  BSF    FC1.1
0CFC:  BSF    FC1.2
0CFE:  BCF    FC1.3
....................    setup_adc_ports(NO_ANALOGS); 
0D00:  BSF    FC1.0
0D02:  BSF    FC1.1
0D04:  BSF    FC1.2
0D06:  BCF    FC1.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0D08:  BCF    FC1.6
0D0A:  BCF    FC2.6
0D0C:  BCF    FC2.7
0D0E:  BCF    FC1.7
0D10:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0D12:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0D14:  BCF    FC6.5
0D16:  BCF    F94.5
0D18:  BSF    F94.4
0D1A:  BCF    F94.3
0D1C:  MOVLW  01
0D1E:  MOVWF  FC6
0D20:  MOVLW  00
0D22:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0D24:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0D26:  MOVLW  80
0D28:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0D2A:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0D2C:  MOVLW  00
0D2E:  MOVWF  FCA
0D30:  MOVLW  00
0D32:  MOVWF  FCB
....................    setup_ccp1(CCP_OFF); 
0D34:  BSF    F94.2
0D36:  CLRF   FBD
....................     
....................  
....................    lcd_init(); 
0D38:  CALL   0122
....................    delay_ms(100); 
0D3C:  MOVLW  64
0D3E:  MOVWF  29
0D40:  CALL   0080
....................    sht_init(); 
0D44:  GOTO   01C0
....................    delay_ms(100); 
0D48:  MOVLW  64
0D4A:  MOVWF  29
0D4C:  CALL   0080
....................   
....................   
....................    set_tris_a(0x00);   // A portu komple çýkýþ 
0D50:  MOVLW  00
0D52:  MOVWF  F92
....................    set_tris_b(0x00); 
0D54:  MOVWF  F93
....................    set_tris_c(0x0F);    
0D56:  MOVLW  0F
0D58:  MOVWF  F94
....................    set_tris_d(0x0F);    
0D5A:  MOVWF  F95
....................  
....................    lcd_init();   // LCD hazýrlanýyor 
0D5C:  CALL   0122
.................... int pres=11;  
0D60:  MOVLW  0B
0D62:  MOVWF  1A
....................    while(1) 
....................    { 
....................       allkeypadlow(); 
0D64:  CALL   01CC
....................       keypad_oku(); 
0D68:  CALL   01EE
....................       pres = tus; 
0D6C:  MOVFF  14,1A
....................       allkeypadlow(); 
0D70:  CALL   01CC
....................        
....................       if(pres == 10) 
0D74:  MOVF   1A,W
0D76:  SUBLW  0A
0D78:  BNZ   0D7E
....................           flag = 1; 
0D7A:  MOVLW  01
0D7C:  MOVWF  16
....................       if(flag == 1) 
0D7E:  DECFSZ 16,W
0D80:  BRA    0FAA
....................       { 
....................         lcd_gotoxy(1,1); 
0D82:  MOVLW  01
0D84:  MOVWF  29
0D86:  MOVWF  2A
0D88:  CALL   034A
....................         flag=0; 
0D8C:  CLRF   16
....................         printf(lcd_putc,"\fSic Gir (3)"); 
0D8E:  MOVLW  18
0D90:  MOVWF  FF6
0D92:  MOVLW  00
0D94:  MOVWF  FF7
0D96:  CALL   03B0
....................         delay_ms(1000); 
0D9A:  MOVLW  04
0D9C:  MOVWF  1B
0D9E:  MOVLW  FA
0DA0:  MOVWF  29
0DA2:  CALL   0080
0DA6:  DECFSZ 1B,F
0DA8:  BRA    0D9E
....................         lcd_gotoxy(14,1); 
0DAA:  MOVLW  0E
0DAC:  MOVWF  29
0DAE:  MOVLW  01
0DB0:  MOVWF  2A
0DB2:  CALL   034A
....................         printf(lcd_putc,"2"); 
0DB6:  MOVLW  32
0DB8:  MOVWF  28
0DBA:  CALL   036C
....................         delay_ms(1000); 
0DBE:  MOVLW  04
0DC0:  MOVWF  1B
0DC2:  MOVLW  FA
0DC4:  MOVWF  29
0DC6:  CALL   0080
0DCA:  DECFSZ 1B,F
0DCC:  BRA    0DC2
....................         lcd_gotoxy(14,1); 
0DCE:  MOVLW  0E
0DD0:  MOVWF  29
0DD2:  MOVLW  01
0DD4:  MOVWF  2A
0DD6:  CALL   034A
....................         printf(lcd_putc,"1"); 
0DDA:  MOVLW  31
0DDC:  MOVWF  28
0DDE:  CALL   036C
....................         lcd_gotoxy(1,2); 
0DE2:  MOVLW  01
0DE4:  MOVWF  29
0DE6:  MOVLW  02
0DE8:  MOVWF  2A
0DEA:  CALL   034A
....................         printf(lcd_putc,"%d",tus); 
0DEE:  MOVFF  14,1B
0DF2:  MOVLW  1F
0DF4:  MOVWF  1C
0DF6:  CALL   03F8
....................         delay_ms(1000); 
0DFA:  MOVLW  04
0DFC:  MOVWF  1B
0DFE:  MOVLW  FA
0E00:  MOVWF  29
0E02:  CALL   0080
0E06:  DECFSZ 1B,F
0E08:  BRA    0DFE
....................         keypad_oku(); 
0E0A:  CALL   01EE
....................         pres = tus; 
0E0E:  MOVFF  14,1A
....................         allkeypadlow(); 
0E12:  CALL   01CC
....................         if(pres != 10 && pres != 11)    
0E16:  MOVF   1A,W
0E18:  SUBLW  0A
0E1A:  BTFSC  FD8.2
0E1C:  BRA    0F50
0E1E:  MOVF   1A,W
0E20:  SUBLW  0B
0E22:  BTFSC  FD8.2
0E24:  BRA    0F50
....................         { 
....................           a = pres; 
0E26:  MOVFF  1A,17
....................           lcd_gotoxy(1,2); 
0E2A:  MOVLW  01
0E2C:  MOVWF  29
0E2E:  MOVLW  02
0E30:  MOVWF  2A
0E32:  CALL   034A
....................           printf(lcd_putc,"**%d",a); 
0E36:  MOVLW  2A
0E38:  MOVWF  28
0E3A:  CALL   036C
0E3E:  MOVLW  2A
0E40:  MOVWF  28
0E42:  CALL   036C
0E46:  MOVFF  17,1B
0E4A:  MOVLW  1F
0E4C:  MOVWF  1C
0E4E:  CALL   03F8
....................           delay_ms(2000); 
0E52:  MOVLW  08
0E54:  MOVWF  1B
0E56:  MOVLW  FA
0E58:  MOVWF  29
0E5A:  CALL   0080
0E5E:  DECFSZ 1B,F
0E60:  BRA    0E56
....................           keypad_oku(); 
0E62:  CALL   01EE
....................           pres = tus; 
0E66:  MOVFF  14,1A
....................           allkeypadlow(); 
0E6A:  CALL   01CC
....................           if(pres != 10 || pres != 11) 
0E6E:  MOVF   1A,W
0E70:  SUBLW  0A
0E72:  BNZ   0E7A
0E74:  MOVF   1A,W
0E76:  SUBLW  0B
0E78:  BZ    0F02
....................           { 
....................             //b = ChartoInt(keypad_oku()); 
....................             b = keypad_oku();        allkeypadlow(); 
0E7A:  CALL   01EE
0E7E:  MOVFF  01,18
0E82:  CALL   01CC
....................             lcd_gotoxy(3,2);             
0E86:  MOVLW  03
0E88:  MOVWF  29
0E8A:  MOVLW  02
0E8C:  MOVWF  2A
0E8E:  CALL   034A
....................             printf(lcd_putc,"%d",b); 
0E92:  MOVFF  18,1B
0E96:  MOVLW  1F
0E98:  MOVWF  1C
0E9A:  CALL   03F8
....................             delay_ms(1000); 
0E9E:  MOVLW  04
0EA0:  MOVWF  1B
0EA2:  MOVLW  FA
0EA4:  MOVWF  29
0EA6:  CALL   0080
0EAA:  DECFSZ 1B,F
0EAC:  BRA    0EA2
....................             derece = (a*10 + b); 
0EAE:  MOVF   17,W
0EB0:  MULLW  0A
0EB2:  MOVF   FF3,W
0EB4:  ADDWF  18,W
0EB6:  MOVWF  19
....................             printf(lcd_putc,"\f"); 
0EB8:  MOVLW  0C
0EBA:  MOVWF  28
0EBC:  CALL   036C
....................             lcd_gotoxy(3,1); 
0EC0:  MOVLW  03
0EC2:  MOVWF  29
0EC4:  MOVLW  01
0EC6:  MOVWF  2A
0EC8:  CALL   034A
....................             printf(lcd_putc,"%d derece",derece); 
0ECC:  MOVFF  19,1B
0ED0:  MOVLW  1F
0ED2:  MOVWF  1C
0ED4:  CALL   03F8
0ED8:  MOVLW  28
0EDA:  MOVWF  FF6
0EDC:  MOVLW  00
0EDE:  MOVWF  FF7
0EE0:  MOVLW  07
0EE2:  MOVWF  1B
0EE4:  CALL   04C0
....................             lcd_gotoxy(3,2);           
0EE8:  MOVLW  03
0EEA:  MOVWF  29
0EEC:  MOVLW  02
0EEE:  MOVWF  2A
0EF0:  CALL   034A
....................             printf(lcd_putc,"ayarlandi."); 
0EF4:  MOVLW  30
0EF6:  MOVWF  FF6
0EF8:  MOVLW  00
0EFA:  MOVWF  FF7
0EFC:  CALL   03B0
....................           } 
....................           else 
0F00:  BRA    0F4E
....................           {  
....................             derece = a; 
0F02:  MOVFF  17,19
....................             //delay_ms(1000);            
....................             printf(lcd_putc,"\f"); 
0F06:  MOVLW  0C
0F08:  MOVWF  28
0F0A:  CALL   036C
....................             lcd_gotoxy(3,1); 
0F0E:  MOVLW  03
0F10:  MOVWF  29
0F12:  MOVLW  01
0F14:  MOVWF  2A
0F16:  CALL   034A
....................             printf(lcd_putc,"%d derece",derece); 
0F1A:  MOVFF  19,1B
0F1E:  MOVLW  1F
0F20:  MOVWF  1C
0F22:  CALL   03F8
0F26:  MOVLW  3E
0F28:  MOVWF  FF6
0F2A:  MOVLW  00
0F2C:  MOVWF  FF7
0F2E:  MOVLW  07
0F30:  MOVWF  1B
0F32:  CALL   04C0
....................             lcd_gotoxy(3,2);           
0F36:  MOVLW  03
0F38:  MOVWF  29
0F3A:  MOVLW  02
0F3C:  MOVWF  2A
0F3E:  CALL   034A
....................             printf(lcd_putc,"ayarlandi."); 
0F42:  MOVLW  46
0F44:  MOVWF  FF6
0F46:  MOVLW  00
0F48:  MOVWF  FF7
0F4A:  CALL   03B0
....................           } 
....................               
....................         } 
....................         else 
0F4E:  BRA    0FA8
....................         { 
....................           printf(lcd_putc,"\f"); 
0F50:  MOVLW  0C
0F52:  MOVWF  28
0F54:  CALL   036C
....................           lcd_gotoxy(3,1); 
0F58:  MOVLW  03
0F5A:  MOVWF  29
0F5C:  MOVLW  01
0F5E:  MOVWF  2A
0F60:  CALL   034A
....................           printf(lcd_putc,"%d derece",derece); 
0F64:  MOVFF  19,1B
0F68:  MOVLW  1F
0F6A:  MOVWF  1C
0F6C:  CALL   03F8
0F70:  MOVLW  54
0F72:  MOVWF  FF6
0F74:  MOVLW  00
0F76:  MOVWF  FF7
0F78:  MOVLW  07
0F7A:  MOVWF  1B
0F7C:  CALL   04C0
....................           lcd_gotoxy(3,2);           
0F80:  MOVLW  03
0F82:  MOVWF  29
0F84:  MOVLW  02
0F86:  MOVWF  2A
0F88:  CALL   034A
....................           printf(lcd_putc,"ayarlandi."); 
0F8C:  MOVLW  5C
0F8E:  MOVWF  FF6
0F90:  MOVLW  00
0F92:  MOVWF  FF7
0F94:  CALL   03B0
....................           delay_ms(1500); 
0F98:  MOVLW  06
0F9A:  MOVWF  1B
0F9C:  MOVLW  FA
0F9E:  MOVWF  29
0FA0:  CALL   0080
0FA4:  DECFSZ 1B,F
0FA6:  BRA    0F9C
....................         }     
....................       } 
....................       else 
0FA8:  BRA    132E
....................       { 
....................         sht_rd (temp, humid); 
....................         sicaklik=(unsigned int)temp; 
*
1254:  MOVFF  07,1E
1258:  MOVFF  06,1D
125C:  MOVFF  05,1C
1260:  MOVFF  04,1B
1264:  CALL   09D0
1268:  CLRF   44
126A:  MOVFF  01,43
126E:  CALL   063E
1272:  MOVFF  03,0F
1276:  MOVFF  02,0E
127A:  MOVFF  01,0D
127E:  MOVFF  00,0C
....................         nem=(unsigned int)humid; 
1282:  MOVFF  0B,1E
1286:  MOVFF  0A,1D
128A:  MOVFF  09,1C
128E:  MOVFF  08,1B
1292:  CALL   09D0
1296:  CLRF   44
1298:  MOVFF  01,43
129C:  CALL   063E
12A0:  MOVFF  03,13
12A4:  MOVFF  02,12
12A8:  MOVFF  01,11
12AC:  MOVFF  00,10
....................         lcd_gotoxy(1,1);         
12B0:  MOVLW  01
12B2:  MOVWF  29
12B4:  MOVWF  2A
12B6:  CALL   034A
....................         printf(lcd_putc,"SIC %1.3f ",sicaklik);  
12BA:  MOVLW  68
12BC:  MOVWF  FF6
12BE:  MOVLW  00
12C0:  MOVWF  FF7
12C2:  MOVLW  04
12C4:  MOVWF  1B
12C6:  CALL   04C0
12CA:  MOVLW  89
12CC:  MOVWF  FE9
12CE:  MOVFF  0F,1E
12D2:  MOVFF  0E,1D
12D6:  MOVFF  0D,1C
12DA:  MOVFF  0C,1B
12DE:  MOVLW  03
12E0:  MOVWF  1F
12E2:  CALL   0AC2
12E6:  MOVLW  20
12E8:  MOVWF  28
12EA:  CALL   036C
....................         lcd_gotoxy(1,2); 
12EE:  MOVLW  01
12F0:  MOVWF  29
12F2:  MOVLW  02
12F4:  MOVWF  2A
12F6:  CALL   034A
....................         printf(lcd_putc,"NEM %1.3f ",nem); 
12FA:  MOVLW  74
12FC:  MOVWF  FF6
12FE:  MOVLW  00
1300:  MOVWF  FF7
1302:  MOVLW  04
1304:  MOVWF  1B
1306:  CALL   04C0
130A:  MOVLW  89
130C:  MOVWF  FE9
130E:  MOVFF  13,1E
1312:  MOVFF  12,1D
1316:  MOVFF  11,1C
131A:  MOVFF  10,1B
131E:  MOVLW  03
1320:  MOVWF  1F
1322:  CALL   0AC2
1326:  MOVLW  20
1328:  MOVWF  28
132A:  CALL   036C
....................       } 
....................        
....................       if(derece >= sicaklik-2 && derece <= sicaklik+2) 
132E:  BSF    FD8.1
1330:  MOVFF  0F,4A
1334:  MOVFF  0E,49
1338:  MOVFF  0D,48
133C:  MOVFF  0C,47
1340:  CLRF   4E
1342:  CLRF   4D
1344:  CLRF   4C
1346:  MOVLW  80
1348:  MOVWF  4B
134A:  CALL   0766
134E:  MOVFF  00,1B
1352:  MOVFF  01,1C
1356:  MOVFF  02,1D
135A:  MOVFF  03,1E
135E:  CLRF   44
1360:  MOVFF  19,43
1364:  CALL   063E
1368:  MOVFF  1E,26
136C:  MOVFF  1D,25
1370:  MOVFF  1C,24
1374:  MOVFF  1B,23
1378:  MOVFF  03,2A
137C:  MOVFF  02,29
1380:  MOVFF  01,28
1384:  MOVFF  00,27
1388:  RCALL  0C48
138A:  BC    138E
138C:  BNZ   13F8
138E:  BCF    FD8.1
1390:  MOVFF  0F,4A
1394:  MOVFF  0E,49
1398:  MOVFF  0D,48
139C:  MOVFF  0C,47
13A0:  CLRF   4E
13A2:  CLRF   4D
13A4:  CLRF   4C
13A6:  MOVLW  80
13A8:  MOVWF  4B
13AA:  CALL   0766
13AE:  MOVFF  00,1F
13B2:  MOVFF  01,20
13B6:  MOVFF  02,21
13BA:  MOVFF  03,22
13BE:  CLRF   44
13C0:  MOVFF  19,43
13C4:  CALL   063E
13C8:  MOVFF  03,26
13CC:  MOVFF  02,25
13D0:  MOVFF  01,24
13D4:  MOVFF  00,23
13D8:  MOVFF  22,2A
13DC:  MOVFF  21,29
13E0:  MOVFF  20,28
13E4:  MOVFF  1F,27
13E8:  RCALL  0C48
13EA:  BC    13EE
13EC:  BNZ   13F8
....................       { 
....................        output_low(isitici); 
13EE:  BCF    F94.0
13F0:  BCF    F8B.0
....................        output_low(sogutucu); 
13F2:  BCF    F94.1
13F4:  BCF    F8B.1
....................       }   
....................       else if(derece > sicaklik) 
13F6:  BRA    1468
13F8:  CLRF   44
13FA:  MOVFF  19,43
13FE:  CALL   063E
1402:  MOVFF  0F,26
1406:  MOVFF  0E,25
140A:  MOVFF  0D,24
140E:  MOVFF  0C,23
1412:  MOVFF  03,2A
1416:  MOVFF  02,29
141A:  MOVFF  01,28
141E:  MOVFF  00,27
1422:  RCALL  0C48
1424:  BNC   1430
....................       { 
....................        output_high(isitici); 
1426:  BCF    F94.0
1428:  BSF    F8B.0
....................        output_low(sogutucu);      
142A:  BCF    F94.1
142C:  BCF    F8B.1
....................       } 
....................       else if(derece < sicaklik) 
142E:  BRA    1468
1430:  CLRF   44
1432:  MOVFF  19,43
1436:  CALL   063E
143A:  MOVFF  03,26
143E:  MOVFF  02,25
1442:  MOVFF  01,24
1446:  MOVFF  00,23
144A:  MOVFF  0F,2A
144E:  MOVFF  0E,29
1452:  MOVFF  0D,28
1456:  MOVFF  0C,27
145A:  CALL   0C48
145E:  BNC   1468
....................       { 
....................        output_low(isitici); 
1460:  BCF    F94.0
1462:  BCF    F8B.0
....................        output_high(sogutucu);   
1464:  BCF    F94.1
1466:  BSF    F8B.1
....................       } 
....................  
....................    } 
1468:  BRA    0D64
....................  
.................... } 
....................  
....................  
146A:  SLEEP 

Configuration Fuses:
   Word  1: 2100   XT NOOSCSEN
   Word  2: 0E0D   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0080   NOSTVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
