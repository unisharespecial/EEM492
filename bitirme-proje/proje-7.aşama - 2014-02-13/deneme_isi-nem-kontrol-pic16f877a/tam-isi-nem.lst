CCS PCM C Compiler, Version 4.106, 18916               22-Þub-14 20:57

               Filename: C:\Users\Akýn\Desktop\isi-nem-kontrol-pic16f877a\tam-isi-nem.lst

               ROM used: 3054 words (37%)
                         Largest free fragment is 2048
               RAM used: 36 (10%) at main() level
                         89 (24%) worst case
               Stack:    5 locations

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES XT                       //Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
....................  
.................... #use delay(clock=4000000) 
*
004F:  MOVLW  45
0050:  MOVWF  04
0051:  BCF    03.7
0052:  MOVF   00,W
0053:  BTFSC  03.2
0054:  GOTO   063
0055:  MOVLW  01
0056:  MOVWF  78
0057:  CLRF   77
0058:  DECFSZ 77,F
0059:  GOTO   058
005A:  DECFSZ 78,F
005B:  GOTO   057
005C:  MOVLW  4A
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  GOTO   061
0061:  DECFSZ 00,F
0062:  GOTO   055
0063:  RETURN
....................  
.................... #include "SHT11.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                           // 
.................... // Driver file for SHT75 Temperature & Humidity Sensor                       // 
.................... //                                                                           // 
.................... // ***** To initialise SHT75 sensor upon power up *****                      // 
.................... //                                                                           // 
.................... // Function : sht_init()                                                     // 
.................... // Return   : none                                                           // 
.................... //                                                                           // 
.................... //                                                                           // 
.................... // ***** To measure and caluculate SHT75 temp & real RH *****                // 
.................... //                                                                           // 
.................... // Function : sht_rd (temp, truehumid)                                       // 
.................... // Return   : temperature & true humidity in float values                    // 
.................... //                                                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................   
.................... #define sht_data_pin   PIN_B7 
.................... #define sht_clk_pin    PIN_B6 
....................  
.................... //***** Function to alert SHT75 ***** 
....................   
.................... void comstart (void) 
.................... { 
....................  output_float(sht_data_pin);  //data high 
*
00E1:  BSF    03.5
00E2:  BSF    06.7
....................  output_low(sht_clk_pin);  //clk low 
00E3:  BCF    06.6
00E4:  BCF    03.5
00E5:  BCF    06.6
....................  delay_us(1); 
00E6:  NOP
....................  output_high(sht_clk_pin);  //clk high 
00E7:  BSF    03.5
00E8:  BCF    06.6
00E9:  BCF    03.5
00EA:  BSF    06.6
....................  delay_us(1); 
00EB:  NOP
....................  output_low(sht_data_pin); //data low 
00EC:  BSF    03.5
00ED:  BCF    06.7
00EE:  BCF    03.5
00EF:  BCF    06.7
....................  delay_us(1); 
00F0:  NOP
....................  output_low(sht_clk_pin);  //clk low 
00F1:  BSF    03.5
00F2:  BCF    06.6
00F3:  BCF    03.5
00F4:  BCF    06.6
....................  delay_us(2); 
00F5:  GOTO   0F6
....................  output_high(sht_clk_pin);  //clk high 
00F6:  BSF    03.5
00F7:  BCF    06.6
00F8:  BCF    03.5
00F9:  BSF    06.6
....................  delay_us(1); 
00FA:  NOP
....................  output_float(sht_data_pin);  //data high 
00FB:  BSF    03.5
00FC:  BSF    06.7
....................  delay_us(1); 
00FD:  NOP
....................  output_low(sht_clk_pin);  //clk low 
00FE:  BCF    06.6
00FF:  BCF    03.5
0100:  BCF    06.6
.................... } 
0101:  RETURN
....................   
.................... //***** Function to write data to SHT75 ***** 
....................   
.................... int1 comwrite (int8 iobyte) 
.................... { 
*
03AA:  MOVLW  80
03AB:  MOVWF  4C
....................  int8 i, mask = 0x80; 
....................  int1 ack; 
....................   
....................  //Shift out command 
....................  delay_us(4); 
03AC:  GOTO   3AD
03AD:  GOTO   3AE
....................  for(i=0; i<8; i++) 
03AE:  CLRF   4B
03AF:  MOVF   4B,W
03B0:  SUBLW  07
03B1:  BTFSS  03.0
03B2:  GOTO   3CD
....................   { 
....................    output_low(sht_clk_pin);                          //clk low 
03B3:  BSF    03.5
03B4:  BCF    06.6
03B5:  BCF    03.5
03B6:  BCF    06.6
....................    if((iobyte & mask) > 0) output_float(sht_data_pin);  //data high if MSB high 
03B7:  MOVF   4A,W
03B8:  ANDWF  4C,W
03B9:  BTFSC  03.2
03BA:  GOTO   3BF
03BB:  BSF    03.5
03BC:  BSF    06.7
....................    else output_low(sht_data_pin);                    //data low if MSB low 
03BD:  GOTO   3C4
03BE:  BCF    03.5
03BF:  BSF    03.5
03C0:  BCF    06.7
03C1:  BCF    03.5
03C2:  BCF    06.7
03C3:  BSF    03.5
....................    delay_us(1); 
03C4:  NOP
....................    output_high(sht_clk_pin);                          //clk high 
03C5:  BCF    06.6
03C6:  BCF    03.5
03C7:  BSF    06.6
....................    delay_us(1); 
03C8:  NOP
....................    mask = mask >> 1;                                    //shift to next bit 
03C9:  BCF    03.0
03CA:  RRF    4C,F
....................   } 
03CB:  INCF   4B,F
03CC:  GOTO   3AF
....................   
....................  //Shift in ack 
....................  output_low(sht_clk_pin);  //clk low 
03CD:  BSF    03.5
03CE:  BCF    06.6
03CF:  BCF    03.5
03D0:  BCF    06.6
....................  delay_us(1); 
03D1:  NOP
....................  ack = input(sht_data_pin);   //get ack bit 
03D2:  BSF    03.5
03D3:  BSF    06.7
03D4:  BCF    03.5
03D5:  BCF    4D.0
03D6:  BTFSC  06.7
03D7:  BSF    4D.0
....................  output_high(sht_clk_pin);  //clk high 
03D8:  BSF    03.5
03D9:  BCF    06.6
03DA:  BCF    03.5
03DB:  BSF    06.6
....................  delay_us(1); 
03DC:  NOP
....................  output_low(sht_clk_pin);  //clk low 
03DD:  BSF    03.5
03DE:  BCF    06.6
03DF:  BCF    03.5
03E0:  BCF    06.6
....................  return(ack); 
03E1:  MOVLW  00
03E2:  BTFSC  4D.0
03E3:  MOVLW  01
03E4:  MOVWF  78
.................... } 
03E5:  RETURN
....................   
.................... //***** Function to read data from SHT75 ***** 
....................   
.................... int16 comread (void) 
.................... { 
*
0406:  CLRF   4C
0407:  CLRF   4B
....................  int8 i; 
....................  int16 iobyte = 0; 
....................  const int16 mask0 = 0x0000; 
....................  const int16 mask1 = 0x0001; 
....................   
....................  //shift in MSB data 
....................  for(i=0; i<8; i++) 
0408:  CLRF   4A
0409:  MOVF   4A,W
040A:  SUBLW  07
040B:  BTFSS  03.0
040C:  GOTO   421
....................   { 
....................    iobyte = iobyte << 1; 
040D:  BCF    03.0
040E:  RLF    4B,F
040F:  RLF    4C,F
....................    output_high(sht_clk_pin);                //clk high 
0410:  BSF    03.5
0411:  BCF    06.6
0412:  BCF    03.5
0413:  BSF    06.6
....................    delay_us(1); 
0414:  NOP
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
0415:  BSF    03.5
0416:  BSF    06.7
0417:  BCF    03.5
0418:  BTFSC  06.7
0419:  BSF    4B.0
....................    else iobyte |= mask0; 
....................    output_low(sht_clk_pin);                //clk low 
041A:  BSF    03.5
041B:  BCF    06.6
041C:  BCF    03.5
041D:  BCF    06.6
....................    delay_us(1); 
041E:  NOP
....................   } 
041F:  INCF   4A,F
0420:  GOTO   409
....................   
....................  //send ack 0 bit 
....................  output_low(sht_data_pin); //data low 
0421:  BSF    03.5
0422:  BCF    06.7
0423:  BCF    03.5
0424:  BCF    06.7
....................  delay_us(1); 
0425:  NOP
....................  output_high(sht_clk_pin);  //clk high 
0426:  BSF    03.5
0427:  BCF    06.6
0428:  BCF    03.5
0429:  BSF    06.6
....................  delay_us(2); 
042A:  GOTO   42B
....................  output_low(sht_clk_pin);  //clk low 
042B:  BSF    03.5
042C:  BCF    06.6
042D:  BCF    03.5
042E:  BCF    06.6
....................  delay_us(1); 
042F:  NOP
....................  output_float(sht_data_pin);  //data high 
0430:  BSF    03.5
0431:  BSF    06.7
....................   
....................  //shift in LSB data 
....................  for(i=0; i<8; i++) 
0432:  BCF    03.5
0433:  CLRF   4A
0434:  MOVF   4A,W
0435:  SUBLW  07
0436:  BTFSS  03.0
0437:  GOTO   44C
....................   { 
....................    iobyte = iobyte << 1; 
0438:  BCF    03.0
0439:  RLF    4B,F
043A:  RLF    4C,F
....................    output_high(sht_clk_pin);                //clk high 
043B:  BSF    03.5
043C:  BCF    06.6
043D:  BCF    03.5
043E:  BSF    06.6
....................    delay_us(1); 
043F:  NOP
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
0440:  BSF    03.5
0441:  BSF    06.7
0442:  BCF    03.5
0443:  BTFSC  06.7
0444:  BSF    4B.0
....................    else iobyte |= mask0; 
....................    output_low(sht_clk_pin);                //clk low 
0445:  BSF    03.5
0446:  BCF    06.6
0447:  BCF    03.5
0448:  BCF    06.6
....................    delay_us(1); 
0449:  NOP
....................   } 
044A:  INCF   4A,F
044B:  GOTO   434
....................   
....................  //send ack 1 bit 
....................  output_float(sht_data_pin);  //data high 
044C:  BSF    03.5
044D:  BSF    06.7
....................  delay_us(1); 
044E:  NOP
....................  output_high(sht_clk_pin);  //clk high 
044F:  BCF    06.6
0450:  BCF    03.5
0451:  BSF    06.6
....................  delay_us(2); 
0452:  GOTO   453
....................  output_low(sht_clk_pin);  //clk low 
0453:  BSF    03.5
0454:  BCF    06.6
0455:  BCF    03.5
0456:  BCF    06.6
....................   
....................  return(iobyte); 
0457:  MOVF   4B,W
0458:  MOVWF  78
0459:  MOVF   4C,W
045A:  MOVWF  79
.................... } 
045B:  RETURN
....................   
.................... //***** Function to wait for SHT75 reading ***** 
....................   
.................... void comwait (void) 
.................... { 
....................  int16 sht_delay; 
....................   
....................  output_float(sht_data_pin);                     //data high 
*
03E6:  BSF    03.5
03E7:  BSF    06.7
....................  output_low(sht_clk_pin);                     //clk low 
03E8:  BCF    06.6
03E9:  BCF    03.5
03EA:  BCF    06.6
....................  delay_us(1); 
03EB:  NOP
....................  for(sht_delay=0; sht_delay<30000; sht_delay++)  // wait for max 300ms 
03EC:  CLRF   4B
03ED:  CLRF   4A
03EE:  MOVF   4B,W
03EF:  SUBLW  75
03F0:  BTFSS  03.0
03F1:  GOTO   405
03F2:  BTFSS  03.2
03F3:  GOTO   3F8
03F4:  MOVF   4A,W
03F5:  SUBLW  2F
03F6:  BTFSS  03.0
03F7:  GOTO   405
....................   { 
....................    if (!input(sht_data_pin)) break;              //if sht_data_pin low, SHT75 ready 
03F8:  BSF    03.5
03F9:  BSF    06.7
03FA:  BCF    03.5
03FB:  BTFSS  06.7
03FC:  GOTO   405
....................    delay_us(10); 
03FD:  MOVLW  03
03FE:  MOVWF  77
03FF:  DECFSZ 77,F
0400:  GOTO   3FF
....................   } 
0401:  INCF   4A,F
0402:  BTFSC  03.2
0403:  INCF   4B,F
0404:  GOTO   3EE
.................... } 
0405:  RETURN
....................   
.................... //***** Function to reset SHT75 communication ***** 
....................   
.................... void comreset (void) 
.................... { 
....................  int8 i; 
....................   
....................  output_float(sht_data_pin);    //data high 
*
0102:  BSF    03.5
0103:  BSF    06.7
....................  output_low(sht_clk_pin);    //clk low 
0104:  BCF    06.6
0105:  BCF    03.5
0106:  BCF    06.6
....................  delay_us(2); 
0107:  GOTO   108
....................  for(i=0; i<9; i++) 
0108:  CLRF   37
0109:  MOVF   37,W
010A:  SUBLW  08
010B:  BTFSS  03.0
010C:  GOTO   119
....................   { 
....................    output_high(sht_clk_pin);  //toggle clk 9 times 
010D:  BSF    03.5
010E:  BCF    06.6
010F:  BCF    03.5
0110:  BSF    06.6
....................    delay_us(2); 
0111:  GOTO   112
....................    output_low(sht_clk_pin); 
0112:  BSF    03.5
0113:  BCF    06.6
0114:  BCF    03.5
0115:  BCF    06.6
....................    delay_us(2); 
0116:  GOTO   117
....................  } 
0117:  INCF   37,F
0118:  GOTO   109
....................  comstart(); 
0119:  CALL   0E1
.................... } 
....................   
.................... //***** Function to soft reset SHT75 ***** 
....................   
.................... void sht_soft_reset (void) 
.................... { 
....................  comreset();           //SHT75 communication reset 
....................  comwrite(0x1e);       //send SHT75 reset command 
....................  delay_ms(15);         //pause 15 ms 
.................... } 
....................   
.................... //***** Function to measure SHT75 temperature ***** 
....................   
.................... int16 measuretemp (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();             //alert SHT75 
*
0943:  BCF    0A.3
0944:  CALL   0E1
0945:  BSF    0A.3
....................  ack = comwrite(0x03);   //send measure temp command and read ack status 
0946:  MOVLW  03
0947:  MOVWF  4A
0948:  BCF    0A.3
0949:  CALL   3AA
094A:  BSF    0A.3
094B:  BCF    47.0
094C:  BTFSC  78.0
094D:  BSF    47.0
....................  if(ack == 1) return; 
094E:  BTFSC  47.0
094F:  GOTO   15E
....................  comwait();              //wait for SHT75 measurement to complete 
0950:  BCF    0A.3
0951:  CALL   3E6
0952:  BSF    0A.3
....................  iobyte = comread();     //read SHT75 temp data 
0953:  BCF    0A.3
0954:  CALL   406
0955:  BSF    0A.3
0956:  MOVF   79,W
0957:  MOVWF  49
0958:  MOVF   78,W
0959:  MOVWF  48
....................  return(iobyte); 
095A:  MOVF   48,W
095B:  MOVWF  78
095C:  MOVF   49,W
095D:  MOVWF  79
.................... } 
....................   
.................... //***** Function to measure SHT75 RH ***** 
....................   
.................... int16 measurehumid (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();            //alert SHT75 
*
0962:  BCF    0A.3
0963:  CALL   0E1
0964:  BSF    0A.3
....................  ack = comwrite(0x05);  //send measure RH command and read ack status 
0965:  MOVLW  05
0966:  MOVWF  4A
0967:  BCF    0A.3
0968:  CALL   3AA
0969:  BSF    0A.3
096A:  BCF    47.0
096B:  BTFSC  78.0
096C:  BSF    47.0
....................  if(ack == 1) return; 
096D:  BTFSC  47.0
096E:  GOTO   17D
....................  comwait();             //wait for SHT75 measurement to complete 
096F:  BCF    0A.3
0970:  CALL   3E6
0971:  BSF    0A.3
....................  iobyte = comread();    //read SHT75 temp data 
0972:  BCF    0A.3
0973:  CALL   406
0974:  BSF    0A.3
0975:  MOVF   79,W
0976:  MOVWF  49
0977:  MOVF   78,W
0978:  MOVWF  48
....................  return(iobyte); 
0979:  MOVF   48,W
097A:  MOVWF  78
097B:  MOVF   49,W
097C:  MOVWF  79
.................... } 
....................   
.................... //***** Function to calculate SHT75 temp & RH ***** 
....................   
.................... void calculate_data (int16 temp, int16 humid, float & tc, float & rhlin, float & rhtrue) 
.................... { 
....................  float truehumid1, rh; 
....................   
....................  //calculate temperature reading 
....................  tc = ((float) temp * 0.01) - 40.0; 
*
0989:  MOVF   48,W
098A:  MOVWF  60
098B:  MOVF   47,W
098C:  MOVWF  5F
098D:  BCF    0A.3
098E:  CALL   45C
098F:  BSF    0A.3
0990:  MOVF   77,W
0991:  MOVWF  53
0992:  MOVF   78,W
0993:  MOVWF  54
0994:  MOVF   79,W
0995:  MOVWF  55
0996:  MOVF   7A,W
0997:  MOVWF  56
0998:  MOVWF  6A
0999:  MOVF   79,W
099A:  MOVWF  69
099B:  MOVF   78,W
099C:  MOVWF  68
099D:  MOVF   77,W
099E:  MOVWF  67
099F:  MOVLW  0A
09A0:  MOVWF  6E
09A1:  MOVLW  D7
09A2:  MOVWF  6D
09A3:  MOVLW  23
09A4:  MOVWF  6C
09A5:  MOVLW  78
09A6:  MOVWF  6B
09A7:  BCF    0A.3
09A8:  CALL   479
09A9:  BSF    0A.3
09AA:  MOVF   77,W
09AB:  MOVWF  53
09AC:  MOVF   78,W
09AD:  MOVWF  54
09AE:  MOVF   79,W
09AF:  MOVWF  55
09B0:  MOVF   7A,W
09B1:  MOVWF  56
09B2:  BSF    03.1
09B3:  MOVF   7A,W
09B4:  MOVWF  66
09B5:  MOVF   79,W
09B6:  MOVWF  65
09B7:  MOVF   78,W
09B8:  MOVWF  64
09B9:  MOVF   77,W
09BA:  MOVWF  63
09BB:  CLRF   6A
09BC:  CLRF   69
09BD:  MOVLW  20
09BE:  MOVWF  68
09BF:  MOVLW  84
09C0:  MOVWF  67
09C1:  BCF    0A.3
09C2:  CALL   4EE
09C3:  BSF    0A.3
09C4:  MOVF   7A,W
09C5:  MOVWF  23
09C6:  MOVF   79,W
09C7:  MOVWF  22
09C8:  MOVF   78,W
09C9:  MOVWF  21
09CA:  MOVF   77,W
09CB:  MOVWF  20
....................   
....................   
....................  //calculate Real RH reading 
....................  rh = (float) humid; 
09CC:  MOVF   4A,W
09CD:  MOVWF  60
09CE:  MOVF   49,W
09CF:  MOVWF  5F
09D0:  BCF    0A.3
09D1:  CALL   45C
09D2:  BSF    0A.3
09D3:  MOVF   7A,W
09D4:  MOVWF  52
09D5:  MOVF   79,W
09D6:  MOVWF  51
09D7:  MOVF   78,W
09D8:  MOVWF  50
09D9:  MOVF   77,W
09DA:  MOVWF  4F
....................   
....................  rhlin = (rh * 0.0405) - (rh * rh * 0.0000028) - 4.0; 
09DB:  MOVF   52,W
09DC:  MOVWF  6A
09DD:  MOVF   51,W
09DE:  MOVWF  69
09DF:  MOVF   50,W
09E0:  MOVWF  68
09E1:  MOVF   4F,W
09E2:  MOVWF  67
09E3:  MOVLW  54
09E4:  MOVWF  6E
09E5:  MOVLW  E3
09E6:  MOVWF  6D
09E7:  MOVLW  25
09E8:  MOVWF  6C
09E9:  MOVLW  7A
09EA:  MOVWF  6B
09EB:  BCF    0A.3
09EC:  CALL   479
09ED:  BSF    0A.3
09EE:  MOVF   77,W
09EF:  MOVWF  53
09F0:  MOVF   78,W
09F1:  MOVWF  54
09F2:  MOVF   79,W
09F3:  MOVWF  55
09F4:  MOVF   7A,W
09F5:  MOVWF  56
09F6:  MOVF   52,W
09F7:  MOVWF  6A
09F8:  MOVF   51,W
09F9:  MOVWF  69
09FA:  MOVF   50,W
09FB:  MOVWF  68
09FC:  MOVF   4F,W
09FD:  MOVWF  67
09FE:  MOVF   52,W
09FF:  MOVWF  6E
0A00:  MOVF   51,W
0A01:  MOVWF  6D
0A02:  MOVF   50,W
0A03:  MOVWF  6C
0A04:  MOVF   4F,W
0A05:  MOVWF  6B
0A06:  BCF    0A.3
0A07:  CALL   479
0A08:  BSF    0A.3
0A09:  MOVF   77,W
0A0A:  MOVWF  57
0A0B:  MOVF   78,W
0A0C:  MOVWF  58
0A0D:  MOVF   79,W
0A0E:  MOVWF  59
0A0F:  MOVF   7A,W
0A10:  MOVWF  5A
0A11:  MOVWF  6A
0A12:  MOVF   79,W
0A13:  MOVWF  69
0A14:  MOVF   78,W
0A15:  MOVWF  68
0A16:  MOVF   77,W
0A17:  MOVWF  67
0A18:  MOVLW  A2
0A19:  MOVWF  6E
0A1A:  MOVLW  E7
0A1B:  MOVWF  6D
0A1C:  MOVLW  3B
0A1D:  MOVWF  6C
0A1E:  MOVLW  6C
0A1F:  MOVWF  6B
0A20:  BCF    0A.3
0A21:  CALL   479
0A22:  BSF    0A.3
0A23:  BSF    03.1
0A24:  MOVF   56,W
0A25:  MOVWF  66
0A26:  MOVF   55,W
0A27:  MOVWF  65
0A28:  MOVF   54,W
0A29:  MOVWF  64
0A2A:  MOVF   53,W
0A2B:  MOVWF  63
0A2C:  MOVF   7A,W
0A2D:  MOVWF  6A
0A2E:  MOVF   79,W
0A2F:  MOVWF  69
0A30:  MOVF   78,W
0A31:  MOVWF  68
0A32:  MOVF   77,W
0A33:  MOVWF  67
0A34:  BCF    0A.3
0A35:  CALL   4EE
0A36:  BSF    0A.3
0A37:  MOVF   77,W
0A38:  MOVWF  53
0A39:  MOVF   78,W
0A3A:  MOVWF  54
0A3B:  MOVF   79,W
0A3C:  MOVWF  55
0A3D:  MOVF   7A,W
0A3E:  MOVWF  56
0A3F:  BSF    03.1
0A40:  MOVF   7A,W
0A41:  MOVWF  66
0A42:  MOVF   79,W
0A43:  MOVWF  65
0A44:  MOVF   78,W
0A45:  MOVWF  64
0A46:  MOVF   77,W
0A47:  MOVWF  63
0A48:  CLRF   6A
0A49:  CLRF   69
0A4A:  CLRF   68
0A4B:  MOVLW  81
0A4C:  MOVWF  67
0A4D:  BCF    0A.3
0A4E:  CALL   4EE
0A4F:  BSF    0A.3
0A50:  MOVF   7A,W
0A51:  MOVWF  3E
0A52:  MOVF   79,W
0A53:  MOVWF  3D
0A54:  MOVF   78,W
0A55:  MOVWF  3C
0A56:  MOVF   77,W
0A57:  MOVWF  3B
....................   
....................  //calculate True RH reading 
....................  rhtrue = ((tc - 25.0) * (0.01 + (0.00008 * rh))) + rhlin; 
0A58:  BSF    03.1
0A59:  MOVF   23,W
0A5A:  MOVWF  66
0A5B:  MOVF   22,W
0A5C:  MOVWF  65
0A5D:  MOVF   21,W
0A5E:  MOVWF  64
0A5F:  MOVF   20,W
0A60:  MOVWF  63
0A61:  CLRF   6A
0A62:  CLRF   69
0A63:  MOVLW  48
0A64:  MOVWF  68
0A65:  MOVLW  83
0A66:  MOVWF  67
0A67:  BCF    0A.3
0A68:  CALL   4EE
0A69:  BSF    0A.3
0A6A:  MOVF   77,W
0A6B:  MOVWF  53
0A6C:  MOVF   78,W
0A6D:  MOVWF  54
0A6E:  MOVF   79,W
0A6F:  MOVWF  55
0A70:  MOVF   7A,W
0A71:  MOVWF  56
0A72:  MOVLW  AC
0A73:  MOVWF  6A
0A74:  MOVLW  C5
0A75:  MOVWF  69
0A76:  MOVLW  27
0A77:  MOVWF  68
0A78:  MOVLW  71
0A79:  MOVWF  67
0A7A:  MOVF   52,W
0A7B:  MOVWF  6E
0A7C:  MOVF   51,W
0A7D:  MOVWF  6D
0A7E:  MOVF   50,W
0A7F:  MOVWF  6C
0A80:  MOVF   4F,W
0A81:  MOVWF  6B
0A82:  BCF    0A.3
0A83:  CALL   479
0A84:  BSF    0A.3
0A85:  BCF    03.1
0A86:  MOVLW  0A
0A87:  MOVWF  66
0A88:  MOVLW  D7
0A89:  MOVWF  65
0A8A:  MOVLW  23
0A8B:  MOVWF  64
0A8C:  MOVLW  78
0A8D:  MOVWF  63
0A8E:  MOVF   7A,W
0A8F:  MOVWF  6A
0A90:  MOVF   79,W
0A91:  MOVWF  69
0A92:  MOVF   78,W
0A93:  MOVWF  68
0A94:  MOVF   77,W
0A95:  MOVWF  67
0A96:  BCF    0A.3
0A97:  CALL   4EE
0A98:  BSF    0A.3
0A99:  MOVF   56,W
0A9A:  MOVWF  6A
0A9B:  MOVF   55,W
0A9C:  MOVWF  69
0A9D:  MOVF   54,W
0A9E:  MOVWF  68
0A9F:  MOVF   53,W
0AA0:  MOVWF  67
0AA1:  MOVF   7A,W
0AA2:  MOVWF  6E
0AA3:  MOVF   79,W
0AA4:  MOVWF  6D
0AA5:  MOVF   78,W
0AA6:  MOVWF  6C
0AA7:  MOVF   77,W
0AA8:  MOVWF  6B
0AA9:  BCF    0A.3
0AAA:  CALL   479
0AAB:  BSF    0A.3
0AAC:  MOVF   77,W
0AAD:  MOVWF  53
0AAE:  MOVF   78,W
0AAF:  MOVWF  54
0AB0:  MOVF   79,W
0AB1:  MOVWF  55
0AB2:  MOVF   7A,W
0AB3:  MOVWF  56
0AB4:  BCF    03.1
0AB5:  MOVF   7A,W
0AB6:  MOVWF  66
0AB7:  MOVF   79,W
0AB8:  MOVWF  65
0AB9:  MOVF   78,W
0ABA:  MOVWF  64
0ABB:  MOVF   77,W
0ABC:  MOVWF  63
0ABD:  MOVF   3E,W
0ABE:  MOVWF  6A
0ABF:  MOVF   3D,W
0AC0:  MOVWF  69
0AC1:  MOVF   3C,W
0AC2:  MOVWF  68
0AC3:  MOVF   3B,W
0AC4:  MOVWF  67
0AC5:  BCF    0A.3
0AC6:  CALL   4EE
0AC7:  BSF    0A.3
0AC8:  MOVF   7A,W
0AC9:  MOVWF  27
0ACA:  MOVF   79,W
0ACB:  MOVWF  26
0ACC:  MOVF   78,W
0ACD:  MOVWF  25
0ACE:  MOVF   77,W
0ACF:  MOVWF  24
.................... } 
....................   
.................... //***** Function to measure & calculate SHT75 temp & RH ***** 
....................   
.................... void sht_rd (float & temp, float & truehumid) 
.................... { 
....................  int16 restemp, reshumid; 
....................  float realhumid; 
....................  restemp = 0; truehumid = 0; 
*
093D:  CLRF   38
093E:  CLRF   37
093F:  CLRF   27
0940:  CLRF   26
0941:  CLRF   25
0942:  CLRF   24
....................   
....................  restemp = measuretemp();    //measure temp 
*
095E:  MOVF   79,W
095F:  MOVWF  38
0960:  MOVF   78,W
0961:  MOVWF  37
....................  reshumid = measurehumid();  //measure RH 
*
097D:  MOVF   79,W
097E:  MOVWF  3A
097F:  MOVF   78,W
0980:  MOVWF  39
.................... calculate_data (restemp, reshumid, temp, realhumid, truehumid);  //calculate temp & RH 
0981:  MOVF   38,W
0982:  MOVWF  48
0983:  MOVF   37,W
0984:  MOVWF  47
0985:  MOVF   3A,W
0986:  MOVWF  4A
0987:  MOVF   39,W
0988:  MOVWF  49
.................... } 
....................   
.................... //***** Function to initialise SHT75 on power-up ***** 
....................   
.................... void sht_init (void) 
.................... { 
....................  comreset();    //reset SHT75 
....................  delay_ms(20);  //delay for power-up 
*
011A:  MOVLW  14
011B:  MOVWF  45
011C:  CALL   04F
.................... } 
011D:  BSF    0A.3
011E:  BCF    0A.4
011F:  GOTO   064 (RETURN)
....................  
....................  
....................  
.................... #include "new_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
....................  
.................... #define LCD_E     PIN_D0 
.................... #define LCD_RS    PIN_D1 
.................... //#define LCD_RW    0 
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW   1 
....................  
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0x0C,//0xf,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
.................... /* 
.................... byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xC, 1,6}; 
....................  
.................... Value   Cursor  Blink 
.................... 0x0C     Off      Off 
.................... 0x0D     Off      On 
.................... 0x0E     On       Off 
.................... 0x0F     On       On 
....................  
.................... */ 
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
0064:  BTFSC  4C.0
0065:  GOTO   068
0066:  BCF    08.4
0067:  GOTO   069
0068:  BSF    08.4
0069:  BSF    03.5
006A:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
006B:  BCF    03.5
006C:  BTFSC  4C.1
006D:  GOTO   070
006E:  BCF    08.5
006F:  GOTO   071
0070:  BSF    08.5
0071:  BSF    03.5
0072:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
0073:  BCF    03.5
0074:  BTFSC  4C.2
0075:  GOTO   078
0076:  BCF    08.6
0077:  GOTO   079
0078:  BSF    08.6
0079:  BSF    03.5
007A:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
007B:  BCF    03.5
007C:  BTFSC  4C.3
007D:  GOTO   080
007E:  BCF    08.7
007F:  GOTO   081
0080:  BSF    08.7
0081:  BSF    03.5
0082:  BCF    08.7
....................  
....................  delay_cycles(1); 
0083:  NOP
....................  output_high(LCD_E); 
0084:  BCF    08.0
0085:  BCF    03.5
0086:  BSF    08.0
....................  delay_us(2); 
0087:  GOTO   088
....................  output_low(LCD_E); 
0088:  BSF    03.5
0089:  BCF    08.0
008A:  BCF    03.5
008B:  BCF    08.0
.................... } 
008C:  RETURN
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
008D:  BSF    03.5
008E:  BCF    08.1
008F:  BCF    03.5
0090:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
0091:  MOVLW  13
0092:  MOVWF  77
0093:  DECFSZ 77,F
0094:  GOTO   093
0095:  GOTO   096
.................... #endif 
....................  
.................... if(address) 
0096:  MOVF   49,F
0097:  BTFSC  03.2
0098:  GOTO   09E
....................    output_high(LCD_RS); 
0099:  BSF    03.5
009A:  BCF    08.1
009B:  BCF    03.5
009C:  BSF    08.1
.................... else 
009D:  GOTO   0A2
....................    output_low(LCD_RS); 
009E:  BSF    03.5
009F:  BCF    08.1
00A0:  BCF    03.5
00A1:  BCF    08.1
....................  
....................  delay_cycles(1); 
00A2:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
00A3:  BSF    03.5
00A4:  BCF    08.0
00A5:  BCF    03.5
00A6:  BCF    08.0
....................  
.................... lcd_send_nibble(n >> 4); 
00A7:  SWAPF  4A,W
00A8:  MOVWF  4B
00A9:  MOVLW  0F
00AA:  ANDWF  4B,F
00AB:  MOVF   4B,W
00AC:  MOVWF  4C
00AD:  CALL   064
.................... lcd_send_nibble(n & 0xf); 
00AE:  MOVF   4A,W
00AF:  ANDLW  0F
00B0:  MOVWF  4B
00B1:  MOVWF  4C
00B2:  CALL   064
.................... } 
00B3:  RETURN
....................  
.................... //---------------------------- 
....................  
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
00B4:  BSF    03.5
00B5:  BCF    08.1
00B6:  BCF    03.5
00B7:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
00B8:  BSF    03.5
00B9:  BCF    08.0
00BA:  BCF    03.5
00BB:  BCF    08.0
....................  
.................... delay_ms(15); 
00BC:  MOVLW  0F
00BD:  MOVWF  45
00BE:  CALL   04F
....................  
.................... for(i=0 ;i < 3; i++) 
00BF:  CLRF   37
00C0:  MOVF   37,W
00C1:  SUBLW  02
00C2:  BTFSS  03.0
00C3:  GOTO   0CC
....................    { 
....................     lcd_send_nibble(0x03); 
00C4:  MOVLW  03
00C5:  MOVWF  4C
00C6:  CALL   064
....................     delay_ms(5); 
00C7:  MOVLW  05
00C8:  MOVWF  45
00C9:  CALL   04F
....................    } 
00CA:  INCF   37,F
00CB:  GOTO   0C0
....................  
.................... lcd_send_nibble(0x02); 
00CC:  MOVLW  02
00CD:  MOVWF  4C
00CE:  CALL   064
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
00CF:  CLRF   37
00D0:  MOVF   37,W
00D1:  SUBLW  03
00D2:  BTFSS  03.0
00D3:  GOTO   0E0
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
00D4:  MOVF   37,W
00D5:  CALL   004
00D6:  MOVWF  38
00D7:  CLRF   49
00D8:  MOVF   38,W
00D9:  MOVWF  4A
00DA:  CALL   08D
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
00DB:  MOVLW  05
00DC:  MOVWF  45
00DD:  CALL   04F
....................     #endif 
....................    } 
00DE:  INCF   37,F
00DF:  GOTO   0D0
....................  
.................... } 
00E0:  RETURN
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0269:  DECFSZ 46,W
026A:  GOTO   26C
026B:  GOTO   26F
....................    address = lcd_line_two; 
026C:  MOVLW  40
026D:  MOVWF  47
.................... else 
026E:  GOTO   270
....................    address=0; 
026F:  CLRF   47
....................  
.................... address += x-1; 
0270:  MOVLW  01
0271:  SUBWF  45,W
0272:  ADDWF  47,F
.................... lcd_send_byte(0, 0x80 | address); 
0273:  MOVF   47,W
0274:  IORLW  80
0275:  MOVWF  48
0276:  CLRF   49
0277:  MOVF   48,W
0278:  MOVWF  4A
0279:  CALL   08D
.................... } 
027A:  RETURN
....................  
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
027B:  MOVF   44,W
027C:  XORLW  0C
027D:  BTFSC  03.2
027E:  GOTO   286
027F:  XORLW  06
0280:  BTFSC  03.2
0281:  GOTO   28E
0282:  XORLW  02
0283:  BTFSC  03.2
0284:  GOTO   294
0285:  GOTO   299
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0286:  CLRF   49
0287:  MOVLW  01
0288:  MOVWF  4A
0289:  CALL   08D
....................       delay_ms(2); 
028A:  MOVLW  02
028B:  MOVWF  45
028C:  CALL   04F
....................       break; 
028D:  GOTO   29F
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
028E:  MOVLW  01
028F:  MOVWF  45
0290:  MOVLW  02
0291:  MOVWF  46
0292:  CALL   269
....................        break; 
0293:  GOTO   29F
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0294:  CLRF   49
0295:  MOVLW  10
0296:  MOVWF  4A
0297:  CALL   08D
....................        break; 
0298:  GOTO   29F
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
0299:  MOVLW  01
029A:  MOVWF  49
029B:  MOVF   44,W
029C:  MOVWF  4A
029D:  CALL   08D
....................        break; 
029E:  GOTO   29F
....................    } 
.................... } 
029F:  RETURN
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
....................  
.................... //3x4 tuþ takýmý 
.................... #define sat1   pin_c0  
.................... #define sat2   pin_c1  
.................... #define sat3   pin_c2 
....................  
.................... #define sat4   pin_c3  
.................... #define sut1   pin_c4 
.................... #define sut2   pin_c5  
.................... #define sut3   pin_c6  
....................  
.................... // ýsýtýcý ve soðutucu 
.................... #define isitici   pin_b0  
.................... #define sogutucu  pin_b1 
....................  
.................... //sht11 algýlayýcý             
.................... #define sht_data_pin   PIN_b7//(Data pin veya input) 
.................... #define sht_clk_pin    PIN_b6 
....................  
.................... float temp=0,humid=0,sicaklik=0,nem=0; 
.................... int i=1, negatif=0, flag=0, derece=25, tus=99, pres = 99; 
....................                      
.................... //fonksiyonlar 
.................... int keypad_oku() // Fonksiyon ismi 
.................... {    
.................... output_c(0x00); // D portu çýkýþý sýfýrlanýyor 
*
014D:  MOVLW  00
014E:  MOVWF  36
014F:  BSF    03.5
0150:  CLRF   07
0151:  BCF    03.5
0152:  CLRF   07
....................  
....................    output_high(sat1);  
0153:  BCF    36.0
0154:  MOVF   36,W
0155:  BSF    03.5
0156:  MOVWF  07
0157:  BCF    03.5
0158:  BSF    07.0
....................       if (input(sut1))   
0159:  BSF    36.4
015A:  MOVF   36,W
015B:  BSF    03.5
015C:  MOVWF  07
015D:  BCF    03.5
015E:  BTFSS  07.4
015F:  GOTO   16C
....................          { delay_ms(20); tus=1;output_low(sat1);} 
0160:  MOVLW  14
0161:  MOVWF  45
0162:  CALL   04F
0163:  MOVLW  01
0164:  MOVWF  34
0165:  BCF    36.0
0166:  MOVF   36,W
0167:  BSF    03.5
0168:  MOVWF  07
0169:  BCF    03.5
016A:  BCF    07.0
....................       else if (input(sut2))    
016B:  GOTO   198
016C:  BSF    36.5
016D:  MOVF   36,W
016E:  BSF    03.5
016F:  MOVWF  07
0170:  BCF    03.5
0171:  BTFSS  07.5
0172:  GOTO   17F
....................          { delay_ms(20); tus=2;output_low(sat1);} 
0173:  MOVLW  14
0174:  MOVWF  45
0175:  CALL   04F
0176:  MOVLW  02
0177:  MOVWF  34
0178:  BCF    36.0
0179:  MOVF   36,W
017A:  BSF    03.5
017B:  MOVWF  07
017C:  BCF    03.5
017D:  BCF    07.0
....................       else if (input(sut3)) 
017E:  GOTO   198
017F:  BSF    36.6
0180:  MOVF   36,W
0181:  BSF    03.5
0182:  MOVWF  07
0183:  BCF    03.5
0184:  BTFSS  07.6
0185:  GOTO   192
....................          { delay_ms(20); tus=3;output_low(sat1);} 
0186:  MOVLW  14
0187:  MOVWF  45
0188:  CALL   04F
0189:  MOVLW  03
018A:  MOVWF  34
018B:  BCF    36.0
018C:  MOVF   36,W
018D:  BSF    03.5
018E:  MOVWF  07
018F:  BCF    03.5
0190:  BCF    07.0
....................       else 
0191:  GOTO   198
....................         output_low(sat1); 
0192:  BCF    36.0
0193:  MOVF   36,W
0194:  BSF    03.5
0195:  MOVWF  07
0196:  BCF    03.5
0197:  BCF    07.0
....................     
....................    output_high(sat2); 
0198:  BCF    36.1
0199:  MOVF   36,W
019A:  BSF    03.5
019B:  MOVWF  07
019C:  BCF    03.5
019D:  BSF    07.1
....................       if (input(sut1))   
019E:  BSF    36.4
019F:  MOVF   36,W
01A0:  BSF    03.5
01A1:  MOVWF  07
01A2:  BCF    03.5
01A3:  BTFSS  07.4
01A4:  GOTO   1B1
....................          { delay_ms(20); tus=4;output_low(sat2);} 
01A5:  MOVLW  14
01A6:  MOVWF  45
01A7:  CALL   04F
01A8:  MOVLW  04
01A9:  MOVWF  34
01AA:  BCF    36.1
01AB:  MOVF   36,W
01AC:  BSF    03.5
01AD:  MOVWF  07
01AE:  BCF    03.5
01AF:  BCF    07.1
....................       else if (input(sut2))  
01B0:  GOTO   1DD
01B1:  BSF    36.5
01B2:  MOVF   36,W
01B3:  BSF    03.5
01B4:  MOVWF  07
01B5:  BCF    03.5
01B6:  BTFSS  07.5
01B7:  GOTO   1C4
....................          { delay_ms(20); tus=5;output_low(sat2);} 
01B8:  MOVLW  14
01B9:  MOVWF  45
01BA:  CALL   04F
01BB:  MOVLW  05
01BC:  MOVWF  34
01BD:  BCF    36.1
01BE:  MOVF   36,W
01BF:  BSF    03.5
01C0:  MOVWF  07
01C1:  BCF    03.5
01C2:  BCF    07.1
....................       else if (input(sut3))   
01C3:  GOTO   1DD
01C4:  BSF    36.6
01C5:  MOVF   36,W
01C6:  BSF    03.5
01C7:  MOVWF  07
01C8:  BCF    03.5
01C9:  BTFSS  07.6
01CA:  GOTO   1D7
....................          { delay_ms(20); tus=6;output_low(sat2);} 
01CB:  MOVLW  14
01CC:  MOVWF  45
01CD:  CALL   04F
01CE:  MOVLW  06
01CF:  MOVWF  34
01D0:  BCF    36.1
01D1:  MOVF   36,W
01D2:  BSF    03.5
01D3:  MOVWF  07
01D4:  BCF    03.5
01D5:  BCF    07.1
....................       else 
01D6:  GOTO   1DD
....................         output_low(sat2);  
01D7:  BCF    36.1
01D8:  MOVF   36,W
01D9:  BSF    03.5
01DA:  MOVWF  07
01DB:  BCF    03.5
01DC:  BCF    07.1
....................  
....................     output_high(sat3);  
01DD:  BCF    36.2
01DE:  MOVF   36,W
01DF:  BSF    03.5
01E0:  MOVWF  07
01E1:  BCF    03.5
01E2:  BSF    07.2
....................       if (input(sut1))    
01E3:  BSF    36.4
01E4:  MOVF   36,W
01E5:  BSF    03.5
01E6:  MOVWF  07
01E7:  BCF    03.5
01E8:  BTFSS  07.4
01E9:  GOTO   1F6
....................          { delay_ms(20); tus=7;output_low(sat3);} 
01EA:  MOVLW  14
01EB:  MOVWF  45
01EC:  CALL   04F
01ED:  MOVLW  07
01EE:  MOVWF  34
01EF:  BCF    36.2
01F0:  MOVF   36,W
01F1:  BSF    03.5
01F2:  MOVWF  07
01F3:  BCF    03.5
01F4:  BCF    07.2
....................       else if (input(sut2))  
01F5:  GOTO   222
01F6:  BSF    36.5
01F7:  MOVF   36,W
01F8:  BSF    03.5
01F9:  MOVWF  07
01FA:  BCF    03.5
01FB:  BTFSS  07.5
01FC:  GOTO   209
....................          { delay_ms(20); tus=8;output_low(sat3);} 
01FD:  MOVLW  14
01FE:  MOVWF  45
01FF:  CALL   04F
0200:  MOVLW  08
0201:  MOVWF  34
0202:  BCF    36.2
0203:  MOVF   36,W
0204:  BSF    03.5
0205:  MOVWF  07
0206:  BCF    03.5
0207:  BCF    07.2
....................       else if (input(sut3))   
0208:  GOTO   222
0209:  BSF    36.6
020A:  MOVF   36,W
020B:  BSF    03.5
020C:  MOVWF  07
020D:  BCF    03.5
020E:  BTFSS  07.6
020F:  GOTO   21C
....................          { delay_ms(20); tus=9;output_low(sat3);} 
0210:  MOVLW  14
0211:  MOVWF  45
0212:  CALL   04F
0213:  MOVLW  09
0214:  MOVWF  34
0215:  BCF    36.2
0216:  MOVF   36,W
0217:  BSF    03.5
0218:  MOVWF  07
0219:  BCF    03.5
021A:  BCF    07.2
....................       else 
021B:  GOTO   222
....................         output_low(sat3);  
021C:  BCF    36.2
021D:  MOVF   36,W
021E:  BSF    03.5
021F:  MOVWF  07
0220:  BCF    03.5
0221:  BCF    07.2
....................     
....................   output_high(sat4); 
0222:  BCF    36.3
0223:  MOVF   36,W
0224:  BSF    03.5
0225:  MOVWF  07
0226:  BCF    03.5
0227:  BSF    07.3
....................       if (input(sut1))   
0228:  BSF    36.4
0229:  MOVF   36,W
022A:  BSF    03.5
022B:  MOVWF  07
022C:  BCF    03.5
022D:  BTFSS  07.4
022E:  GOTO   23B
....................          { delay_ms(20); tus=10;output_low(sat4);} 
022F:  MOVLW  14
0230:  MOVWF  45
0231:  CALL   04F
0232:  MOVLW  0A
0233:  MOVWF  34
0234:  BCF    36.3
0235:  MOVF   36,W
0236:  BSF    03.5
0237:  MOVWF  07
0238:  BCF    03.5
0239:  BCF    07.3
....................       else if (input(sut2))    
023A:  GOTO   266
023B:  BSF    36.5
023C:  MOVF   36,W
023D:  BSF    03.5
023E:  MOVWF  07
023F:  BCF    03.5
0240:  BTFSS  07.5
0241:  GOTO   24D
....................          { delay_ms(20); tus=0;output_low(sat4);} 
0242:  MOVLW  14
0243:  MOVWF  45
0244:  CALL   04F
0245:  CLRF   34
0246:  BCF    36.3
0247:  MOVF   36,W
0248:  BSF    03.5
0249:  MOVWF  07
024A:  BCF    03.5
024B:  BCF    07.3
....................       else if (input(sut3))  
024C:  GOTO   266
024D:  BSF    36.6
024E:  MOVF   36,W
024F:  BSF    03.5
0250:  MOVWF  07
0251:  BCF    03.5
0252:  BTFSS  07.6
0253:  GOTO   260
....................          { delay_ms(20); tus=19;output_low(sat4);} 
0254:  MOVLW  14
0255:  MOVWF  45
0256:  CALL   04F
0257:  MOVLW  13
0258:  MOVWF  34
0259:  BCF    36.3
025A:  MOVF   36,W
025B:  BSF    03.5
025C:  MOVWF  07
025D:  BCF    03.5
025E:  BCF    07.3
....................       else 
025F:  GOTO   266
....................         output_low(sat4); 
0260:  BCF    36.3
0261:  MOVF   36,W
0262:  BSF    03.5
0263:  MOVWF  07
0264:  BCF    03.5
0265:  BCF    07.3
....................  
....................    return tus;  
0266:  MOVF   34,W
0267:  MOVWF  78
.................... } 
0268:  RETURN
....................  
.................... void allkeypadlow() 
.................... { 
....................    output_low(sat1); 
*
0120:  BCF    36.0
0121:  MOVF   36,W
0122:  BSF    03.5
0123:  MOVWF  07
0124:  BCF    03.5
0125:  BCF    07.0
....................    output_low(sat2); 
0126:  BCF    36.1
0127:  MOVF   36,W
0128:  BSF    03.5
0129:  MOVWF  07
012A:  BCF    03.5
012B:  BCF    07.1
....................    output_low(sat3); 
012C:  BCF    36.2
012D:  MOVF   36,W
012E:  BSF    03.5
012F:  MOVWF  07
0130:  BCF    03.5
0131:  BCF    07.2
....................    output_low(sat4); 
0132:  BCF    36.3
0133:  MOVF   36,W
0134:  BSF    03.5
0135:  MOVWF  07
0136:  BCF    03.5
0137:  BCF    07.3
....................    output_low(sut1); 
0138:  BCF    36.4
0139:  MOVF   36,W
013A:  BSF    03.5
013B:  MOVWF  07
013C:  BCF    03.5
013D:  BCF    07.4
....................    output_low(sut2); 
013E:  BCF    36.5
013F:  MOVF   36,W
0140:  BSF    03.5
0141:  MOVWF  07
0142:  BCF    03.5
0143:  BCF    07.5
....................    output_low(sut3); 
0144:  BCF    36.6
0145:  MOVF   36,W
0146:  BSF    03.5
0147:  MOVWF  07
0148:  BCF    03.5
0149:  BCF    07.6
....................    tus=99; 
014A:  MOVLW  63
014B:  MOVWF  34
.................... } 
014C:  RETURN
....................  
....................  
.................... // ana program 
.................... void main() 
.................... { 
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  CLRF   23
0805:  CLRF   22
0806:  CLRF   21
0807:  CLRF   20
0808:  CLRF   27
0809:  CLRF   26
080A:  CLRF   25
080B:  CLRF   24
080C:  CLRF   2B
080D:  CLRF   2A
080E:  CLRF   29
080F:  CLRF   28
0810:  CLRF   2F
0811:  CLRF   2E
0812:  CLRF   2D
0813:  CLRF   2C
0814:  MOVLW  01
0815:  MOVWF  30
0816:  CLRF   31
0817:  CLRF   32
0818:  MOVLW  19
0819:  MOVWF  33
081A:  MOVLW  63
081B:  MOVWF  34
081C:  MOVWF  35
081D:  BSF    03.5
081E:  BSF    1F.0
081F:  BSF    1F.1
0820:  BSF    1F.2
0821:  BCF    1F.3
0822:  MOVLW  07
0823:  MOVWF  1C
....................    setup_adc_ports(NO_ANALOGS); 
*
0827:  BSF    03.5
0828:  BSF    1F.0
0829:  BSF    1F.1
082A:  BSF    1F.2
082B:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
082C:  BCF    1F.6
082D:  BCF    03.5
082E:  BCF    1F.6
082F:  BCF    1F.7
0830:  BSF    03.5
0831:  BCF    1F.7
0832:  BCF    03.5
0833:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0834:  BSF    03.5
0835:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
0836:  BCF    03.5
0837:  BCF    14.5
0838:  BCF    36.5
0839:  MOVF   36,W
083A:  BSF    03.5
083B:  MOVWF  07
083C:  BCF    03.5
083D:  BSF    36.4
083E:  MOVF   36,W
083F:  BSF    03.5
0840:  MOVWF  07
0841:  BCF    03.5
0842:  BCF    36.3
0843:  MOVF   36,W
0844:  BSF    03.5
0845:  MOVWF  07
0846:  MOVLW  01
0847:  BCF    03.5
0848:  MOVWF  14
0849:  MOVLW  00
084A:  BSF    03.5
084B:  MOVWF  14
....................     
....................    setup_timer_1(T1_DISABLED); 
084C:  BCF    03.5
084D:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
084E:  MOVWF  78
084F:  MOVWF  12
0850:  MOVLW  00
0851:  BSF    03.5
0852:  MOVWF  12
....................    setup_ccp1(CCP_OFF); 
0853:  BCF    03.5
0854:  BSF    36.2
0855:  MOVF   36,W
0856:  BSF    03.5
0857:  MOVWF  07
0858:  BCF    03.5
0859:  CLRF   17
....................     
....................    lcd_init(); 
085A:  BCF    0A.3
085B:  CALL   0B4
085C:  BSF    0A.3
....................    delay_ms(100); 
085D:  MOVLW  64
085E:  MOVWF  45
085F:  BCF    0A.3
0860:  CALL   04F
0861:  BSF    0A.3
....................    sht_init(); 
0862:  BCF    0A.3
0863:  GOTO   102
0864:  BSF    0A.3
....................    delay_ms(100); 
0865:  MOVLW  64
0866:  MOVWF  45
0867:  BCF    0A.3
0868:  CALL   04F
0869:  BSF    0A.3
....................   
....................   
....................    set_tris_a(0x00);   // A portu komple çýkýþ 
086A:  MOVLW  00
086B:  BSF    03.5
086C:  MOVWF  05
....................    set_tris_b(0x00); 
086D:  MOVWF  06
....................    set_tris_c(0x0f);    
086E:  MOVLW  0F
086F:  MOVWF  07
0870:  BCF    03.5
0871:  MOVWF  36
....................    set_tris_d(0x00);    
0872:  MOVLW  00
0873:  BSF    03.5
0874:  MOVWF  08
....................  
....................    lcd_init();   // LCD hazýrlanýyor 
0875:  BCF    0A.3
0876:  BCF    03.5
0877:  CALL   0B4
0878:  BSF    0A.3
....................  
....................    while(1) 
....................    {       
....................       allkeypadlow(); 
0879:  BCF    0A.3
087A:  CALL   120
087B:  BSF    0A.3
....................       keypad_oku(); 
087C:  BCF    0A.3
087D:  CALL   14D
087E:  BSF    0A.3
....................       pres = tus; 
087F:  MOVF   34,W
0880:  MOVWF  35
....................       allkeypadlow(); 
0881:  BCF    0A.3
0882:  CALL   120
0883:  BSF    0A.3
....................        
....................       if(pres == 10) 
0884:  MOVF   35,W
0885:  SUBLW  0A
0886:  BTFSS  03.2
0887:  GOTO   08F
....................       { 
....................           flag = 1; 
0888:  MOVLW  01
0889:  MOVWF  32
....................           printf(lcd_putc,"\f");  
088A:  MOVLW  0C
088B:  MOVWF  44
088C:  BCF    0A.3
088D:  CALL   27B
088E:  BSF    0A.3
....................       }    
....................       while(flag==1) 
....................       {   
088F:  DECFSZ 32,W
0890:  GOTO   13D
....................         lcd_gotoxy(1,1);      
0891:  MOVLW  01
0892:  MOVWF  45
0893:  MOVWF  46
0894:  BCF    0A.3
0895:  CALL   269
0896:  BSF    0A.3
....................         printf(lcd_putc,"SIC gir"); 
0897:  MOVLW  0C
0898:  BSF    03.6
0899:  MOVWF  0D
089A:  MOVLW  00
089B:  MOVWF  0F
089C:  BCF    0A.3
089D:  BCF    03.6
089E:  GOTO   2A0
089F:  BSF    0A.3
....................         keypad_oku(); 
08A0:  BCF    0A.3
08A1:  CALL   14D
08A2:  BSF    0A.3
....................         pres = tus; 
08A3:  MOVF   34,W
08A4:  MOVWF  35
....................         if(pres == 10 && i == 1) 
08A5:  MOVF   35,W
08A6:  SUBLW  0A
08A7:  BTFSS  03.2
08A8:  GOTO   0AD
08A9:  DECFSZ 30,W
08AA:  GOTO   0AD
....................           pres = 99; 
08AB:  MOVLW  63
08AC:  MOVWF  35
....................         allkeypadlow();   
08AD:  BCF    0A.3
08AE:  CALL   120
08AF:  BSF    0A.3
....................         if( pres >= 0 && pres <= 9) 
08B0:  MOVF   35,W
08B1:  SUBLW  09
08B2:  BTFSS  03.0
08B3:  GOTO   0DB
....................         { 
....................           lcd_gotoxy(i,2); 
08B4:  MOVF   30,W
08B5:  MOVWF  45
08B6:  MOVLW  02
08B7:  MOVWF  46
08B8:  BCF    0A.3
08B9:  CALL   269
08BA:  BSF    0A.3
....................           if(i==1) 
08BB:  DECFSZ 30,W
08BC:  GOTO   0BE
....................             derece = 0; 
08BD:  CLRF   33
....................           printf(lcd_putc,"%d",pres); 
08BE:  MOVF   35,W
08BF:  MOVWF  37
08C0:  MOVLW  1F
08C1:  MOVWF  38
08C2:  BCF    0A.3
08C3:  CALL   2FD
08C4:  BSF    0A.3
....................           delay_ms(1000); 
08C5:  MOVLW  04
08C6:  MOVWF  37
08C7:  MOVLW  FA
08C8:  MOVWF  45
08C9:  BCF    0A.3
08CA:  CALL   04F
08CB:  BSF    0A.3
08CC:  DECFSZ 37,F
08CD:  GOTO   0C7
....................           derece = (derece*10) + pres; 
08CE:  MOVF   33,W
08CF:  MOVWF  37
08D0:  MOVLW  0A
08D1:  MOVWF  38
08D2:  BCF    0A.3
08D3:  GOTO   362
08D4:  BSF    0A.3
08D5:  MOVF   35,W
08D6:  ADDWF  78,W
08D7:  MOVWF  33
....................           i += 1;     
08D8:  MOVLW  01
08D9:  ADDWF  30,F
....................          } 
....................          else if(pres == 19) 
08DA:  GOTO   13C
08DB:  MOVF   35,W
08DC:  SUBLW  13
08DD:  BTFSS  03.2
08DE:  GOTO   109
....................          { 
....................           printf(lcd_putc,"\f%d derece \nayarlandý.",derece); 
08DF:  MOVLW  0C
08E0:  MOVWF  44
08E1:  BCF    0A.3
08E2:  CALL   27B
08E3:  BSF    0A.3
08E4:  MOVF   33,W
08E5:  MOVWF  37
08E6:  MOVLW  1F
08E7:  MOVWF  38
08E8:  BCF    0A.3
08E9:  CALL   2FD
08EA:  BSF    0A.3
08EB:  MOVLW  13
08EC:  BSF    03.6
08ED:  MOVWF  0D
08EE:  MOVLW  00
08EF:  MOVWF  0F
08F0:  MOVLW  13
08F1:  BCF    03.6
08F2:  MOVWF  37
08F3:  BCF    0A.3
08F4:  CALL   389
08F5:  BSF    0A.3
....................           flag = 0; 
08F6:  CLRF   32
....................           negatif = 0; 
08F7:  CLRF   31
....................           delay_ms(1000); 
08F8:  MOVLW  04
08F9:  MOVWF  37
08FA:  MOVLW  FA
08FB:  MOVWF  45
08FC:  BCF    0A.3
08FD:  CALL   04F
08FE:  BSF    0A.3
08FF:  DECFSZ 37,F
0900:  GOTO   0FA
....................           i=1; 
0901:  MOVLW  01
0902:  MOVWF  30
....................           printf(lcd_putc,"\f"); 
0903:  MOVLW  0C
0904:  MOVWF  44
0905:  BCF    0A.3
0906:  CALL   27B
0907:  BSF    0A.3
....................          } 
....................          else if(pres == 10) 
0908:  GOTO   13C
0909:  MOVF   35,W
090A:  SUBLW  0A
090B:  BTFSS  03.2
090C:  GOTO   13C
....................          { 
....................             printf(lcd_putc,"\f-%d derece \nayarlandý.",derece); 
090D:  MOVLW  0C
090E:  MOVWF  44
090F:  BCF    0A.3
0910:  CALL   27B
0911:  BSF    0A.3
0912:  MOVLW  2D
0913:  MOVWF  44
0914:  BCF    0A.3
0915:  CALL   27B
0916:  BSF    0A.3
0917:  MOVF   33,W
0918:  MOVWF  37
0919:  MOVLW  1F
091A:  MOVWF  38
091B:  BCF    0A.3
091C:  CALL   2FD
091D:  BSF    0A.3
091E:  MOVLW  2B
091F:  BSF    03.6
0920:  MOVWF  0D
0921:  MOVLW  00
0922:  MOVWF  0F
0923:  MOVLW  13
0924:  BCF    03.6
0925:  MOVWF  37
0926:  BCF    0A.3
0927:  CALL   389
0928:  BSF    0A.3
....................             flag = 0; 
0929:  CLRF   32
....................             delay_ms(1000); 
092A:  MOVLW  04
092B:  MOVWF  37
092C:  MOVLW  FA
092D:  MOVWF  45
092E:  BCF    0A.3
092F:  CALL   04F
0930:  BSF    0A.3
0931:  DECFSZ 37,F
0932:  GOTO   12C
....................             negatif = 1; 
0933:  MOVLW  01
0934:  MOVWF  31
....................             i=1; 
0935:  MOVWF  30
....................             printf(lcd_putc,"\f"); 
0936:  MOVLW  0C
0937:  MOVWF  44
0938:  BCF    0A.3
0939:  CALL   27B
093A:  BSF    0A.3
....................          } 
....................          else{;} 
093B:  GOTO   13C
....................  
....................       } 
093C:  GOTO   08F
....................  
....................       sht_rd (temp, humid); 
....................       sicaklik=(float)temp; 
*
0AD0:  MOVF   23,W
0AD1:  MOVWF  2B
0AD2:  MOVF   22,W
0AD3:  MOVWF  2A
0AD4:  MOVF   21,W
0AD5:  MOVWF  29
0AD6:  MOVF   20,W
0AD7:  MOVWF  28
....................       nem=(float)humid; 
0AD8:  MOVF   27,W
0AD9:  MOVWF  2F
0ADA:  MOVF   26,W
0ADB:  MOVWF  2E
0ADC:  MOVF   25,W
0ADD:  MOVWF  2D
0ADE:  MOVF   24,W
0ADF:  MOVWF  2C
....................       lcd_gotoxy(1,1); 
0AE0:  MOVLW  01
0AE1:  MOVWF  45
0AE2:  MOVWF  46
0AE3:  BCF    0A.3
0AE4:  CALL   269
0AE5:  BSF    0A.3
....................       printf(lcd_putc,"SICAKLIK %2.2f C",sicaklik); 
0AE6:  MOVLW  3F
0AE7:  BSF    03.6
0AE8:  MOVWF  0D
0AE9:  MOVLW  00
0AEA:  MOVWF  0F
0AEB:  BCF    03.0
0AEC:  MOVLW  09
0AED:  BCF    03.6
0AEE:  MOVWF  37
0AEF:  BCF    0A.3
0AF0:  CALL   62F
0AF1:  BSF    0A.3
0AF2:  MOVLW  89
0AF3:  MOVWF  04
0AF4:  MOVF   2B,W
0AF5:  MOVWF  3A
0AF6:  MOVF   2A,W
0AF7:  MOVWF  39
0AF8:  MOVF   29,W
0AF9:  MOVWF  38
0AFA:  MOVF   28,W
0AFB:  MOVWF  37
0AFC:  MOVLW  02
0AFD:  MOVWF  3B
0AFE:  BCF    0A.3
0AFF:  CALL   6C0
0B00:  BSF    0A.3
0B01:  MOVLW  20
0B02:  MOVWF  44
0B03:  BCF    0A.3
0B04:  CALL   27B
0B05:  BSF    0A.3
0B06:  MOVLW  43
0B07:  MOVWF  44
0B08:  BCF    0A.3
0B09:  CALL   27B
0B0A:  BSF    0A.3
....................       lcd_gotoxy(1,2); 
0B0B:  MOVLW  01
0B0C:  MOVWF  45
0B0D:  MOVLW  02
0B0E:  MOVWF  46
0B0F:  BCF    0A.3
0B10:  CALL   269
0B11:  BSF    0A.3
....................       printf(lcd_putc,"NEM %2.2f RH",nem); 
0B12:  MOVLW  48
0B13:  BSF    03.6
0B14:  MOVWF  0D
0B15:  MOVLW  00
0B16:  MOVWF  0F
0B17:  BCF    03.0
0B18:  MOVLW  04
0B19:  BCF    03.6
0B1A:  MOVWF  37
0B1B:  BCF    0A.3
0B1C:  CALL   62F
0B1D:  BSF    0A.3
0B1E:  MOVLW  89
0B1F:  MOVWF  04
0B20:  MOVF   2F,W
0B21:  MOVWF  3A
0B22:  MOVF   2E,W
0B23:  MOVWF  39
0B24:  MOVF   2D,W
0B25:  MOVWF  38
0B26:  MOVF   2C,W
0B27:  MOVWF  37
0B28:  MOVLW  02
0B29:  MOVWF  3B
0B2A:  BCF    0A.3
0B2B:  CALL   6C0
0B2C:  BSF    0A.3
0B2D:  MOVLW  20
0B2E:  MOVWF  44
0B2F:  BCF    0A.3
0B30:  CALL   27B
0B31:  BSF    0A.3
0B32:  MOVLW  52
0B33:  MOVWF  44
0B34:  BCF    0A.3
0B35:  CALL   27B
0B36:  BSF    0A.3
0B37:  MOVLW  48
0B38:  MOVWF  44
0B39:  BCF    0A.3
0B3A:  CALL   27B
0B3B:  BSF    0A.3
....................        
....................        
....................        
....................       if(negatif == 1 && derece != 0) 
0B3C:  DECFSZ 31,W
0B3D:  GOTO   34A
0B3E:  MOVF   33,F
0B3F:  BTFSC  03.2
0B40:  GOTO   34A
....................       { 
....................        output_low(isitici); 
0B41:  BSF    03.5
0B42:  BCF    06.0
0B43:  BCF    03.5
0B44:  BCF    06.0
....................        output_high(sogutucu); 
0B45:  BSF    03.5
0B46:  BCF    06.1
0B47:  BCF    03.5
0B48:  BSF    06.1
....................       } 
....................       else if(derece >= sicaklik-2 && derece <= sicaklik+2) 
0B49:  GOTO   406
0B4A:  BSF    03.1
0B4B:  MOVF   2B,W
0B4C:  MOVWF  66
0B4D:  MOVF   2A,W
0B4E:  MOVWF  65
0B4F:  MOVF   29,W
0B50:  MOVWF  64
0B51:  MOVF   28,W
0B52:  MOVWF  63
0B53:  CLRF   6A
0B54:  CLRF   69
0B55:  CLRF   68
0B56:  MOVLW  80
0B57:  MOVWF  67
0B58:  BCF    0A.3
0B59:  CALL   4EE
0B5A:  BSF    0A.3
0B5B:  MOVF   77,W
0B5C:  MOVWF  37
0B5D:  MOVF   78,W
0B5E:  MOVWF  38
0B5F:  MOVF   79,W
0B60:  MOVWF  39
0B61:  MOVF   7A,W
0B62:  MOVWF  3A
0B63:  CLRF   60
0B64:  MOVF   33,W
0B65:  MOVWF  5F
0B66:  BCF    0A.3
0B67:  CALL   45C
0B68:  BSF    0A.3
0B69:  MOVF   3A,W
0B6A:  MOVWF  42
0B6B:  MOVF   39,W
0B6C:  MOVWF  41
0B6D:  MOVF   38,W
0B6E:  MOVWF  40
0B6F:  MOVF   37,W
0B70:  MOVWF  3F
0B71:  MOVF   7A,W
0B72:  MOVWF  46
0B73:  MOVF   79,W
0B74:  MOVWF  45
0B75:  MOVF   78,W
0B76:  MOVWF  44
0B77:  MOVF   77,W
0B78:  MOVWF  43
0B79:  BCF    0A.3
0B7A:  CALL   7A7
0B7B:  BSF    0A.3
0B7C:  BTFSC  03.0
0B7D:  GOTO   380
0B7E:  BTFSS  03.2
0B7F:  GOTO   3BF
0B80:  BCF    03.1
0B81:  MOVF   2B,W
0B82:  MOVWF  66
0B83:  MOVF   2A,W
0B84:  MOVWF  65
0B85:  MOVF   29,W
0B86:  MOVWF  64
0B87:  MOVF   28,W
0B88:  MOVWF  63
0B89:  CLRF   6A
0B8A:  CLRF   69
0B8B:  CLRF   68
0B8C:  MOVLW  80
0B8D:  MOVWF  67
0B8E:  BCF    0A.3
0B8F:  CALL   4EE
0B90:  BSF    0A.3
0B91:  MOVF   77,W
0B92:  MOVWF  3B
0B93:  MOVF   78,W
0B94:  MOVWF  3C
0B95:  MOVF   79,W
0B96:  MOVWF  3D
0B97:  MOVF   7A,W
0B98:  MOVWF  3E
0B99:  CLRF   60
0B9A:  MOVF   33,W
0B9B:  MOVWF  5F
0B9C:  BCF    0A.3
0B9D:  CALL   45C
0B9E:  BSF    0A.3
0B9F:  MOVF   7A,W
0BA0:  MOVWF  42
0BA1:  MOVF   79,W
0BA2:  MOVWF  41
0BA3:  MOVF   78,W
0BA4:  MOVWF  40
0BA5:  MOVF   77,W
0BA6:  MOVWF  3F
0BA7:  MOVF   3E,W
0BA8:  MOVWF  46
0BA9:  MOVF   3D,W
0BAA:  MOVWF  45
0BAB:  MOVF   3C,W
0BAC:  MOVWF  44
0BAD:  MOVF   3B,W
0BAE:  MOVWF  43
0BAF:  BCF    0A.3
0BB0:  CALL   7A7
0BB1:  BSF    0A.3
0BB2:  BTFSC  03.0
0BB3:  GOTO   3B6
0BB4:  BTFSS  03.2
0BB5:  GOTO   3BF
....................       { 
....................        output_low(isitici); 
0BB6:  BSF    03.5
0BB7:  BCF    06.0
0BB8:  BCF    03.5
0BB9:  BCF    06.0
....................        output_low(sogutucu); 
0BBA:  BSF    03.5
0BBB:  BCF    06.1
0BBC:  BCF    03.5
0BBD:  BCF    06.1
....................       }   
....................       else if(derece > sicaklik) 
0BBE:  GOTO   406
0BBF:  CLRF   60
0BC0:  MOVF   33,W
0BC1:  MOVWF  5F
0BC2:  BCF    0A.3
0BC3:  CALL   45C
0BC4:  BSF    0A.3
0BC5:  MOVF   2B,W
0BC6:  MOVWF  42
0BC7:  MOVF   2A,W
0BC8:  MOVWF  41
0BC9:  MOVF   29,W
0BCA:  MOVWF  40
0BCB:  MOVF   28,W
0BCC:  MOVWF  3F
0BCD:  MOVF   7A,W
0BCE:  MOVWF  46
0BCF:  MOVF   79,W
0BD0:  MOVWF  45
0BD1:  MOVF   78,W
0BD2:  MOVWF  44
0BD3:  MOVF   77,W
0BD4:  MOVWF  43
0BD5:  BCF    0A.3
0BD6:  CALL   7A7
0BD7:  BSF    0A.3
0BD8:  BTFSS  03.0
0BD9:  GOTO   3E3
....................       { 
....................        output_high(isitici); 
0BDA:  BSF    03.5
0BDB:  BCF    06.0
0BDC:  BCF    03.5
0BDD:  BSF    06.0
....................        output_low(sogutucu);      
0BDE:  BSF    03.5
0BDF:  BCF    06.1
0BE0:  BCF    03.5
0BE1:  BCF    06.1
....................       } 
....................       else if(derece < sicaklik) 
0BE2:  GOTO   406
0BE3:  CLRF   60
0BE4:  MOVF   33,W
0BE5:  MOVWF  5F
0BE6:  BCF    0A.3
0BE7:  CALL   45C
0BE8:  BSF    0A.3
0BE9:  MOVF   7A,W
0BEA:  MOVWF  42
0BEB:  MOVF   79,W
0BEC:  MOVWF  41
0BED:  MOVF   78,W
0BEE:  MOVWF  40
0BEF:  MOVF   77,W
0BF0:  MOVWF  3F
0BF1:  MOVF   2B,W
0BF2:  MOVWF  46
0BF3:  MOVF   2A,W
0BF4:  MOVWF  45
0BF5:  MOVF   29,W
0BF6:  MOVWF  44
0BF7:  MOVF   28,W
0BF8:  MOVWF  43
0BF9:  BCF    0A.3
0BFA:  CALL   7A7
0BFB:  BSF    0A.3
0BFC:  BTFSS  03.0
0BFD:  GOTO   406
....................       { 
....................        output_low(isitici); 
0BFE:  BSF    03.5
0BFF:  BCF    06.0
0C00:  BCF    03.5
0C01:  BCF    06.0
....................        output_high(sogutucu);   
0C02:  BSF    03.5
0C03:  BCF    06.1
0C04:  BCF    03.5
0C05:  BSF    06.1
....................       } 
....................        
....................    } 
0C06:  GOTO   079
....................  
.................... } 
....................  
....................  
0C07:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
