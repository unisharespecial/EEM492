CCS PCH C Compiler, Version 4.106, 18916               06-Þub-14 20:51

               Filename: C:\Users\Akýn\Desktop\tam-isi-kontrol\tam-isi-nem.lst

               ROM used: 4950 bytes (15%)
                         Largest free fragment is 27818
               RAM used: 34 (2%) at main() level
                         86 (6%) worst case
               Stack:    5 locations

*
0000:  GOTO   0CB0
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES XT                       //Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOOSCSEN                 //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOSTVREN                 //Stack full/underflow will not cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
.................... #use delay(clock=4000000) 
*
0068:  CLRF   FEA
006A:  MOVLW  28
006C:  MOVWF  FE9
006E:  MOVF   FEF,W
0070:  BZ    008E
0072:  MOVLW  01
0074:  MOVWF  01
0076:  CLRF   00
0078:  DECFSZ 00,F
007A:  BRA    0078
007C:  DECFSZ 01,F
007E:  BRA    0076
0080:  MOVLW  4A
0082:  MOVWF  00
0084:  DECFSZ 00,F
0086:  BRA    0084
0088:  BRA    008A
008A:  DECFSZ FEF,F
008C:  BRA    0072
008E:  RETLW  00
....................  
.................... #include "SHT11.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                           // 
.................... // Driver file for SHT75 Temperature & Humidity Sensor                       // 
.................... //                                                                           // 
.................... // ***** To initialise SHT75 sensor upon power up *****                      // 
.................... //                                                                           // 
.................... // Function : sht_init()                                                     // 
.................... // Return   : none                                                           // 
.................... //                                                                           // 
.................... //                                                                           // 
.................... // ***** To measure and caluculate SHT75 temp & real RH *****                // 
.................... //                                                                           // 
.................... // Function : sht_rd (temp, truehumid)                                       // 
.................... // Return   : temperature & true humidity in float values                    // 
.................... //                                                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................   
.................... #define sht_data_pin   PIN_B7 
.................... #define sht_clk_pin    PIN_B6 
....................  
.................... //***** Function to alert SHT75 ***** 
....................   
.................... void comstart (void) 
.................... { 
....................  output_float(sht_data_pin);  //data high 
*
0158:  BSF    F93.7
....................  output_low(sht_clk_pin);  //clk low 
015A:  BCF    F93.6
015C:  BCF    F8A.6
....................  delay_us(1); 
015E:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
0160:  BCF    F93.6
0162:  BSF    F8A.6
....................  delay_us(1); 
0164:  NOP   
....................  output_low(sht_data_pin); //data low 
0166:  BCF    F93.7
0168:  BCF    F8A.7
....................  delay_us(1); 
016A:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
016C:  BCF    F93.6
016E:  BCF    F8A.6
....................  delay_us(2); 
0170:  BRA    0172
....................  output_high(sht_clk_pin);  //clk high 
0172:  BCF    F93.6
0174:  BSF    F8A.6
....................  delay_us(1); 
0176:  NOP   
....................  output_float(sht_data_pin);  //data high 
0178:  BSF    F93.7
....................  delay_us(1); 
017A:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
017C:  BCF    F93.6
017E:  BCF    F8A.6
.................... } 
0180:  RETLW  00
....................   
.................... //***** Function to write data to SHT75 ***** 
....................   
.................... int1 comwrite (int8 iobyte) 
.................... { 
*
04D0:  MOVLW  80
04D2:  MOVWF  2F
....................  int8 i, mask = 0x80; 
....................  int1 ack; 
....................   
....................  //Shift out command 
....................  delay_us(4); 
04D4:  BRA    04D6
04D6:  BRA    04D8
....................  for(i=0; i<8; i++) 
04D8:  CLRF   2E
04DA:  MOVF   2E,W
04DC:  SUBLW  07
04DE:  BNC   0502
....................   { 
....................    output_low(sht_clk_pin);                          //clk low 
04E0:  BCF    F93.6
04E2:  BCF    F8A.6
....................    if((iobyte & mask) > 0) output_float(sht_data_pin);  //data high if MSB high 
04E4:  MOVF   2D,W
04E6:  ANDWF  2F,W
04E8:  BZ    04EE
04EA:  BSF    F93.7
....................    else output_low(sht_data_pin);                    //data low if MSB low 
04EC:  BRA    04F2
04EE:  BCF    F93.7
04F0:  BCF    F8A.7
....................    delay_us(1); 
04F2:  NOP   
....................    output_high(sht_clk_pin);                          //clk high 
04F4:  BCF    F93.6
04F6:  BSF    F8A.6
....................    delay_us(1); 
04F8:  NOP   
....................    mask = mask >> 1;                                    //shift to next bit 
04FA:  BCF    FD8.0
04FC:  RRCF   2F,F
....................   } 
04FE:  INCF   2E,F
0500:  BRA    04DA
....................   
....................  //Shift in ack 
....................  output_low(sht_clk_pin);  //clk low 
0502:  BCF    F93.6
0504:  BCF    F8A.6
....................  delay_us(1); 
0506:  NOP   
....................  ack = input(sht_data_pin);   //get ack bit 
0508:  BSF    F93.7
050A:  BCF    30.0
050C:  BTFSC  F81.7
050E:  BSF    30.0
....................  output_high(sht_clk_pin);  //clk high 
0510:  BCF    F93.6
0512:  BSF    F8A.6
....................  delay_us(1); 
0514:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
0516:  BCF    F93.6
0518:  BCF    F8A.6
....................  return(ack); 
051A:  MOVLW  00
051C:  BTFSC  30.0
051E:  MOVLW  01
0520:  MOVWF  01
.................... } 
0522:  RETLW  00
....................   
.................... //***** Function to read data from SHT75 ***** 
....................   
.................... int16 comread (void) 
.................... { 
*
0558:  CLRF   2F
055A:  CLRF   2E
....................  int8 i; 
....................  int16 iobyte = 0; 
....................  const int16 mask0 = 0x0000; 
....................  const int16 mask1 = 0x0001; 
....................   
....................  //shift in MSB data 
....................  for(i=0; i<8; i++) 
055C:  CLRF   2D
055E:  MOVF   2D,W
0560:  SUBLW  07
0562:  BNC   0584
....................   { 
....................    iobyte = iobyte << 1; 
0564:  BCF    FD8.0
0566:  RLCF   2E,F
0568:  RLCF   2F,F
....................    output_high(sht_clk_pin);                //clk high 
056A:  BCF    F93.6
056C:  BSF    F8A.6
....................    delay_us(1); 
056E:  NOP   
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
0570:  BSF    F93.7
0572:  BTFSS  F81.7
0574:  BRA    057A
0576:  BSF    2E.0
....................    else iobyte |= mask0; 
0578:  BRA    057A
....................    output_low(sht_clk_pin);                //clk low 
057A:  BCF    F93.6
057C:  BCF    F8A.6
....................    delay_us(1); 
057E:  NOP   
....................   } 
0580:  INCF   2D,F
0582:  BRA    055E
....................   
....................  //send ack 0 bit 
....................  output_low(sht_data_pin); //data low 
0584:  BCF    F93.7
0586:  BCF    F8A.7
....................  delay_us(1); 
0588:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
058A:  BCF    F93.6
058C:  BSF    F8A.6
....................  delay_us(2); 
058E:  BRA    0590
....................  output_low(sht_clk_pin);  //clk low 
0590:  BCF    F93.6
0592:  BCF    F8A.6
....................  delay_us(1); 
0594:  NOP   
....................  output_float(sht_data_pin);  //data high 
0596:  BSF    F93.7
....................   
....................  //shift in LSB data 
....................  for(i=0; i<8; i++) 
0598:  CLRF   2D
059A:  MOVF   2D,W
059C:  SUBLW  07
059E:  BNC   05C0
....................   { 
....................    iobyte = iobyte << 1; 
05A0:  BCF    FD8.0
05A2:  RLCF   2E,F
05A4:  RLCF   2F,F
....................    output_high(sht_clk_pin);                //clk high 
05A6:  BCF    F93.6
05A8:  BSF    F8A.6
....................    delay_us(1); 
05AA:  NOP   
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
05AC:  BSF    F93.7
05AE:  BTFSS  F81.7
05B0:  BRA    05B6
05B2:  BSF    2E.0
....................    else iobyte |= mask0; 
05B4:  BRA    05B6
....................    output_low(sht_clk_pin);                //clk low 
05B6:  BCF    F93.6
05B8:  BCF    F8A.6
....................    delay_us(1); 
05BA:  NOP   
....................   } 
05BC:  INCF   2D,F
05BE:  BRA    059A
....................   
....................  //send ack 1 bit 
....................  output_float(sht_data_pin);  //data high 
05C0:  BSF    F93.7
....................  delay_us(1); 
05C2:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
05C4:  BCF    F93.6
05C6:  BSF    F8A.6
....................  delay_us(2); 
05C8:  BRA    05CA
....................  output_low(sht_clk_pin);  //clk low 
05CA:  BCF    F93.6
05CC:  BCF    F8A.6
....................   
....................  return(iobyte); 
05CE:  MOVFF  2E,01
05D2:  MOVFF  2F,02
.................... } 
05D6:  RETLW  00
....................   
.................... //***** Function to wait for SHT75 reading ***** 
....................   
.................... void comwait (void) 
.................... { 
....................  int16 sht_delay; 
....................   
....................  output_float(sht_data_pin);                     //data high 
*
0524:  BSF    F93.7
....................  output_low(sht_clk_pin);                     //clk low 
0526:  BCF    F93.6
0528:  BCF    F8A.6
....................  delay_us(1); 
052A:  NOP   
....................  for(sht_delay=0; sht_delay<30000; sht_delay++)  // wait for max 300ms 
052C:  CLRF   2E
052E:  CLRF   2D
0530:  MOVF   2E,W
0532:  SUBLW  75
0534:  BNC   0556
0536:  BNZ   053E
0538:  MOVF   2D,W
053A:  SUBLW  2F
053C:  BNC   0556
....................   { 
....................    if (!input(sht_data_pin)) break;              //if sht_data_pin low, SHT75 ready 
053E:  BSF    F93.7
0540:  BTFSC  F81.7
0542:  BRA    0546
0544:  BRA    0556
....................    delay_us(10); 
0546:  MOVLW  03
0548:  MOVWF  00
054A:  DECFSZ 00,F
054C:  BRA    054A
....................   } 
054E:  INCF   2D,F
0550:  BTFSC  FD8.2
0552:  INCF   2E,F
0554:  BRA    0530
.................... } 
0556:  RETLW  00
....................   
.................... //***** Function to reset SHT75 communication ***** 
....................   
.................... void comreset (void) 
.................... { 
....................  int8 i; 
....................   
....................  output_float(sht_data_pin);    //data high 
*
0182:  BSF    F93.7
....................  output_low(sht_clk_pin);    //clk low 
0184:  BCF    F93.6
0186:  BCF    F8A.6
....................  delay_us(2); 
0188:  BRA    018A
....................  for(i=0; i<9; i++) 
018A:  CLRF   1A
018C:  MOVF   1A,W
018E:  SUBLW  08
0190:  BNC   01A2
....................   { 
....................    output_high(sht_clk_pin);  //toggle clk 9 times 
0192:  BCF    F93.6
0194:  BSF    F8A.6
....................    delay_us(2); 
0196:  BRA    0198
....................    output_low(sht_clk_pin); 
0198:  BCF    F93.6
019A:  BCF    F8A.6
....................    delay_us(2); 
019C:  BRA    019E
....................  } 
019E:  INCF   1A,F
01A0:  BRA    018C
....................  comstart(); 
01A2:  RCALL  0158
.................... } 
01A4:  GOTO   01AA (RETURN)
....................   
.................... //***** Function to soft reset SHT75 ***** 
....................   
.................... void sht_soft_reset (void) 
.................... { 
....................  comreset();           //SHT75 communication reset 
....................  comwrite(0x1e);       //send SHT75 reset command 
....................  delay_ms(15);         //pause 15 ms 
.................... } 
....................   
.................... //***** Function to measure SHT75 temperature ***** 
....................   
.................... int16 measuretemp (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();             //alert SHT75 
*
05D8:  RCALL  0158
....................  ack = comwrite(0x03);   //send measure temp command and read ack status 
05DA:  MOVLW  03
05DC:  MOVWF  2D
05DE:  RCALL  04D0
05E0:  BCF    2A.0
05E2:  BTFSC  01.0
05E4:  BSF    2A.0
....................  if(ack == 1) return; 
05E6:  BTFSS  2A.0
05E8:  BRA    05EC
05EA:  BRA    0600
....................  comwait();              //wait for SHT75 measurement to complete 
05EC:  RCALL  0524
....................  iobyte = comread();     //read SHT75 temp data 
05EE:  RCALL  0558
05F0:  MOVFF  02,2C
05F4:  MOVFF  01,2B
....................  return(iobyte); 
05F8:  MOVFF  2B,01
05FC:  MOVFF  2C,02
.................... } 
0600:  GOTO   0E9E (RETURN)
....................   
.................... //***** Function to measure SHT75 RH ***** 
....................   
.................... int16 measurehumid (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();            //alert SHT75 
0604:  RCALL  0158
....................  ack = comwrite(0x05);  //send measure RH command and read ack status 
0606:  MOVLW  05
0608:  MOVWF  2D
060A:  RCALL  04D0
060C:  BCF    2A.0
060E:  BTFSC  01.0
0610:  BSF    2A.0
....................  if(ack == 1) return; 
0612:  BTFSS  2A.0
0614:  BRA    0618
0616:  BRA    062C
....................  comwait();             //wait for SHT75 measurement to complete 
0618:  RCALL  0524
....................  iobyte = comread();    //read SHT75 temp data 
061A:  RCALL  0558
061C:  MOVFF  02,2C
0620:  MOVFF  01,2B
....................  return(iobyte); 
0624:  MOVFF  2B,01
0628:  MOVFF  2C,02
.................... } 
062C:  GOTO   0EAA (RETURN)
....................   
.................... //***** Function to calculate SHT75 temp & RH ***** 
....................   
.................... void calculate_data (int16 temp, int16 humid, float & tc, float & rhlin, float & rhtrue) 
.................... { 
....................  float truehumid1, rh; 
....................   
....................  //calculate temperature reading 
....................  tc = ((float) temp * 0.01) - 40.0; 
*
0EC2:  MOVFF  2B,43
0EC6:  MOVFF  2A,42
0ECA:  CALL   0630
0ECE:  MOVFF  00,36
0ED2:  MOVFF  01,37
0ED6:  MOVFF  02,38
0EDA:  MOVFF  03,39
0EDE:  MOVFF  03,4D
0EE2:  MOVFF  02,4C
0EE6:  MOVFF  01,4B
0EEA:  MOVFF  00,4A
0EEE:  MOVLW  0A
0EF0:  MOVWF  51
0EF2:  MOVLW  D7
0EF4:  MOVWF  50
0EF6:  MOVLW  23
0EF8:  MOVWF  4F
0EFA:  MOVLW  78
0EFC:  MOVWF  4E
0EFE:  CALL   0666
0F02:  MOVFF  00,36
0F06:  MOVFF  01,37
0F0A:  MOVFF  02,38
0F0E:  MOVFF  03,39
0F12:  BSF    FD8.1
0F14:  MOVFF  03,49
0F18:  MOVFF  02,48
0F1C:  MOVFF  01,47
0F20:  MOVFF  00,46
0F24:  CLRF   4D
0F26:  CLRF   4C
0F28:  MOVLW  20
0F2A:  MOVWF  4B
0F2C:  MOVLW  84
0F2E:  MOVWF  4A
0F30:  RCALL  0758
0F32:  MOVFF  03,07
0F36:  MOVFF  02,06
0F3A:  MOVFF  01,05
0F3E:  MOVFF  00,04
....................   
....................   
....................  //calculate Real RH reading 
....................  rh = (float) humid; 
0F42:  MOVFF  2D,43
0F46:  MOVFF  2C,42
0F4A:  CALL   0630
0F4E:  MOVFF  03,35
0F52:  MOVFF  02,34
0F56:  MOVFF  01,33
0F5A:  MOVFF  00,32
....................   
....................  rhlin = (rh * 0.0405) - (rh * rh * 0.0000028) - 4.0; 
0F5E:  MOVFF  35,4D
0F62:  MOVFF  34,4C
0F66:  MOVFF  33,4B
0F6A:  MOVFF  32,4A
0F6E:  MOVLW  54
0F70:  MOVWF  51
0F72:  MOVLW  E3
0F74:  MOVWF  50
0F76:  MOVLW  25
0F78:  MOVWF  4F
0F7A:  MOVLW  7A
0F7C:  MOVWF  4E
0F7E:  CALL   0666
0F82:  MOVFF  00,36
0F86:  MOVFF  01,37
0F8A:  MOVFF  02,38
0F8E:  MOVFF  03,39
0F92:  MOVFF  35,4D
0F96:  MOVFF  34,4C
0F9A:  MOVFF  33,4B
0F9E:  MOVFF  32,4A
0FA2:  MOVFF  35,51
0FA6:  MOVFF  34,50
0FAA:  MOVFF  33,4F
0FAE:  MOVFF  32,4E
0FB2:  CALL   0666
0FB6:  MOVFF  00,3A
0FBA:  MOVFF  01,3B
0FBE:  MOVFF  02,3C
0FC2:  MOVFF  03,3D
0FC6:  MOVFF  03,4D
0FCA:  MOVFF  02,4C
0FCE:  MOVFF  01,4B
0FD2:  MOVFF  00,4A
0FD6:  MOVLW  A2
0FD8:  MOVWF  51
0FDA:  MOVLW  E7
0FDC:  MOVWF  50
0FDE:  MOVLW  3B
0FE0:  MOVWF  4F
0FE2:  MOVLW  6C
0FE4:  MOVWF  4E
0FE6:  CALL   0666
0FEA:  BSF    FD8.1
0FEC:  MOVFF  39,49
0FF0:  MOVFF  38,48
0FF4:  MOVFF  37,47
0FF8:  MOVFF  36,46
0FFC:  MOVFF  03,4D
1000:  MOVFF  02,4C
1004:  MOVFF  01,4B
1008:  MOVFF  00,4A
100C:  CALL   0758
1010:  MOVFF  00,36
1014:  MOVFF  01,37
1018:  MOVFF  02,38
101C:  MOVFF  03,39
1020:  BSF    FD8.1
1022:  MOVFF  03,49
1026:  MOVFF  02,48
102A:  MOVFF  01,47
102E:  MOVFF  00,46
1032:  CLRF   4D
1034:  CLRF   4C
1036:  CLRF   4B
1038:  MOVLW  81
103A:  MOVWF  4A
103C:  CALL   0758
1040:  MOVFF  03,21
1044:  MOVFF  02,20
1048:  MOVFF  01,1F
104C:  MOVFF  00,1E
....................   
....................  //calculate True RH reading 
....................  rhtrue = ((tc - 25.0) * (0.01 + (0.00008 * rh))) + rhlin; 
1050:  BSF    FD8.1
1052:  MOVFF  07,49
1056:  MOVFF  06,48
105A:  MOVFF  05,47
105E:  MOVFF  04,46
1062:  CLRF   4D
1064:  CLRF   4C
1066:  MOVLW  48
1068:  MOVWF  4B
106A:  MOVLW  83
106C:  MOVWF  4A
106E:  CALL   0758
1072:  MOVFF  00,36
1076:  MOVFF  01,37
107A:  MOVFF  02,38
107E:  MOVFF  03,39
1082:  MOVLW  AC
1084:  MOVWF  4D
1086:  MOVLW  C5
1088:  MOVWF  4C
108A:  MOVLW  27
108C:  MOVWF  4B
108E:  MOVLW  71
1090:  MOVWF  4A
1092:  MOVFF  35,51
1096:  MOVFF  34,50
109A:  MOVFF  33,4F
109E:  MOVFF  32,4E
10A2:  CALL   0666
10A6:  BCF    FD8.1
10A8:  MOVLW  0A
10AA:  MOVWF  49
10AC:  MOVLW  D7
10AE:  MOVWF  48
10B0:  MOVLW  23
10B2:  MOVWF  47
10B4:  MOVLW  78
10B6:  MOVWF  46
10B8:  MOVFF  03,4D
10BC:  MOVFF  02,4C
10C0:  MOVFF  01,4B
10C4:  MOVFF  00,4A
10C8:  CALL   0758
10CC:  MOVFF  39,4D
10D0:  MOVFF  38,4C
10D4:  MOVFF  37,4B
10D8:  MOVFF  36,4A
10DC:  MOVFF  03,51
10E0:  MOVFF  02,50
10E4:  MOVFF  01,4F
10E8:  MOVFF  00,4E
10EC:  CALL   0666
10F0:  MOVFF  00,36
10F4:  MOVFF  01,37
10F8:  MOVFF  02,38
10FC:  MOVFF  03,39
1100:  BCF    FD8.1
1102:  MOVFF  03,49
1106:  MOVFF  02,48
110A:  MOVFF  01,47
110E:  MOVFF  00,46
1112:  MOVFF  21,4D
1116:  MOVFF  20,4C
111A:  MOVFF  1F,4B
111E:  MOVFF  1E,4A
1122:  CALL   0758
1126:  MOVFF  03,0B
112A:  MOVFF  02,0A
112E:  MOVFF  01,09
1132:  MOVFF  00,08
.................... } 
....................   
.................... //***** Function to measure & calculate SHT75 temp & RH ***** 
....................   
.................... void sht_rd (float & temp, float & truehumid) 
.................... { 
....................  int16 restemp, reshumid; 
....................  float realhumid; 
....................  restemp = 0; truehumid = 0; 
*
0E8E:  CLRF   1B
0E90:  CLRF   1A
0E92:  CLRF   0B
0E94:  CLRF   0A
0E96:  CLRF   09
0E98:  CLRF   08
....................   
....................  restemp = measuretemp();    //measure temp 
0E9A:  GOTO   05D8
0E9E:  MOVFF  02,1B
0EA2:  MOVFF  01,1A
....................  reshumid = measurehumid();  //measure RH 
0EA6:  GOTO   0604
0EAA:  MOVFF  02,1D
0EAE:  MOVFF  01,1C
.................... calculate_data (restemp, reshumid, temp, realhumid, truehumid);  //calculate temp & RH 
0EB2:  MOVFF  1B,2B
0EB6:  MOVFF  1A,2A
0EBA:  MOVFF  1D,2D
0EBE:  MOVFF  1C,2C
.................... } 
....................   
.................... //***** Function to initialise SHT75 on power-up ***** 
....................   
.................... void sht_init (void) 
.................... { 
....................  comreset();    //reset SHT75 
*
01A8:  BRA    0182
....................  delay_ms(20);  //delay for power-up 
01AA:  MOVLW  14
01AC:  MOVWF  28
01AE:  RCALL  0068
.................... } 
01B0:  GOTO   0D3A (RETURN)
....................  
....................  
....................  
.................... #include "new_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
....................  
.................... #define LCD_E     PIN_D0 
.................... #define LCD_RS    PIN_D1 
.................... //#define LCD_RW    0 
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW   1 
....................  
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0x0C,//0xf,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
.................... /* 
.................... byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xC, 1,6}; 
....................  
.................... Value   Cursor  Blink 
.................... 0x0C     Off      Off 
.................... 0x0D     Off      On 
.................... 0x0E     On       Off 
.................... 0x0F     On       On 
....................  
.................... */ 
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
0090:  BTFSC  2F.0
0092:  BRA    0098
0094:  BCF    F8C.4
0096:  BRA    009A
0098:  BSF    F8C.4
009A:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
009C:  BTFSC  2F.1
009E:  BRA    00A4
00A0:  BCF    F8C.5
00A2:  BRA    00A6
00A4:  BSF    F8C.5
00A6:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
00A8:  BTFSC  2F.2
00AA:  BRA    00B0
00AC:  BCF    F8C.6
00AE:  BRA    00B2
00B0:  BSF    F8C.6
00B2:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
00B4:  BTFSC  2F.3
00B6:  BRA    00BC
00B8:  BCF    F8C.7
00BA:  BRA    00BE
00BC:  BSF    F8C.7
00BE:  BCF    F95.7
....................  
....................  delay_cycles(1); 
00C0:  NOP   
....................  output_high(LCD_E); 
00C2:  BCF    F95.0
00C4:  BSF    F8C.0
....................  delay_us(2); 
00C6:  BRA    00C8
....................  output_low(LCD_E); 
00C8:  BCF    F95.0
00CA:  BCF    F8C.0
.................... } 
00CC:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
00CE:  BCF    F95.1
00D0:  BCF    F8C.1
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
00D2:  MOVLW  13
00D4:  MOVWF  00
00D6:  DECFSZ 00,F
00D8:  BRA    00D6
00DA:  BRA    00DC
.................... #endif 
....................  
.................... if(address) 
00DC:  MOVF   2C,F
00DE:  BZ    00E6
....................    output_high(LCD_RS); 
00E0:  BCF    F95.1
00E2:  BSF    F8C.1
.................... else 
00E4:  BRA    00EA
....................    output_low(LCD_RS); 
00E6:  BCF    F95.1
00E8:  BCF    F8C.1
....................  
....................  delay_cycles(1); 
00EA:  NOP   
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
00EC:  BCF    F95.0
00EE:  BCF    F8C.0
....................  
.................... lcd_send_nibble(n >> 4); 
00F0:  SWAPF  2D,W
00F2:  MOVWF  2E
00F4:  MOVLW  0F
00F6:  ANDWF  2E,F
00F8:  MOVFF  2E,2F
00FC:  RCALL  0090
.................... lcd_send_nibble(n & 0xf); 
00FE:  MOVF   2D,W
0100:  ANDLW  0F
0102:  MOVWF  2E
0104:  MOVWF  2F
0106:  RCALL  0090
.................... } 
0108:  RETLW  00
....................  
.................... //---------------------------- 
....................  
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
010A:  BCF    F95.1
010C:  BCF    F8C.1
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
010E:  BCF    F95.0
0110:  BCF    F8C.0
....................  
.................... delay_ms(15); 
0112:  MOVLW  0F
0114:  MOVWF  28
0116:  RCALL  0068
....................  
.................... for(i=0 ;i < 3; i++) 
0118:  CLRF   1A
011A:  MOVF   1A,W
011C:  SUBLW  02
011E:  BNC   0130
....................    { 
....................     lcd_send_nibble(0x03); 
0120:  MOVLW  03
0122:  MOVWF  2F
0124:  RCALL  0090
....................     delay_ms(5); 
0126:  MOVLW  05
0128:  MOVWF  28
012A:  RCALL  0068
....................    } 
012C:  INCF   1A,F
012E:  BRA    011A
....................  
.................... lcd_send_nibble(0x02); 
0130:  MOVLW  02
0132:  MOVWF  2F
0134:  RCALL  0090
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0136:  CLRF   1A
0138:  MOVF   1A,W
013A:  SUBLW  03
013C:  BNC   0156
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
013E:  CLRF   03
0140:  MOVF   1A,W
0142:  RCALL  0004
0144:  MOVWF  1B
0146:  CLRF   2C
0148:  MOVWF  2D
014A:  RCALL  00CE
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
014C:  MOVLW  05
014E:  MOVWF  28
0150:  RCALL  0068
....................     #endif 
....................    } 
0152:  INCF   1A,F
0154:  BRA    0138
....................  
.................... } 
0156:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
033A:  DECFSZ 29,W
033C:  BRA    0340
033E:  BRA    0346
....................    address = lcd_line_two; 
0340:  MOVLW  40
0342:  MOVWF  2A
.................... else 
0344:  BRA    0348
....................    address=0; 
0346:  CLRF   2A
....................  
.................... address += x-1; 
0348:  MOVLW  01
034A:  SUBWF  28,W
034C:  ADDWF  2A,F
.................... lcd_send_byte(0, 0x80 | address); 
034E:  MOVF   2A,W
0350:  IORLW  80
0352:  MOVWF  2B
0354:  CLRF   2C
0356:  MOVWF  2D
0358:  RCALL  00CE
.................... } 
035A:  RETLW  00
....................  
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
035C:  MOVF   27,W
035E:  XORLW  0C
0360:  BZ    036C
0362:  XORLW  06
0364:  BZ    037C
0366:  XORLW  02
0368:  BZ    0388
036A:  BRA    0392
....................     case '\f': 
....................       lcd_send_byte(0,1); 
036C:  CLRF   2C
036E:  MOVLW  01
0370:  MOVWF  2D
0372:  RCALL  00CE
....................       delay_ms(2); 
0374:  MOVLW  02
0376:  MOVWF  28
0378:  RCALL  0068
....................       break; 
037A:  BRA    039E
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
037C:  MOVLW  01
037E:  MOVWF  28
0380:  MOVLW  02
0382:  MOVWF  29
0384:  RCALL  033A
....................        break; 
0386:  BRA    039E
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0388:  CLRF   2C
038A:  MOVLW  10
038C:  MOVWF  2D
038E:  RCALL  00CE
....................        break; 
0390:  BRA    039E
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
0392:  MOVLW  01
0394:  MOVWF  2C
0396:  MOVFF  27,2D
039A:  RCALL  00CE
....................        break; 
039C:  BRA    039E
....................    } 
.................... } 
039E:  RETLW  00
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
....................  
.................... //3x4 tuþ takýmý 
.................... #define sut1   pin_A0  
.................... #define sut2   pin_A1  
.................... #define sut3   pin_A2 
....................  
.................... #define sat1   pin_B0  
.................... #define sat2   pin_B1 
.................... #define sat3   pin_B2  
.................... #define sat4   pin_B3  
....................  
.................... // ýsýtýcý ve soðutucu 
.................... #define isitici   pin_C0  
.................... #define sogutucu  pin_C1 
....................  
.................... //sht11 algýlayýcý             
.................... #define sht_data_pin   PIN_B7//(Data pin veya input) 
.................... #define sht_clk_pin    PIN_B6 
....................  
.................... float temp=0,humid=0,sicaklik=0,nem=0; 
.................... int i=1, negatif=0, flag=0, derece=25, tus=99, pres = 99; 
....................  
.................... //fonksiyonlar 
.................... int keypad_oku() // Fonksiyon ismi 
.................... {           
....................    output_a(0x00); // D portu çýkýþý sýfýrlanýyor 
*
01D6:  CLRF   F92
01D8:  CLRF   F89
....................    output_b(0x00); // D portu çýkýþý sýfýrlanýyor 
01DA:  CLRF   F93
01DC:  CLRF   F8A
....................  
....................    output_high(sat1); // 1. satýr lojik-1 yapýlýyor 
01DE:  BCF    F93.0
01E0:  BSF    F8A.0
....................       if (input(sut1))   // 1. sütun okunuyor 
01E2:  BSF    F92.0
01E4:  BTFSS  F80.0
01E6:  BRA    01FC
....................          { delay_ms(20);tus=1; output_high(sut1); output_low(sat1);} 
01E8:  MOVLW  14
01EA:  MOVWF  28
01EC:  RCALL  0068
01EE:  MOVLW  01
01F0:  MOVWF  18
01F2:  BCF    F92.0
01F4:  BSF    F89.0
01F6:  BCF    F93.0
01F8:  BCF    F8A.0
....................       else if (input(sut2))   // 2. sütun okunuyor 
01FA:  BRA    0234
01FC:  BSF    F92.1
01FE:  BTFSS  F80.1
0200:  BRA    0216
....................          { delay_ms(20); tus=2; output_high(sut2);output_low(sat1);} 
0202:  MOVLW  14
0204:  MOVWF  28
0206:  RCALL  0068
0208:  MOVLW  02
020A:  MOVWF  18
020C:  BCF    F92.1
020E:  BSF    F89.1
0210:  BCF    F93.0
0212:  BCF    F8A.0
....................       else if (input(sut3))   // 3. sütun okunuyor 
0214:  BRA    0234
0216:  BSF    F92.2
0218:  BTFSS  F80.2
021A:  BRA    0230
....................          { delay_ms(20); tus=3;output_high(sut3); output_low(sat1);} 
021C:  MOVLW  14
021E:  MOVWF  28
0220:  RCALL  0068
0222:  MOVLW  03
0224:  MOVWF  18
0226:  BCF    F92.2
0228:  BSF    F89.2
022A:  BCF    F93.0
022C:  BCF    F8A.0
....................       else 
022E:  BRA    0234
....................         output_low(sat1); // 1. satýr lojik-0 yapýlýyor 
0230:  BCF    F93.0
0232:  BCF    F8A.0
....................     
....................    output_high(sat2);// 2. satýr lojik-1 yapýlýyor 
0234:  BCF    F93.1
0236:  BSF    F8A.1
....................       if (input(sut1))   // 1. sütun okunuyor 
0238:  BSF    F92.0
023A:  BTFSS  F80.0
023C:  BRA    0252
....................          { delay_ms(20); tus=4; output_high(sut1);output_low(sat2);} 
023E:  MOVLW  14
0240:  MOVWF  28
0242:  RCALL  0068
0244:  MOVLW  04
0246:  MOVWF  18
0248:  BCF    F92.0
024A:  BSF    F89.0
024C:  BCF    F93.1
024E:  BCF    F8A.1
....................       else if (input(sut2))   // 2. sütun okunuyor 
0250:  BRA    028A
0252:  BSF    F92.1
0254:  BTFSS  F80.1
0256:  BRA    026C
....................          { delay_ms(20); tus=5; output_high(sut2);output_low(sat2);} 
0258:  MOVLW  14
025A:  MOVWF  28
025C:  RCALL  0068
025E:  MOVLW  05
0260:  MOVWF  18
0262:  BCF    F92.1
0264:  BSF    F89.1
0266:  BCF    F93.1
0268:  BCF    F8A.1
....................       else if (input(sut3))   // 3. sütun okunuyor 
026A:  BRA    028A
026C:  BSF    F92.2
026E:  BTFSS  F80.2
0270:  BRA    0286
....................          { delay_ms(20); tus=6; output_high(sut3);output_low(sat2);} 
0272:  MOVLW  14
0274:  MOVWF  28
0276:  RCALL  0068
0278:  MOVLW  06
027A:  MOVWF  18
027C:  BCF    F92.2
027E:  BSF    F89.2
0280:  BCF    F93.1
0282:  BCF    F8A.1
....................       else 
0284:  BRA    028A
....................         output_low(sat2); // 2. satýr lojik-0 yapýlýyor 
0286:  BCF    F93.1
0288:  BCF    F8A.1
....................  
....................     output_high(sat3); // 3. satýr lojik-1 yapýlýyor 
028A:  BCF    F93.2
028C:  BSF    F8A.2
....................       if (input(sut1))   // 1. sütun okunuyor 
028E:  BSF    F92.0
0290:  BTFSS  F80.0
0292:  BRA    02A8
....................          { delay_ms(20); tus=7; output_high(sut1);output_low(sat3);} 
0294:  MOVLW  14
0296:  MOVWF  28
0298:  RCALL  0068
029A:  MOVLW  07
029C:  MOVWF  18
029E:  BCF    F92.0
02A0:  BSF    F89.0
02A2:  BCF    F93.2
02A4:  BCF    F8A.2
....................       else if (input(sut2))   // 2. sütun okunuyor 
02A6:  BRA    02E0
02A8:  BSF    F92.1
02AA:  BTFSS  F80.1
02AC:  BRA    02C2
....................          { delay_ms(20); tus=8; output_high(sut2);output_low(sat3);} 
02AE:  MOVLW  14
02B0:  MOVWF  28
02B2:  RCALL  0068
02B4:  MOVLW  08
02B6:  MOVWF  18
02B8:  BCF    F92.1
02BA:  BSF    F89.1
02BC:  BCF    F93.2
02BE:  BCF    F8A.2
....................       else if (input(sut3))   // 3. sütun okunuyor 
02C0:  BRA    02E0
02C2:  BSF    F92.2
02C4:  BTFSS  F80.2
02C6:  BRA    02DC
....................          { delay_ms(20); tus=9; output_high(sut3);output_low(sat3);} 
02C8:  MOVLW  14
02CA:  MOVWF  28
02CC:  RCALL  0068
02CE:  MOVLW  09
02D0:  MOVWF  18
02D2:  BCF    F92.2
02D4:  BSF    F89.2
02D6:  BCF    F93.2
02D8:  BCF    F8A.2
....................       else 
02DA:  BRA    02E0
....................         output_low(sat3); // 3. satýr lojik-0 yapýlýyor 
02DC:  BCF    F93.2
02DE:  BCF    F8A.2
....................     
....................   output_high(sat4); // 3. satýr lojik-1 yapýlýyor 
02E0:  BCF    F93.3
02E2:  BSF    F8A.3
....................       if (input(sut1))   // 1. sütun okunuyor 
02E4:  BSF    F92.0
02E6:  BTFSS  F80.0
02E8:  BRA    02FE
....................          { delay_ms(20); tus=10; output_high(sut1);output_low(sat4);} 
02EA:  MOVLW  14
02EC:  MOVWF  28
02EE:  RCALL  0068
02F0:  MOVLW  0A
02F2:  MOVWF  18
02F4:  BCF    F92.0
02F6:  BSF    F89.0
02F8:  BCF    F93.3
02FA:  BCF    F8A.3
....................       else if (input(sut2))   // 2. sütun okunuyor 
02FC:  BRA    0334
02FE:  BSF    F92.1
0300:  BTFSS  F80.1
0302:  BRA    0316
....................          { delay_ms(20); tus=0; output_high(sut2);output_low(sat4);} 
0304:  MOVLW  14
0306:  MOVWF  28
0308:  RCALL  0068
030A:  CLRF   18
030C:  BCF    F92.1
030E:  BSF    F89.1
0310:  BCF    F93.3
0312:  BCF    F8A.3
....................       else if (input(sut3))   // 3. sütun okunuyor 
0314:  BRA    0334
0316:  BSF    F92.2
0318:  BTFSS  F80.2
031A:  BRA    0330
....................          { delay_ms(20); tus=11; output_high(sut3);output_low(sat4);} 
031C:  MOVLW  14
031E:  MOVWF  28
0320:  RCALL  0068
0322:  MOVLW  0B
0324:  MOVWF  18
0326:  BCF    F92.2
0328:  BSF    F89.2
032A:  BCF    F93.3
032C:  BCF    F8A.3
....................       else 
032E:  BRA    0334
....................         output_low(sat4); // 3. satýr lojik-0 yapýlýyor 
0330:  BCF    F93.3
0332:  BCF    F8A.3
....................  
....................     
....................    return tus; // Fonksiyon "tus" deðeri ile geri döner 
0334:  MOVFF  18,01
.................... } 
0338:  RETLW  00
....................  
....................  
.................... int ChartoInt(char asd) 
.................... { 
....................   switch(asd) 
....................   { 
....................   case '0' : return 0;break; 
....................   case '1' : return 1;break; 
....................   case '2' : return 2;break; 
....................   case '3' : return 3;break; 
....................   case '4' : return 4;break; 
....................   case '5' : return 5;break; 
....................   case '6' : return 6;break; 
....................   case '7' : return 7;break; 
....................   case '8' : return 8;break; 
....................   case '9' : return 9;break; 
....................   default : return 0; 
....................   } 
.................... } 
....................  
.................... void allkeypadlow() 
.................... { 
....................    output_low(sat1); 
*
01B4:  BCF    F93.0
01B6:  BCF    F8A.0
....................    output_low(sat2); 
01B8:  BCF    F93.1
01BA:  BCF    F8A.1
....................    output_low(sat3); 
01BC:  BCF    F93.2
01BE:  BCF    F8A.2
....................    output_low(sat4); 
01C0:  BCF    F93.3
01C2:  BCF    F8A.3
....................    output_low(sut1); 
01C4:  BCF    F92.0
01C6:  BCF    F89.0
....................    output_low(sut2); 
01C8:  BCF    F92.1
01CA:  BCF    F89.1
....................    output_low(sut3); 
01CC:  BCF    F92.2
01CE:  BCF    F89.2
....................    tus=99; 
01D0:  MOVLW  63
01D2:  MOVWF  18
.................... } 
01D4:  RETLW  00
....................  
....................  
.................... // ana program 
.................... void main() 
.................... { 
*
0CB0:  CLRF   FF8
0CB2:  BCF    FD0.7
0CB4:  CLRF   FEA
0CB6:  CLRF   FE9
0CB8:  CLRF   07
0CBA:  CLRF   06
0CBC:  CLRF   05
0CBE:  CLRF   04
0CC0:  CLRF   0B
0CC2:  CLRF   0A
0CC4:  CLRF   09
0CC6:  CLRF   08
0CC8:  CLRF   0F
0CCA:  CLRF   0E
0CCC:  CLRF   0D
0CCE:  CLRF   0C
0CD0:  CLRF   13
0CD2:  CLRF   12
0CD4:  CLRF   11
0CD6:  CLRF   10
0CD8:  MOVLW  01
0CDA:  MOVWF  14
0CDC:  CLRF   15
0CDE:  CLRF   16
0CE0:  MOVLW  19
0CE2:  MOVWF  17
0CE4:  MOVLW  63
0CE6:  MOVWF  18
0CE8:  MOVWF  19
0CEA:  BSF    FC1.0
0CEC:  BSF    FC1.1
0CEE:  BSF    FC1.2
0CF0:  BCF    FC1.3
....................    setup_adc_ports(NO_ANALOGS); 
0CF2:  BSF    FC1.0
0CF4:  BSF    FC1.1
0CF6:  BSF    FC1.2
0CF8:  BCF    FC1.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0CFA:  BCF    FC1.6
0CFC:  BCF    FC2.6
0CFE:  BCF    FC2.7
0D00:  BCF    FC1.7
0D02:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0D04:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0D06:  BCF    FC6.5
0D08:  BCF    F94.5
0D0A:  BSF    F94.4
0D0C:  BCF    F94.3
0D0E:  MOVLW  01
0D10:  MOVWF  FC6
0D12:  MOVLW  00
0D14:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0D16:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0D18:  MOVLW  80
0D1A:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0D1C:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0D1E:  MOVLW  00
0D20:  MOVWF  FCA
0D22:  MOVLW  00
0D24:  MOVWF  FCB
....................    setup_ccp1(CCP_OFF); 
0D26:  BSF    F94.2
0D28:  CLRF   FBD
....................     
....................  
....................    lcd_init(); 
0D2A:  CALL   010A
....................    delay_ms(100); 
0D2E:  MOVLW  64
0D30:  MOVWF  28
0D32:  CALL   0068
....................    sht_init(); 
0D36:  GOTO   01A8
....................    delay_ms(100); 
0D3A:  MOVLW  64
0D3C:  MOVWF  28
0D3E:  CALL   0068
....................   
....................   
....................    set_tris_a(0x00);   // A portu komple çýkýþ 
0D42:  MOVLW  00
0D44:  MOVWF  F92
....................    set_tris_b(0x00); 
0D46:  MOVWF  F93
....................    set_tris_c(0x0F);    
0D48:  MOVLW  0F
0D4A:  MOVWF  F94
....................    set_tris_d(0x0F);    
0D4C:  MOVWF  F95
....................  
....................    lcd_init();   // LCD hazýrlanýyor 
0D4E:  CALL   010A
....................  
....................    while(1) 
....................    { 
....................       allkeypadlow(); 
0D52:  CALL   01B4
....................       keypad_oku(); 
0D56:  CALL   01D6
....................       pres = tus; 
0D5A:  MOVFF  18,19
....................       allkeypadlow(); 
0D5E:  CALL   01B4
....................        
....................       if(pres == 10) 
0D62:  MOVF   19,W
0D64:  SUBLW  0A
0D66:  BNZ   0D74
....................       { 
....................           flag = 1; 
0D68:  MOVLW  01
0D6A:  MOVWF  16
....................           printf(lcd_putc,"\f");  
0D6C:  MOVLW  0C
0D6E:  MOVWF  27
0D70:  CALL   035C
....................       }    
....................       while(flag==1) 
....................       {   
0D74:  DECFSZ 16,W
0D76:  BRA    0E8E
....................         lcd_gotoxy(1,1);      
0D78:  MOVLW  01
0D7A:  MOVWF  28
0D7C:  MOVWF  29
0D7E:  CALL   033A
....................         printf(lcd_putc,"SIC gir"); 
0D82:  MOVLW  18
0D84:  MOVWF  FF6
0D86:  MOVLW  00
0D88:  MOVWF  FF7
0D8A:  GOTO   03A0
....................         keypad_oku(); 
0D8E:  CALL   01D6
....................         pres = tus; 
0D92:  MOVFF  18,19
....................         if(pres == 10 && i == 1) 
0D96:  MOVF   19,W
0D98:  SUBLW  0A
0D9A:  BNZ   0DA4
0D9C:  DECFSZ 14,W
0D9E:  BRA    0DA4
....................           pres = 99; 
0DA0:  MOVLW  63
0DA2:  MOVWF  19
....................         allkeypadlow();   
0DA4:  CALL   01B4
....................         if( pres >= 0 && pres <= 9) 
0DA8:  MOVF   19,W
0DAA:  SUBLW  09
0DAC:  BNC   0DEC
....................         { 
....................           lcd_gotoxy(i,2); 
0DAE:  MOVFF  14,28
0DB2:  MOVLW  02
0DB4:  MOVWF  29
0DB6:  CALL   033A
....................           if(i==1) 
0DBA:  DECFSZ 14,W
0DBC:  BRA    0DC0
....................             derece = 0; 
0DBE:  CLRF   17
....................           printf(lcd_putc,"%d",pres); 
0DC0:  MOVFF  19,1A
0DC4:  MOVLW  1F
0DC6:  MOVWF  1B
0DC8:  CALL   03EA
....................           delay_ms(1000); 
0DCC:  MOVLW  04
0DCE:  MOVWF  1A
0DD0:  MOVLW  FA
0DD2:  MOVWF  28
0DD4:  CALL   0068
0DD8:  DECFSZ 1A,F
0DDA:  BRA    0DD0
....................           derece = (derece*10) + pres; 
0DDC:  MOVF   17,W
0DDE:  MULLW  0A
0DE0:  MOVF   FF3,W
0DE2:  ADDWF  19,W
0DE4:  MOVWF  17
....................           i += 1;     
0DE6:  MOVLW  01
0DE8:  ADDWF  14,F
....................          } 
....................          else if(pres == 11) 
0DEA:  BRA    0E8C
0DEC:  MOVF   19,W
0DEE:  SUBLW  0B
0DF0:  BNZ   0E38
....................          { 
....................           printf(lcd_putc,"\f%d derece \nayarlandý.",derece); 
0DF2:  MOVLW  0C
0DF4:  MOVWF  27
0DF6:  CALL   035C
0DFA:  MOVFF  17,1A
0DFE:  MOVLW  1F
0E00:  MOVWF  1B
0E02:  CALL   03EA
0E06:  MOVLW  23
0E08:  MOVWF  FF6
0E0A:  MOVLW  00
0E0C:  MOVWF  FF7
0E0E:  MOVLW  13
0E10:  MOVWF  1A
0E12:  CALL   04B2
....................           flag = 0; 
0E16:  CLRF   16
....................           negatif = 0; 
0E18:  CLRF   15
....................           delay_ms(1000); 
0E1A:  MOVLW  04
0E1C:  MOVWF  1A
0E1E:  MOVLW  FA
0E20:  MOVWF  28
0E22:  CALL   0068
0E26:  DECFSZ 1A,F
0E28:  BRA    0E1E
....................           i=1; 
0E2A:  MOVLW  01
0E2C:  MOVWF  14
....................           printf(lcd_putc,"\f"); 
0E2E:  MOVLW  0C
0E30:  MOVWF  27
0E32:  CALL   035C
....................          } 
....................          else if(pres == 10) 
0E36:  BRA    0E8C
0E38:  MOVF   19,W
0E3A:  SUBLW  0A
0E3C:  BNZ   0E8C
....................          { 
....................             printf(lcd_putc,"\f-%d derece \nayarlandý.",derece); 
0E3E:  MOVLW  0C
0E40:  MOVWF  27
0E42:  CALL   035C
0E46:  MOVLW  2D
0E48:  MOVWF  27
0E4A:  CALL   035C
0E4E:  MOVFF  17,1A
0E52:  MOVLW  1F
0E54:  MOVWF  1B
0E56:  CALL   03EA
0E5A:  MOVLW  3C
0E5C:  MOVWF  FF6
0E5E:  MOVLW  00
0E60:  MOVWF  FF7
0E62:  MOVLW  13
0E64:  MOVWF  1A
0E66:  CALL   04B2
....................             flag = 0; 
0E6A:  CLRF   16
....................             delay_ms(1000); 
0E6C:  MOVLW  04
0E6E:  MOVWF  1A
0E70:  MOVLW  FA
0E72:  MOVWF  28
0E74:  CALL   0068
0E78:  DECFSZ 1A,F
0E7A:  BRA    0E70
....................             negatif = 1; 
0E7C:  MOVLW  01
0E7E:  MOVWF  15
....................             i=1; 
0E80:  MOVWF  14
....................             printf(lcd_putc,"\f"); 
0E82:  MOVLW  0C
0E84:  MOVWF  27
0E86:  CALL   035C
....................          } 
....................          else{;} 
0E8A:  BRA    0E8C
....................  
....................       } 
0E8C:  BRA    0D74
....................  
....................         sht_rd (temp, humid); 
....................         sicaklik=(unsigned int)temp; 
*
1136:  MOVFF  07,1D
113A:  MOVFF  06,1C
113E:  MOVFF  05,1B
1142:  MOVFF  04,1A
1146:  RCALL  09C2
1148:  CLRF   43
114A:  MOVFF  01,42
114E:  CALL   0630
1152:  MOVFF  03,0F
1156:  MOVFF  02,0E
115A:  MOVFF  01,0D
115E:  MOVFF  00,0C
....................         nem=(unsigned int)humid; 
1162:  MOVFF  0B,1D
1166:  MOVFF  0A,1C
116A:  MOVFF  09,1B
116E:  MOVFF  08,1A
1172:  RCALL  09C2
1174:  CLRF   43
1176:  MOVFF  01,42
117A:  CALL   0630
117E:  MOVFF  03,13
1182:  MOVFF  02,12
1186:  MOVFF  01,11
118A:  MOVFF  00,10
....................         lcd_gotoxy(1,1);         
118E:  MOVLW  01
1190:  MOVWF  28
1192:  MOVWF  29
1194:  CALL   033A
....................         printf(lcd_putc,"SIC %1.3f ",sicaklik);  
1198:  MOVLW  50
119A:  MOVWF  FF6
119C:  MOVLW  00
119E:  MOVWF  FF7
11A0:  MOVLW  04
11A2:  MOVWF  1A
11A4:  CALL   04B2
11A8:  MOVLW  89
11AA:  MOVWF  FE9
11AC:  MOVFF  0F,1D
11B0:  MOVFF  0E,1C
11B4:  MOVFF  0D,1B
11B8:  MOVFF  0C,1A
11BC:  MOVLW  03
11BE:  MOVWF  1E
11C0:  RCALL  0AB4
11C2:  MOVLW  20
11C4:  MOVWF  27
11C6:  CALL   035C
....................         lcd_gotoxy(1,2); 
11CA:  MOVLW  01
11CC:  MOVWF  28
11CE:  MOVLW  02
11D0:  MOVWF  29
11D2:  CALL   033A
....................         printf(lcd_putc,"NEM %1.3f ",nem); 
11D6:  MOVLW  5C
11D8:  MOVWF  FF6
11DA:  MOVLW  00
11DC:  MOVWF  FF7
11DE:  MOVLW  04
11E0:  MOVWF  1A
11E2:  CALL   04B2
11E6:  MOVLW  89
11E8:  MOVWF  FE9
11EA:  MOVFF  13,1D
11EE:  MOVFF  12,1C
11F2:  MOVFF  11,1B
11F6:  MOVFF  10,1A
11FA:  MOVLW  03
11FC:  MOVWF  1E
11FE:  RCALL  0AB4
1200:  MOVLW  20
1202:  MOVWF  27
1204:  CALL   035C
....................        
....................        
....................       if(negatif == 1 && derece != 0) 
1208:  DECFSZ 15,W
120A:  BRA    121A
120C:  MOVF   17,F
120E:  BZ    121A
....................       { 
....................        output_low(isitici); 
1210:  BCF    F94.0
1212:  BCF    F8B.0
....................        output_high(sogutucu); 
1214:  BCF    F94.1
1216:  BSF    F8B.1
....................       } 
....................       else if(derece >= sicaklik-2 && derece <= sicaklik+2) 
1218:  BRA    1352
121A:  BSF    FD8.1
121C:  MOVFF  0F,49
1220:  MOVFF  0E,48
1224:  MOVFF  0D,47
1228:  MOVFF  0C,46
122C:  CLRF   4D
122E:  CLRF   4C
1230:  CLRF   4B
1232:  MOVLW  80
1234:  MOVWF  4A
1236:  CALL   0758
123A:  MOVFF  00,1A
123E:  MOVFF  01,1B
1242:  MOVFF  02,1C
1246:  MOVFF  03,1D
124A:  CLRF   43
124C:  MOVFF  17,42
1250:  CALL   0630
1254:  MOVFF  1D,25
1258:  MOVFF  1C,24
125C:  MOVFF  1B,23
1260:  MOVFF  1A,22
1264:  MOVFF  03,29
1268:  MOVFF  02,28
126C:  MOVFF  01,27
1270:  MOVFF  00,26
1274:  RCALL  0C3A
1276:  BC    127A
1278:  BNZ   12E4
127A:  BCF    FD8.1
127C:  MOVFF  0F,49
1280:  MOVFF  0E,48
1284:  MOVFF  0D,47
1288:  MOVFF  0C,46
128C:  CLRF   4D
128E:  CLRF   4C
1290:  CLRF   4B
1292:  MOVLW  80
1294:  MOVWF  4A
1296:  CALL   0758
129A:  MOVFF  00,1E
129E:  MOVFF  01,1F
12A2:  MOVFF  02,20
12A6:  MOVFF  03,21
12AA:  CLRF   43
12AC:  MOVFF  17,42
12B0:  CALL   0630
12B4:  MOVFF  03,25
12B8:  MOVFF  02,24
12BC:  MOVFF  01,23
12C0:  MOVFF  00,22
12C4:  MOVFF  21,29
12C8:  MOVFF  20,28
12CC:  MOVFF  1F,27
12D0:  MOVFF  1E,26
12D4:  RCALL  0C3A
12D6:  BC    12DA
12D8:  BNZ   12E4
....................       { 
....................        output_low(isitici); 
12DA:  BCF    F94.0
12DC:  BCF    F8B.0
....................        output_low(sogutucu); 
12DE:  BCF    F94.1
12E0:  BCF    F8B.1
....................       }   
....................       else if(derece > sicaklik) 
12E2:  BRA    1352
12E4:  CLRF   43
12E6:  MOVFF  17,42
12EA:  CALL   0630
12EE:  MOVFF  0F,25
12F2:  MOVFF  0E,24
12F6:  MOVFF  0D,23
12FA:  MOVFF  0C,22
12FE:  MOVFF  03,29
1302:  MOVFF  02,28
1306:  MOVFF  01,27
130A:  MOVFF  00,26
130E:  RCALL  0C3A
1310:  BNC   131C
....................       { 
....................        output_high(isitici); 
1312:  BCF    F94.0
1314:  BSF    F8B.0
....................        output_low(sogutucu);      
1316:  BCF    F94.1
1318:  BCF    F8B.1
....................       } 
....................       else if(derece < sicaklik) 
131A:  BRA    1352
131C:  CLRF   43
131E:  MOVFF  17,42
1322:  CALL   0630
1326:  MOVFF  03,25
132A:  MOVFF  02,24
132E:  MOVFF  01,23
1332:  MOVFF  00,22
1336:  MOVFF  0F,29
133A:  MOVFF  0E,28
133E:  MOVFF  0D,27
1342:  MOVFF  0C,26
1346:  RCALL  0C3A
1348:  BNC   1352
....................       { 
....................        output_low(isitici); 
134A:  BCF    F94.0
134C:  BCF    F8B.0
....................        output_high(sogutucu);   
134E:  BCF    F94.1
1350:  BSF    F8B.1
....................       } 
....................        
....................    } 
1352:  BRA    0D52
....................  
.................... } 
....................  
....................  
1354:  SLEEP 

Configuration Fuses:
   Word  1: 2100   XT NOOSCSEN
   Word  2: 0E0D   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0080   NOSTVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
