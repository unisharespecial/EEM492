CCS PCH C Compiler, Version 4.106, 18916               11-Þub-14 19:46

               Filename: C:\Users\Akýn\Desktop\tus_deneme3\tam-isi-nem.lst

               ROM used: 1640 bytes (5%)
                         Largest free fragment is 31128
               RAM used: 27 (2%) at main() level
                         37 (2%) worst case
               Stack:    5 locations

*
0000:  GOTO   03C0
.................... #include <18F452.h>  
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #use delay(clock=4000000) 
*
0096:  CLRF   FEA
0098:  MOVLW  1D
009A:  MOVWF  FE9
009C:  MOVF   FEF,W
009E:  BZ    00BC
00A0:  MOVLW  01
00A2:  MOVWF  01
00A4:  CLRF   00
00A6:  DECFSZ 00,F
00A8:  BRA    00A6
00AA:  DECFSZ 01,F
00AC:  BRA    00A4
00AE:  MOVLW  4A
00B0:  MOVWF  00
00B2:  DECFSZ 00,F
00B4:  BRA    00B2
00B6:  BRA    00B8
00B8:  DECFSZ FEF,F
00BA:  BRA    00A0
00BC:  RETLW  00
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES XT                       //Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOOSCSEN                 //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOSTVREN                 //Stack full/underflow will not cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
....................  
.................... #include "SHT11.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                           // 
.................... // Driver file for SHT75 Temperature & Humidity Sensor                       // 
.................... //                                                                           // 
.................... // ***** To initialise SHT75 sensor upon power up *****                      // 
.................... //                                                                           // 
.................... // Function : sht_init()                                                     // 
.................... // Return   : none                                                           // 
.................... //                                                                           // 
.................... //                                                                           // 
.................... // ***** To measure and caluculate SHT75 temp & real RH *****                // 
.................... //                                                                           // 
.................... // Function : sht_rd (temp, truehumid)                                       // 
.................... // Return   : temperature & true humidity in float values                    // 
.................... //                                                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................   
.................... #define sht_data_pin   PIN_B7 
.................... #define sht_clk_pin    PIN_B6 
....................  
.................... //***** Function to alert SHT75 ***** 
....................   
.................... void comstart (void) 
.................... { 
....................  output_float(sht_data_pin);  //data high 
*
0186:  BSF    F93.7
....................  output_low(sht_clk_pin);  //clk low 
0188:  BCF    F93.6
018A:  BCF    F8A.6
....................  delay_us(1); 
018C:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
018E:  BCF    F93.6
0190:  BSF    F8A.6
....................  delay_us(1); 
0192:  NOP   
....................  output_low(sht_data_pin); //data low 
0194:  BCF    F93.7
0196:  BCF    F8A.7
....................  delay_us(1); 
0198:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
019A:  BCF    F93.6
019C:  BCF    F8A.6
....................  delay_us(2); 
019E:  BRA    01A0
....................  output_high(sht_clk_pin);  //clk high 
01A0:  BCF    F93.6
01A2:  BSF    F8A.6
....................  delay_us(1); 
01A4:  NOP   
....................  output_float(sht_data_pin);  //data high 
01A6:  BSF    F93.7
....................  delay_us(1); 
01A8:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
01AA:  BCF    F93.6
01AC:  BCF    F8A.6
.................... } 
01AE:  GOTO   01D4 (RETURN)
....................   
.................... //***** Function to write data to SHT75 ***** 
....................   
.................... int1 comwrite (int8 iobyte) 
.................... { 
....................  int8 i, mask = 0x80; 
....................  int1 ack; 
....................   
....................  //Shift out command 
....................  delay_us(4); 
....................  for(i=0; i<8; i++) 
....................   { 
....................    output_low(sht_clk_pin);                          //clk low 
....................    if((iobyte & mask) > 0) output_float(sht_data_pin);  //data high if MSB high 
....................    else output_low(sht_data_pin);                    //data low if MSB low 
....................    delay_us(1); 
....................    output_high(sht_clk_pin);                          //clk high 
....................    delay_us(1); 
....................    mask = mask >> 1;                                    //shift to next bit 
....................   } 
....................   
....................  //Shift in ack 
....................  output_low(sht_clk_pin);  //clk low 
....................  delay_us(1); 
....................  ack = input(sht_data_pin);   //get ack bit 
....................  output_high(sht_clk_pin);  //clk high 
....................  delay_us(1); 
....................  output_low(sht_clk_pin);  //clk low 
....................  return(ack); 
.................... } 
....................   
.................... //***** Function to read data from SHT75 ***** 
....................   
.................... int16 comread (void) 
.................... { 
....................  int8 i; 
....................  int16 iobyte = 0; 
....................  const int16 mask0 = 0x0000; 
....................  const int16 mask1 = 0x0001; 
....................   
....................  //shift in MSB data 
....................  for(i=0; i<8; i++) 
....................   { 
....................    iobyte = iobyte << 1; 
....................    output_high(sht_clk_pin);                //clk high 
....................    delay_us(1); 
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
....................    else iobyte |= mask0; 
....................    output_low(sht_clk_pin);                //clk low 
....................    delay_us(1); 
....................   } 
....................   
....................  //send ack 0 bit 
....................  output_low(sht_data_pin); //data low 
....................  delay_us(1); 
....................  output_high(sht_clk_pin);  //clk high 
....................  delay_us(2); 
....................  output_low(sht_clk_pin);  //clk low 
....................  delay_us(1); 
....................  output_float(sht_data_pin);  //data high 
....................   
....................  //shift in LSB data 
....................  for(i=0; i<8; i++) 
....................   { 
....................    iobyte = iobyte << 1; 
....................    output_high(sht_clk_pin);                //clk high 
....................    delay_us(1); 
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
....................    else iobyte |= mask0; 
....................    output_low(sht_clk_pin);                //clk low 
....................    delay_us(1); 
....................   } 
....................   
....................  //send ack 1 bit 
....................  output_float(sht_data_pin);  //data high 
....................  delay_us(1); 
....................  output_high(sht_clk_pin);  //clk high 
....................  delay_us(2); 
....................  output_low(sht_clk_pin);  //clk low 
....................   
....................  return(iobyte); 
.................... } 
....................   
.................... //***** Function to wait for SHT75 reading ***** 
....................   
.................... void comwait (void) 
.................... { 
....................  int16 sht_delay; 
....................   
....................  output_float(sht_data_pin);                     //data high 
....................  output_low(sht_clk_pin);                     //clk low 
....................  delay_us(1); 
....................  for(sht_delay=0; sht_delay<30000; sht_delay++)  // wait for max 300ms 
....................   { 
....................    if (!input(sht_data_pin)) break;              //if sht_data_pin low, SHT75 ready 
....................    delay_us(10); 
....................   } 
.................... } 
....................   
.................... //***** Function to reset SHT75 communication ***** 
....................   
.................... void comreset (void) 
.................... { 
....................  int8 i; 
....................   
....................  output_float(sht_data_pin);    //data high 
01B2:  BSF    F93.7
....................  output_low(sht_clk_pin);    //clk low 
01B4:  BCF    F93.6
01B6:  BCF    F8A.6
....................  delay_us(2); 
01B8:  BRA    01BA
....................  for(i=0; i<9; i++) 
01BA:  CLRF   1A
01BC:  MOVF   1A,W
01BE:  SUBLW  08
01C0:  BNC   01D2
....................   { 
....................    output_high(sht_clk_pin);  //toggle clk 9 times 
01C2:  BCF    F93.6
01C4:  BSF    F8A.6
....................    delay_us(2); 
01C6:  BRA    01C8
....................    output_low(sht_clk_pin); 
01C8:  BCF    F93.6
01CA:  BCF    F8A.6
....................    delay_us(2); 
01CC:  BRA    01CE
....................  } 
01CE:  INCF   1A,F
01D0:  BRA    01BC
....................  comstart(); 
01D2:  BRA    0186
.................... } 
01D4:  GOTO   01DA (RETURN)
....................   
.................... //***** Function to soft reset SHT75 ***** 
....................   
.................... void sht_soft_reset (void) 
.................... { 
....................  comreset();           //SHT75 communication reset 
....................  comwrite(0x1e);       //send SHT75 reset command 
....................  delay_ms(15);         //pause 15 ms 
.................... } 
....................   
.................... //***** Function to measure SHT75 temperature ***** 
....................   
.................... int16 measuretemp (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();             //alert SHT75 
....................  ack = comwrite(0x03);   //send measure temp command and read ack status 
....................  if(ack == 1) return; 
....................  comwait();              //wait for SHT75 measurement to complete 
....................  iobyte = comread();     //read SHT75 temp data 
....................  return(iobyte); 
.................... } 
....................   
.................... //***** Function to measure SHT75 RH ***** 
....................   
.................... int16 measurehumid (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();            //alert SHT75 
....................  ack = comwrite(0x05);  //send measure RH command and read ack status 
....................  if(ack == 1) return; 
....................  comwait();             //wait for SHT75 measurement to complete 
....................  iobyte = comread();    //read SHT75 temp data 
....................  return(iobyte); 
.................... } 
....................   
.................... //***** Function to calculate SHT75 temp & RH ***** 
....................   
.................... void calculate_data (int16 temp, int16 humid, float & tc, float & rhlin, float & rhtrue) 
.................... { 
....................  float truehumid1, rh; 
....................   
....................  //calculate temperature reading 
....................  tc = ((float) temp * 0.01) - 40.0; 
....................   
....................   
....................  //calculate Real RH reading 
....................  rh = (float) humid; 
....................   
....................  rhlin = (rh * 0.0405) - (rh * rh * 0.0000028) - 4.0; 
....................   
....................  //calculate True RH reading 
....................  rhtrue = ((tc - 25.0) * (0.01 + (0.00008 * rh))) + rhlin; 
.................... } 
....................   
.................... //***** Function to measure & calculate SHT75 temp & RH ***** 
....................   
.................... void sht_rd (float & temp, float & truehumid) 
.................... { 
....................  int16 restemp, reshumid; 
....................  float realhumid; 
....................  restemp = 0; truehumid = 0; 
....................   
....................  restemp = measuretemp();    //measure temp 
....................  reshumid = measurehumid();  //measure RH 
.................... calculate_data (restemp, reshumid, temp, realhumid, truehumid);  //calculate temp & RH 
.................... } 
....................   
.................... //***** Function to initialise SHT75 on power-up ***** 
....................   
.................... void sht_init (void) 
.................... { 
....................  comreset();    //reset SHT75 
01D8:  BRA    01B2
....................  delay_ms(20);  //delay for power-up 
01DA:  MOVLW  14
01DC:  MOVWF  1D
01DE:  RCALL  0096
.................... } 
01E0:  GOTO   0444 (RETURN)
....................  
....................  
....................  
.................... #include "new_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
....................  
.................... #define LCD_E     PIN_D0 
.................... #define LCD_RS    PIN_D1 
.................... //#define LCD_RW    0 
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW   1 
....................  
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0x0C,//0xf,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
.................... /* 
.................... byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xC, 1,6}; 
....................  
.................... Value   Cursor  Blink 
.................... 0x0C     Off      Off 
.................... 0x0D     Off      On 
.................... 0x0E     On       Off 
.................... 0x0F     On       On 
....................  
.................... */ 
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
00BE:  BTFSC  24.0
00C0:  BRA    00C6
00C2:  BCF    F8C.4
00C4:  BRA    00C8
00C6:  BSF    F8C.4
00C8:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
00CA:  BTFSC  24.1
00CC:  BRA    00D2
00CE:  BCF    F8C.5
00D0:  BRA    00D4
00D2:  BSF    F8C.5
00D4:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
00D6:  BTFSC  24.2
00D8:  BRA    00DE
00DA:  BCF    F8C.6
00DC:  BRA    00E0
00DE:  BSF    F8C.6
00E0:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
00E2:  BTFSC  24.3
00E4:  BRA    00EA
00E6:  BCF    F8C.7
00E8:  BRA    00EC
00EA:  BSF    F8C.7
00EC:  BCF    F95.7
....................  
....................  delay_cycles(1); 
00EE:  NOP   
....................  output_high(LCD_E); 
00F0:  BCF    F95.0
00F2:  BSF    F8C.0
....................  delay_us(2); 
00F4:  BRA    00F6
....................  output_low(LCD_E); 
00F6:  BCF    F95.0
00F8:  BCF    F8C.0
.................... } 
00FA:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
00FC:  BCF    F95.1
00FE:  BCF    F8C.1
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
0100:  MOVLW  13
0102:  MOVWF  00
0104:  DECFSZ 00,F
0106:  BRA    0104
0108:  BRA    010A
.................... #endif 
....................  
.................... if(address) 
010A:  MOVF   21,F
010C:  BZ    0114
....................    output_high(LCD_RS); 
010E:  BCF    F95.1
0110:  BSF    F8C.1
.................... else 
0112:  BRA    0118
....................    output_low(LCD_RS); 
0114:  BCF    F95.1
0116:  BCF    F8C.1
....................  
....................  delay_cycles(1); 
0118:  NOP   
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
011A:  BCF    F95.0
011C:  BCF    F8C.0
....................  
.................... lcd_send_nibble(n >> 4); 
011E:  SWAPF  22,W
0120:  MOVWF  23
0122:  MOVLW  0F
0124:  ANDWF  23,F
0126:  MOVFF  23,24
012A:  RCALL  00BE
.................... lcd_send_nibble(n & 0xf); 
012C:  MOVF   22,W
012E:  ANDLW  0F
0130:  MOVWF  23
0132:  MOVWF  24
0134:  RCALL  00BE
.................... } 
0136:  RETLW  00
....................  
.................... //---------------------------- 
....................  
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0138:  BCF    F95.1
013A:  BCF    F8C.1
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
013C:  BCF    F95.0
013E:  BCF    F8C.0
....................  
.................... delay_ms(15); 
0140:  MOVLW  0F
0142:  MOVWF  1D
0144:  RCALL  0096
....................  
.................... for(i=0 ;i < 3; i++) 
0146:  CLRF   1A
0148:  MOVF   1A,W
014A:  SUBLW  02
014C:  BNC   015E
....................    { 
....................     lcd_send_nibble(0x03); 
014E:  MOVLW  03
0150:  MOVWF  24
0152:  RCALL  00BE
....................     delay_ms(5); 
0154:  MOVLW  05
0156:  MOVWF  1D
0158:  RCALL  0096
....................    } 
015A:  INCF   1A,F
015C:  BRA    0148
....................  
.................... lcd_send_nibble(0x02); 
015E:  MOVLW  02
0160:  MOVWF  24
0162:  RCALL  00BE
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0164:  CLRF   1A
0166:  MOVF   1A,W
0168:  SUBLW  03
016A:  BNC   0184
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
016C:  CLRF   03
016E:  MOVF   1A,W
0170:  RCALL  0004
0172:  MOVWF  1B
0174:  CLRF   21
0176:  MOVWF  22
0178:  RCALL  00FC
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
017A:  MOVLW  05
017C:  MOVWF  1D
017E:  RCALL  0096
....................     #endif 
....................    } 
0180:  INCF   1A,F
0182:  BRA    0166
....................  
.................... } 
0184:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0338:  DECFSZ 1E,W
033A:  BRA    033E
033C:  BRA    0344
....................    address = lcd_line_two; 
033E:  MOVLW  40
0340:  MOVWF  1F
.................... else 
0342:  BRA    0346
....................    address=0; 
0344:  CLRF   1F
....................  
.................... address += x-1; 
0346:  MOVLW  01
0348:  SUBWF  1D,W
034A:  ADDWF  1F,F
.................... lcd_send_byte(0, 0x80 | address); 
034C:  MOVF   1F,W
034E:  IORLW  80
0350:  MOVWF  20
0352:  CLRF   21
0354:  MOVWF  22
0356:  RCALL  00FC
.................... } 
0358:  GOTO   039E (RETURN)
....................  
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
035C:  MOVF   1C,W
035E:  XORLW  0C
0360:  BZ    036C
0362:  XORLW  06
0364:  BZ    037C
0366:  XORLW  02
0368:  BZ    0388
036A:  BRA    0392
....................     case '\f': 
....................       lcd_send_byte(0,1); 
036C:  CLRF   21
036E:  MOVLW  01
0370:  MOVWF  22
0372:  RCALL  00FC
....................       delay_ms(2); 
0374:  MOVLW  02
0376:  MOVWF  1D
0378:  RCALL  0096
....................       break; 
037A:  BRA    039E
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
037C:  MOVLW  01
037E:  MOVWF  1D
0380:  MOVLW  02
0382:  MOVWF  1E
0384:  BRA    0338
....................        break; 
0386:  BRA    039E
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0388:  CLRF   21
038A:  MOVLW  10
038C:  MOVWF  22
038E:  RCALL  00FC
....................        break; 
0390:  BRA    039E
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
0392:  MOVLW  01
0394:  MOVWF  21
0396:  MOVFF  1C,22
039A:  RCALL  00FC
....................        break; 
039C:  BRA    039E
....................    } 
.................... } 
039E:  RETLW  00
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
....................  
.................... //3x4 tuþ takýmý 
.................... #define sat1   pin_c0  
.................... #define sat2   pin_c1  
.................... #define sat3   pin_c2 
....................  
.................... #define sat4   pin_c3  
.................... #define sut1   pin_c4 
.................... #define sut2   pin_c5  
.................... #define sut3   pin_c6  
....................  
.................... // ýsýtýcý ve soðutucu 
.................... #define isitici   pin_b0  
.................... #define sogutucu  pin_b1 
....................  
.................... //sht11 algýlayýcý             
.................... #define sht_data_pin   PIN_b7//(Data pin veya input) 
.................... #define sht_clk_pin    PIN_b6 
....................  
.................... float temp=0,humid=0,sicaklik=0,nem=0; 
.................... int i=1, negatif=0, flag=0, derece=25, tus=99, pres = 99; 
....................                      
.................... //fonksiyonlar 
.................... int keypad_oku() // Fonksiyon ismi 
.................... {    
.................... output_c(0x00); // D portu çýkýþý sýfýrlanýyor 
*
0206:  CLRF   F94
0208:  CLRF   F8B
....................  
....................    output_high(sat1);  
020A:  BCF    F94.0
020C:  BSF    F8B.0
....................       if (input(sut1))   
020E:  BSF    F94.4
0210:  BTFSS  F82.4
0212:  BRA    0224
....................          { delay_ms(20); tus=1;output_low(sat1);} 
0214:  MOVLW  14
0216:  MOVWF  1D
0218:  RCALL  0096
021A:  MOVLW  01
021C:  MOVWF  18
021E:  BCF    F94.0
0220:  BCF    F8B.0
....................       else if (input(sut2))    
0222:  BRA    0254
0224:  BSF    F94.5
0226:  BTFSS  F82.5
0228:  BRA    023A
....................          { delay_ms(20); tus=2;output_low(sat1);} 
022A:  MOVLW  14
022C:  MOVWF  1D
022E:  RCALL  0096
0230:  MOVLW  02
0232:  MOVWF  18
0234:  BCF    F94.0
0236:  BCF    F8B.0
....................       else if (input(sut3)) 
0238:  BRA    0254
023A:  BSF    F94.6
023C:  BTFSS  F82.6
023E:  BRA    0250
....................          { delay_ms(20); tus=3;output_low(sat1);} 
0240:  MOVLW  14
0242:  MOVWF  1D
0244:  RCALL  0096
0246:  MOVLW  03
0248:  MOVWF  18
024A:  BCF    F94.0
024C:  BCF    F8B.0
....................       else 
024E:  BRA    0254
....................         output_low(sat1); 
0250:  BCF    F94.0
0252:  BCF    F8B.0
....................     
....................    output_high(sat2); 
0254:  BCF    F94.1
0256:  BSF    F8B.1
....................       if (input(sut1))   
0258:  BSF    F94.4
025A:  BTFSS  F82.4
025C:  BRA    026E
....................          { delay_ms(20); tus=4;output_low(sat2);} 
025E:  MOVLW  14
0260:  MOVWF  1D
0262:  RCALL  0096
0264:  MOVLW  04
0266:  MOVWF  18
0268:  BCF    F94.1
026A:  BCF    F8B.1
....................       else if (input(sut2))  
026C:  BRA    029E
026E:  BSF    F94.5
0270:  BTFSS  F82.5
0272:  BRA    0284
....................          { delay_ms(20); tus=5;output_low(sat2);} 
0274:  MOVLW  14
0276:  MOVWF  1D
0278:  RCALL  0096
027A:  MOVLW  05
027C:  MOVWF  18
027E:  BCF    F94.1
0280:  BCF    F8B.1
....................       else if (input(sut3))   
0282:  BRA    029E
0284:  BSF    F94.6
0286:  BTFSS  F82.6
0288:  BRA    029A
....................          { delay_ms(20); tus=6;output_low(sat2);} 
028A:  MOVLW  14
028C:  MOVWF  1D
028E:  RCALL  0096
0290:  MOVLW  06
0292:  MOVWF  18
0294:  BCF    F94.1
0296:  BCF    F8B.1
....................       else 
0298:  BRA    029E
....................         output_low(sat2);  
029A:  BCF    F94.1
029C:  BCF    F8B.1
....................  
....................     output_high(sat3);  
029E:  BCF    F94.2
02A0:  BSF    F8B.2
....................       if (input(sut1))    
02A2:  BSF    F94.4
02A4:  BTFSS  F82.4
02A6:  BRA    02B8
....................          { delay_ms(20); tus=7;output_low(sat3);} 
02A8:  MOVLW  14
02AA:  MOVWF  1D
02AC:  RCALL  0096
02AE:  MOVLW  07
02B0:  MOVWF  18
02B2:  BCF    F94.2
02B4:  BCF    F8B.2
....................       else if (input(sut2))  
02B6:  BRA    02E8
02B8:  BSF    F94.5
02BA:  BTFSS  F82.5
02BC:  BRA    02CE
....................          { delay_ms(20); tus=8;output_low(sat3);} 
02BE:  MOVLW  14
02C0:  MOVWF  1D
02C2:  RCALL  0096
02C4:  MOVLW  08
02C6:  MOVWF  18
02C8:  BCF    F94.2
02CA:  BCF    F8B.2
....................       else if (input(sut3))   
02CC:  BRA    02E8
02CE:  BSF    F94.6
02D0:  BTFSS  F82.6
02D2:  BRA    02E4
....................          { delay_ms(20); tus=9;output_low(sat3);} 
02D4:  MOVLW  14
02D6:  MOVWF  1D
02D8:  RCALL  0096
02DA:  MOVLW  09
02DC:  MOVWF  18
02DE:  BCF    F94.2
02E0:  BCF    F8B.2
....................       else 
02E2:  BRA    02E8
....................         output_low(sat3);  
02E4:  BCF    F94.2
02E6:  BCF    F8B.2
....................     
....................   output_high(sat4); 
02E8:  BCF    F94.3
02EA:  BSF    F8B.3
....................       if (input(sut1))   
02EC:  BSF    F94.4
02EE:  BTFSS  F82.4
02F0:  BRA    0302
....................          { delay_ms(20); tus=10;output_low(sat4);} 
02F2:  MOVLW  14
02F4:  MOVWF  1D
02F6:  RCALL  0096
02F8:  MOVLW  0A
02FA:  MOVWF  18
02FC:  BCF    F94.3
02FE:  BCF    F8B.3
....................       else if (input(sut2))    
0300:  BRA    0330
0302:  BSF    F94.5
0304:  BTFSS  F82.5
0306:  BRA    0316
....................          { delay_ms(20); tus=0;output_low(sat4);} 
0308:  MOVLW  14
030A:  MOVWF  1D
030C:  RCALL  0096
030E:  CLRF   18
0310:  BCF    F94.3
0312:  BCF    F8B.3
....................       else if (input(sut3))  
0314:  BRA    0330
0316:  BSF    F94.6
0318:  BTFSS  F82.6
031A:  BRA    032C
....................          { delay_ms(20); tus=19;output_low(sat4);} 
031C:  MOVLW  14
031E:  MOVWF  1D
0320:  RCALL  0096
0322:  MOVLW  13
0324:  MOVWF  18
0326:  BCF    F94.3
0328:  BCF    F8B.3
....................       else 
032A:  BRA    0330
....................         output_low(sat4); 
032C:  BCF    F94.3
032E:  BCF    F8B.3
....................  
....................    return tus;  
0330:  MOVFF  18,01
.................... } 
0334:  GOTO   045E (RETURN)
....................  
.................... void allkeypadlow() 
.................... { 
....................    output_low(sat1); 
*
01E4:  BCF    F94.0
01E6:  BCF    F8B.0
....................    output_low(sat2); 
01E8:  BCF    F94.1
01EA:  BCF    F8B.1
....................    output_low(sat3); 
01EC:  BCF    F94.2
01EE:  BCF    F8B.2
....................    output_low(sat4); 
01F0:  BCF    F94.3
01F2:  BCF    F8B.3
....................    output_low(sut1); 
01F4:  BCF    F94.4
01F6:  BCF    F8B.4
....................    output_low(sut2); 
01F8:  BCF    F94.5
01FA:  BCF    F8B.5
....................    output_low(sut3); 
01FC:  BCF    F94.6
01FE:  BCF    F8B.6
....................    tus=99; 
0200:  MOVLW  63
0202:  MOVWF  18
.................... } 
0204:  RETLW  00
....................  
....................  
.................... // ana program 
.................... void main() 
.................... { 
*
03C0:  CLRF   FF8
03C2:  BCF    FD0.7
03C4:  CLRF   FEA
03C6:  CLRF   FE9
03C8:  CLRF   07
03CA:  CLRF   06
03CC:  CLRF   05
03CE:  CLRF   04
03D0:  CLRF   0B
03D2:  CLRF   0A
03D4:  CLRF   09
03D6:  CLRF   08
03D8:  CLRF   0F
03DA:  CLRF   0E
03DC:  CLRF   0D
03DE:  CLRF   0C
03E0:  CLRF   13
03E2:  CLRF   12
03E4:  CLRF   11
03E6:  CLRF   10
03E8:  MOVLW  01
03EA:  MOVWF  14
03EC:  CLRF   15
03EE:  CLRF   16
03F0:  MOVLW  19
03F2:  MOVWF  17
03F4:  MOVLW  63
03F6:  MOVWF  18
03F8:  MOVWF  19
03FA:  BSF    FC1.0
03FC:  BSF    FC1.1
03FE:  BSF    FC1.2
0400:  BCF    FC1.3
....................    setup_adc_ports(NO_ANALOGS); 
0402:  BSF    FC1.0
0404:  BSF    FC1.1
0406:  BSF    FC1.2
0408:  BCF    FC1.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
040A:  BCF    FC1.6
040C:  BCF    FC2.6
040E:  BCF    FC2.7
0410:  BCF    FC1.7
0412:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0414:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0416:  BCF    FC6.5
0418:  BCF    F94.5
041A:  BSF    F94.4
041C:  BCF    F94.3
041E:  MOVLW  01
0420:  MOVWF  FC6
0422:  MOVLW  00
0424:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0426:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0428:  MOVLW  80
042A:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
042C:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
042E:  MOVLW  00
0430:  MOVWF  FCA
0432:  MOVLW  00
0434:  MOVWF  FCB
....................    setup_ccp1(CCP_OFF); 
0436:  BSF    F94.2
0438:  CLRF   FBD
....................     
....................  
....................    lcd_init(); 
043A:  RCALL  0138
....................    delay_ms(100); 
043C:  MOVLW  64
043E:  MOVWF  1D
0440:  RCALL  0096
....................    sht_init(); 
0442:  BRA    01D8
....................    delay_ms(100); 
0444:  MOVLW  64
0446:  MOVWF  1D
0448:  RCALL  0096
....................   
....................   
....................    set_tris_a(0x00);   // A portu komple çýkýþ 
044A:  MOVLW  00
044C:  MOVWF  F92
....................    set_tris_b(0x00); 
044E:  MOVWF  F93
....................    set_tris_c(0x0f);    
0450:  MOVLW  0F
0452:  MOVWF  F94
....................    set_tris_d(0x00);    
0454:  MOVLW  00
0456:  MOVWF  F95
....................  
....................    lcd_init();   // LCD hazýrlanýyor 
0458:  RCALL  0138
....................  
....................    while(1) 
....................    {                         
....................       allkeypadlow(); 
045A:  RCALL  01E4
....................       keypad_oku(); 
045C:  BRA    0206
....................       pres = tus; 
045E:  MOVFF  18,19
....................       allkeypadlow(); 
0462:  RCALL  01E4
....................        
....................       if(pres == 10) 
0464:  MOVF   19,W
0466:  SUBLW  0A
0468:  BNZ   048C
....................       { 
....................           flag = 1;              
046A:  MOVLW  01
046C:  MOVWF  16
....................         output_high(sogutucu);    
046E:  BCF    F93.1
0470:  BSF    F8A.1
....................           printf(lcd_putc,"yildiz"); 
0472:  MOVLW  18
0474:  MOVWF  FF6
0476:  MOVLW  00
0478:  MOVWF  FF7
047A:  RCALL  03A0
....................           delay_ms(2000); 
047C:  MOVLW  08
047E:  MOVWF  1A
0480:  MOVLW  FA
0482:  MOVWF  1D
0484:  RCALL  0096
0486:  DECFSZ 1A,F
0488:  BRA    0480
....................       } 
....................       else if(pres == 19) 
048A:  BRA    065E
048C:  MOVF   19,W
048E:  SUBLW  13
0490:  BNZ   04B4
....................       { 
....................           flag = 1;              
0492:  MOVLW  01
0494:  MOVWF  16
....................        output_high(sogutucu);    
0496:  BCF    F93.1
0498:  BSF    F8A.1
....................           printf(lcd_putc,"kare");   
049A:  MOVLW  20
049C:  MOVWF  FF6
049E:  MOVLW  00
04A0:  MOVWF  FF7
04A2:  RCALL  03A0
....................           delay_ms(2000); 
04A4:  MOVLW  08
04A6:  MOVWF  1A
04A8:  MOVLW  FA
04AA:  MOVWF  1D
04AC:  RCALL  0096
04AE:  DECFSZ 1A,F
04B0:  BRA    04A8
....................       }     
....................        
....................       else if(pres == 1) 
04B2:  BRA    065E
04B4:  DECFSZ 19,W
04B6:  BRA    04DA
....................       { 
....................           flag = 1;          
04B8:  MOVLW  01
04BA:  MOVWF  16
....................        output_high(sogutucu);        
04BC:  BCF    F93.1
04BE:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 1");   
04C0:  MOVLW  26
04C2:  MOVWF  FF6
04C4:  MOVLW  00
04C6:  MOVWF  FF7
04C8:  RCALL  03A0
....................           delay_ms(2000); 
04CA:  MOVLW  08
04CC:  MOVWF  1A
04CE:  MOVLW  FA
04D0:  MOVWF  1D
04D2:  RCALL  0096
04D4:  DECFSZ 1A,F
04D6:  BRA    04CE
....................       }     
....................       else if(pres == 2) 
04D8:  BRA    065E
04DA:  MOVF   19,W
04DC:  SUBLW  02
04DE:  BNZ   0502
....................       { 
....................           flag = 1;     
04E0:  MOVLW  01
04E2:  MOVWF  16
....................        output_high(sogutucu);             
04E4:  BCF    F93.1
04E6:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 2");     
04E8:  MOVLW  30
04EA:  MOVWF  FF6
04EC:  MOVLW  00
04EE:  MOVWF  FF7
04F0:  RCALL  03A0
....................           delay_ms(2000); 
04F2:  MOVLW  08
04F4:  MOVWF  1A
04F6:  MOVLW  FA
04F8:  MOVWF  1D
04FA:  RCALL  0096
04FC:  DECFSZ 1A,F
04FE:  BRA    04F6
....................       }     
....................       else if(pres == 3) 
0500:  BRA    065E
0502:  MOVF   19,W
0504:  SUBLW  03
0506:  BNZ   052A
....................       { 
....................           flag = 1;      
0508:  MOVLW  01
050A:  MOVWF  16
....................        output_high(sogutucu);            
050C:  BCF    F93.1
050E:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 3");     
0510:  MOVLW  3A
0512:  MOVWF  FF6
0514:  MOVLW  00
0516:  MOVWF  FF7
0518:  RCALL  03A0
....................           delay_ms(2000); 
051A:  MOVLW  08
051C:  MOVWF  1A
051E:  MOVLW  FA
0520:  MOVWF  1D
0522:  RCALL  0096
0524:  DECFSZ 1A,F
0526:  BRA    051E
....................       }     
....................       else if(pres == 4) 
0528:  BRA    065E
052A:  MOVF   19,W
052C:  SUBLW  04
052E:  BNZ   0552
....................       { 
....................           flag = 1;           
0530:  MOVLW  01
0532:  MOVWF  16
....................        output_high(sogutucu);       
0534:  BCF    F93.1
0536:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 4");    
0538:  MOVLW  44
053A:  MOVWF  FF6
053C:  MOVLW  00
053E:  MOVWF  FF7
0540:  RCALL  03A0
....................           delay_ms(2000); 
0542:  MOVLW  08
0544:  MOVWF  1A
0546:  MOVLW  FA
0548:  MOVWF  1D
054A:  RCALL  0096
054C:  DECFSZ 1A,F
054E:  BRA    0546
....................       }     
....................       else if(pres == 5) 
0550:  BRA    065E
0552:  MOVF   19,W
0554:  SUBLW  05
0556:  BNZ   057A
....................       { 
....................           flag = 1;           
0558:  MOVLW  01
055A:  MOVWF  16
....................        output_high(sogutucu);       
055C:  BCF    F93.1
055E:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 5");  
0560:  MOVLW  4E
0562:  MOVWF  FF6
0564:  MOVLW  00
0566:  MOVWF  FF7
0568:  RCALL  03A0
....................           delay_ms(2000); 
056A:  MOVLW  08
056C:  MOVWF  1A
056E:  MOVLW  FA
0570:  MOVWF  1D
0572:  RCALL  0096
0574:  DECFSZ 1A,F
0576:  BRA    056E
....................       }     
....................       else if(pres == 6) 
0578:  BRA    065E
057A:  MOVF   19,W
057C:  SUBLW  06
057E:  BNZ   05A2
....................       { 
....................           flag = 1;              
0580:  MOVLW  01
0582:  MOVWF  16
....................        output_high(sogutucu);    
0584:  BCF    F93.1
0586:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 6");   
0588:  MOVLW  58
058A:  MOVWF  FF6
058C:  MOVLW  00
058E:  MOVWF  FF7
0590:  RCALL  03A0
....................           delay_ms(2000); 
0592:  MOVLW  08
0594:  MOVWF  1A
0596:  MOVLW  FA
0598:  MOVWF  1D
059A:  RCALL  0096
059C:  DECFSZ 1A,F
059E:  BRA    0596
....................       }     
....................       else if(pres == 7) 
05A0:  BRA    065E
05A2:  MOVF   19,W
05A4:  SUBLW  07
05A6:  BNZ   05CA
....................       { 
....................           flag = 1;             
05A8:  MOVLW  01
05AA:  MOVWF  16
....................        output_high(sogutucu);     
05AC:  BCF    F93.1
05AE:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 7");   
05B0:  MOVLW  62
05B2:  MOVWF  FF6
05B4:  MOVLW  00
05B6:  MOVWF  FF7
05B8:  RCALL  03A0
....................           delay_ms(2000); 
05BA:  MOVLW  08
05BC:  MOVWF  1A
05BE:  MOVLW  FA
05C0:  MOVWF  1D
05C2:  RCALL  0096
05C4:  DECFSZ 1A,F
05C6:  BRA    05BE
....................       } 
....................       else if(pres == 8) 
05C8:  BRA    065E
05CA:  MOVF   19,W
05CC:  SUBLW  08
05CE:  BNZ   05F2
....................       { 
....................           flag = 1;          
05D0:  MOVLW  01
05D2:  MOVWF  16
....................        output_high(sogutucu);        
05D4:  BCF    F93.1
05D6:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 8");   
05D8:  MOVLW  6C
05DA:  MOVWF  FF6
05DC:  MOVLW  00
05DE:  MOVWF  FF7
05E0:  RCALL  03A0
....................           delay_ms(2000); 
05E2:  MOVLW  08
05E4:  MOVWF  1A
05E6:  MOVLW  FA
05E8:  MOVWF  1D
05EA:  RCALL  0096
05EC:  DECFSZ 1A,F
05EE:  BRA    05E6
....................       }     
....................       else if(pres == 9) 
05F0:  BRA    065E
05F2:  MOVF   19,W
05F4:  SUBLW  09
05F6:  BNZ   061A
....................       { 
....................           flag = 1;              
05F8:  MOVLW  01
05FA:  MOVWF  16
....................        output_high(sogutucu);    
05FC:  BCF    F93.1
05FE:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 9"); 
0600:  MOVLW  76
0602:  MOVWF  FF6
0604:  MOVLW  00
0606:  MOVWF  FF7
0608:  RCALL  03A0
....................           delay_ms(2000); 
060A:  MOVLW  08
060C:  MOVWF  1A
060E:  MOVLW  FA
0610:  MOVWF  1D
0612:  RCALL  0096
0614:  DECFSZ 1A,F
0616:  BRA    060E
....................       }     
....................       else if(pres == 0) 
0618:  BRA    065E
061A:  MOVF   19,F
061C:  BNZ   0640
....................       { 
....................           flag = 1;       
061E:  MOVLW  01
0620:  MOVWF  16
....................        output_high(sogutucu);           
0622:  BCF    F93.1
0624:  BSF    F8A.1
....................           printf(lcd_putc,"basilan 0");    
0626:  MOVLW  80
0628:  MOVWF  FF6
062A:  MOVLW  00
062C:  MOVWF  FF7
062E:  RCALL  03A0
....................           delay_ms(2000); 
0630:  MOVLW  08
0632:  MOVWF  1A
0634:  MOVLW  FA
0636:  MOVWF  1D
0638:  RCALL  0096
063A:  DECFSZ 1A,F
063C:  BRA    0634
....................       }     
....................       else 
063E:  BRA    065E
....................       { 
....................        
....................           printf(lcd_putc,"\f"); 
0640:  MOVLW  0C
0642:  MOVWF  1C
0644:  RCALL  035C
....................           printf(lcd_putc,"deneme tus");     
0646:  MOVLW  8A
0648:  MOVWF  FF6
064A:  MOVLW  00
064C:  MOVWF  FF7
064E:  RCALL  03A0
....................           delay_ms(1000);        
0650:  MOVLW  04
0652:  MOVWF  1A
0654:  MOVLW  FA
0656:  MOVWF  1D
0658:  RCALL  0096
065A:  DECFSZ 1A,F
065C:  BRA    0654
....................       }             
....................           printf(lcd_putc,"\f");   
065E:  MOVLW  0C
0660:  MOVWF  1C
0662:  RCALL  035C
....................        
....................    } 
0664:  BRA    045A
....................  
.................... } 
....................  
....................  
0666:  SLEEP 

Configuration Fuses:
   Word  1: 2100   XT NOOSCSEN
   Word  2: 0E0D   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0080   NOSTVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
