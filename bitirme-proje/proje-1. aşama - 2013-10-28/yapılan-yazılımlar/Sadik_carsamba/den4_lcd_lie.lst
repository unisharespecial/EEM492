CCS PCM C Compiler, Version 4.106, 18916               06-Oca-14 17:05

               Filename: D:\on\Yandex\baskent-paylaþým\bitirme-proje-sdk\proje-1. aþama - 2013-10-28\yapýlan-yazýlýmlar\Sadik_carsamba\den4_lcd_lie.lst

               ROM used: 455 words (6%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         19 (5%) worst case
               Stack:    4 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   168
0003:  NOP
.................... #include "D:\on\Yandex\baskent-paylaþým\bitirme-proje-sdk\proje-1. aþama - 2013-10-28\yapýlan-yazýlýmlar\Sadik_carsamba\den4_lcd_lie.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
....................  
....................  
.................... #fuses HS,NOWDT,NOPROTECT 
.................... #use delay(clock=20M) 
*
0019:  MOVLW  25
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02C
001F:  MOVLW  06
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  7B
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 00,F
002B:  GOTO   01F
002C:  RETURN
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c  
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D0  
.................... #define LCD_DB5   PIN_D1  
.................... #define LCD_DB6   PIN_D2  
.................... #define LCD_DB7   PIN_D3  
....................  
.................... #define LCD_E     PIN_A1  
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
002D:  BTFSC  2C.0
002E:  GOTO   031
002F:  BCF    08.0
0030:  GOTO   032
0031:  BSF    08.0
0032:  BSF    03.5
0033:  BCF    08.0
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0034:  BCF    03.5
0035:  BTFSC  2C.1
0036:  GOTO   039
0037:  BCF    08.1
0038:  GOTO   03A
0039:  BSF    08.1
003A:  BSF    03.5
003B:  BCF    08.1
....................  output_bit(LCD_DB6, !!(nibble & 4));     
003C:  BCF    03.5
003D:  BTFSC  2C.2
003E:  GOTO   041
003F:  BCF    08.2
0040:  GOTO   042
0041:  BSF    08.2
0042:  BSF    03.5
0043:  BCF    08.2
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0044:  BCF    03.5
0045:  BTFSC  2C.3
0046:  GOTO   049
0047:  BCF    08.3
0048:  GOTO   04A
0049:  BSF    08.3
004A:  BSF    03.5
004B:  BCF    08.3
....................  
....................  delay_cycles(1);  
004C:  NOP
....................  output_high(LCD_E);  
004D:  BCF    05.1
004E:  BCF    03.5
004F:  BSF    05.1
....................  delay_us(2);  
0050:  MOVLW  03
0051:  MOVWF  77
0052:  DECFSZ 77,F
0053:  GOTO   052
....................  output_low(LCD_E);  
0054:  BSF    03.5
0055:  BCF    05.1
0056:  BCF    03.5
0057:  BCF    05.1
.................... }  
0058:  RETURN
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
0059:  CLRF   2D
....................      
.................... output_high(LCD_E);  
005A:  BSF    03.5
005B:  BCF    05.1
005C:  BCF    03.5
005D:  BSF    05.1
.................... delay_cycles(1);  
005E:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
005F:  BSF    03.5
0060:  BSF    08.0
0061:  BCF    03.5
0062:  BCF    2D.0
0063:  BTFSC  08.0
0064:  BSF    2D.0
.................... retval_1 = input(LCD_DB5);  
0065:  BSF    03.5
0066:  BSF    08.1
0067:  BCF    03.5
0068:  BCF    2D.1
0069:  BTFSC  08.1
006A:  BSF    2D.1
.................... retval_2 = input(LCD_DB6);  
006B:  BSF    03.5
006C:  BSF    08.2
006D:  BCF    03.5
006E:  BCF    2D.2
006F:  BTFSC  08.2
0070:  BSF    2D.2
.................... retval_3 = input(LCD_DB7);  
0071:  BSF    03.5
0072:  BSF    08.3
0073:  BCF    03.5
0074:  BCF    2D.3
0075:  BTFSC  08.3
0076:  BSF    2D.3
....................    
.................... output_low(LCD_E);  
0077:  BSF    03.5
0078:  BCF    05.1
0079:  BCF    03.5
007A:  BCF    05.1
....................      
.................... return(retval);     
007B:  MOVF   2D,W
007C:  MOVWF  78
.................... }     
007D:  RETURN
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
0082:  BSF    03.5
0083:  BCF    05.2
0084:  BCF    03.5
0085:  BSF    05.2
.................... delay_cycles(1);  
0086:  NOP
....................  
.................... high = lcd_read_nibble();  
0087:  CALL   059
0088:  MOVF   78,W
0089:  MOVWF  2C
....................  
.................... low = lcd_read_nibble();  
008A:  CALL   059
008B:  MOVF   78,W
008C:  MOVWF  2B
....................  
.................... return( (high<<4) | low);  
008D:  SWAPF  2C,W
008E:  MOVWF  77
008F:  MOVLW  F0
0090:  ANDWF  77,F
0091:  MOVF   77,W
0092:  IORWF  2B,W
0093:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
007E:  BSF    03.5
007F:  BCF    05.3
0080:  BCF    03.5
0081:  BCF    05.3
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
0094:  MOVF   78,W
0095:  MOVWF  2B
0096:  BTFSC  2B.7
0097:  GOTO   082
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
0098:  MOVF   29,F
0099:  BTFSC  03.2
009A:  GOTO   0A0
....................    output_high(LCD_RS);  
009B:  BSF    03.5
009C:  BCF    05.3
009D:  BCF    03.5
009E:  BSF    05.3
.................... else  
009F:  GOTO   0A4
....................    output_low(LCD_RS);  
00A0:  BSF    03.5
00A1:  BCF    05.3
00A2:  BCF    03.5
00A3:  BCF    05.3
....................        
....................  delay_cycles(1);  
00A4:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
00A5:  BSF    03.5
00A6:  BCF    05.2
00A7:  BCF    03.5
00A8:  BCF    05.2
.................... delay_cycles(1);  
00A9:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
00AA:  BSF    03.5
00AB:  BCF    05.1
00AC:  BCF    03.5
00AD:  BCF    05.1
....................  
.................... lcd_send_nibble(n >> 4);  
00AE:  SWAPF  2A,W
00AF:  MOVWF  2B
00B0:  MOVLW  0F
00B1:  ANDWF  2B,F
00B2:  MOVF   2B,W
00B3:  MOVWF  2C
00B4:  CALL   02D
.................... lcd_send_nibble(n & 0xf);  
00B5:  MOVF   2A,W
00B6:  ANDLW  0F
00B7:  MOVWF  2B
00B8:  MOVWF  2C
00B9:  CALL   02D
.................... }  
00BA:  RETURN
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
00BB:  BSF    03.5
00BC:  BCF    05.3
00BD:  BCF    03.5
00BE:  BCF    05.3
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
00BF:  BSF    03.5
00C0:  BCF    05.2
00C1:  BCF    03.5
00C2:  BCF    05.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
00C3:  BSF    03.5
00C4:  BCF    05.1
00C5:  BCF    03.5
00C6:  BCF    05.1
....................  
.................... delay_ms(15);  
00C7:  MOVLW  0F
00C8:  MOVWF  25
00C9:  CALL   019
....................  
.................... for(i=0 ;i < 3; i++)  
00CA:  CLRF   21
00CB:  MOVF   21,W
00CC:  SUBLW  02
00CD:  BTFSS  03.0
00CE:  GOTO   0D7
....................    {  
....................     lcd_send_nibble(0x03);  
00CF:  MOVLW  03
00D0:  MOVWF  2C
00D1:  CALL   02D
....................     delay_ms(5);  
00D2:  MOVLW  05
00D3:  MOVWF  25
00D4:  CALL   019
....................    }  
00D5:  INCF   21,F
00D6:  GOTO   0CB
....................  
.................... lcd_send_nibble(0x02);  
00D7:  MOVLW  02
00D8:  MOVWF  2C
00D9:  CALL   02D
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
00DA:  CLRF   21
00DB:  MOVF   21,W
00DC:  SUBLW  03
00DD:  BTFSS  03.0
00DE:  GOTO   0E8
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
00DF:  MOVF   21,W
00E0:  CALL   004
00E1:  MOVWF  22
00E2:  CLRF   29
00E3:  MOVF   22,W
00E4:  MOVWF  2A
00E5:  CALL   07E
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
00E6:  INCF   21,F
00E7:  GOTO   0DB
....................  
.................... }  
00E8:  BCF    0A.3
00E9:  BCF    0A.4
00EA:  GOTO   1B7 (RETURN)
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
0102:  DECFSZ 26,W
0103:  GOTO   105
0104:  GOTO   108
....................    address = lcd_line_two;  
0105:  MOVLW  40
0106:  MOVWF  27
.................... else  
0107:  GOTO   109
....................    address=0;  
0108:  CLRF   27
....................  
.................... address += x-1;  
0109:  MOVLW  01
010A:  SUBWF  25,W
010B:  ADDWF  27,F
.................... lcd_send_byte(0, 0x80 | address);  
010C:  MOVF   27,W
010D:  IORLW  80
010E:  MOVWF  28
010F:  CLRF   29
0110:  MOVF   28,W
0111:  MOVWF  2A
0112:  CALL   07E
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
*
00EB:  MOVF   24,W
00EC:  XORLW  0C
00ED:  BTFSC  03.2
00EE:  GOTO   0F6
00EF:  XORLW  06
00F0:  BTFSC  03.2
00F1:  GOTO   0FE
00F2:  XORLW  02
00F3:  BTFSC  03.2
00F4:  GOTO   114
00F5:  GOTO   119
....................     case '\f':  
....................       lcd_send_byte(0,1);  
00F6:  CLRF   29
00F7:  MOVLW  01
00F8:  MOVWF  2A
00F9:  CALL   07E
....................       delay_ms(2);  
00FA:  MOVLW  02
00FB:  MOVWF  25
00FC:  CALL   019
....................       break;  
00FD:  GOTO   11F
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
00FE:  MOVLW  01
00FF:  MOVWF  25
0100:  MOVLW  02
0101:  MOVWF  26
....................        break;  
*
0113:  GOTO   11F
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0114:  CLRF   29
0115:  MOVLW  10
0116:  MOVWF  2A
0117:  CALL   07E
....................        break;  
0118:  GOTO   11F
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0119:  MOVLW  01
011A:  MOVWF  29
011B:  MOVF   24,W
011C:  MOVWF  2A
011D:  CALL   07E
....................        break;  
011E:  GOTO   11F
....................    }  
.................... }  
011F:  RETURN
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
....................  
....................  
.................... void main() 
.................... { 
*
0168:  CLRF   04
0169:  BCF    03.7
016A:  MOVLW  1F
016B:  ANDWF  03,F
016C:  BSF    03.5
016D:  BSF    1F.0
016E:  BSF    1F.1
016F:  BSF    1F.2
0170:  BCF    1F.3
0171:  MOVLW  07
0172:  MOVWF  1C
....................  
....................    setup_adc_ports(NO_ANALOGS); 
*
0176:  BSF    03.5
0177:  BSF    1F.0
0178:  BSF    1F.1
0179:  BSF    1F.2
017A:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
017B:  BCF    1F.6
017C:  BCF    03.5
017D:  BCF    1F.6
017E:  BCF    1F.7
017F:  BSF    03.5
0180:  BCF    1F.7
0181:  BCF    03.5
0182:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0183:  BSF    03.5
0184:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
0185:  BCF    03.5
0186:  BCF    14.5
0187:  BCF    20.5
0188:  MOVF   20,W
0189:  BSF    03.5
018A:  MOVWF  07
018B:  BCF    03.5
018C:  BSF    20.4
018D:  MOVF   20,W
018E:  BSF    03.5
018F:  MOVWF  07
0190:  BCF    03.5
0191:  BCF    20.3
0192:  MOVF   20,W
0193:  BSF    03.5
0194:  MOVWF  07
0195:  MOVLW  01
0196:  BCF    03.5
0197:  MOVWF  14
0198:  MOVLW  00
0199:  BSF    03.5
019A:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
019B:  MOVF   01,W
019C:  ANDLW  C7
019D:  IORLW  08
019E:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
019F:  BCF    03.5
01A0:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
01A1:  MOVLW  00
01A2:  MOVWF  78
01A3:  MOVWF  12
01A4:  MOVLW  00
01A5:  BSF    03.5
01A6:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
01A7:  MOVLW  07
01A8:  MOVWF  1C
01A9:  MOVF   05,W
01AA:  MOVWF  05
01AB:  MOVLW  10
01AC:  MOVWF  77
01AD:  DECFSZ 77,F
01AE:  GOTO   1AD
01AF:  NOP
01B0:  MOVF   1C,W
01B1:  BCF    03.5
01B2:  BCF    0D.6
....................    setup_vref(FALSE); 
01B3:  BSF    03.5
01B4:  CLRF   1D
....................    lcd_init(); 
01B5:  BCF    03.5
01B6:  GOTO   0BB
....................    while(1){ 
....................    printf(lcd_putc,"\fSicaklik: 22.4\nNem: 28.7"); 
01B7:  MOVLW  0C
01B8:  BSF    03.6
01B9:  MOVWF  0D
01BA:  MOVLW  00
01BB:  MOVWF  0F
01BC:  BCF    03.6
01BD:  GOTO   120
....................    delay_ms(14000); 
01BE:  MOVLW  38
01BF:  MOVWF  21
01C0:  MOVLW  FA
01C1:  MOVWF  25
01C2:  CALL   019
01C3:  DECFSZ 21,F
01C4:  GOTO   1C0
....................    } 
01C5:  GOTO   1B7
....................  
....................    //TODO: User Code 
....................  
.................... } 
01C6:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
