CCS PCH C Compiler, Version 4.106, 18916               10-May-14 13:20

               Filename: C:\Users\Akýn\Desktop\pid-isi-nem-kontrol-pic18f4520\tam-isi-nem.lst

               ROM used: 6204 bytes (19%)
                         Largest free fragment is 26564
               RAM used: 38 (2%) at main() level
                         90 (6%) worst case
               Stack:    5 locations

*
0000:  GOTO   0E90
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES XT                       //Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOOSCSEN                 //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOSTVREN                 //Stack full/underflow will not cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
.................... #use delay(clock=4000000) 
*
00A2:  CLRF   FEA
00A4:  MOVLW  2C
00A6:  MOVWF  FE9
00A8:  MOVF   FEF,W
00AA:  BZ    00C8
00AC:  MOVLW  01
00AE:  MOVWF  01
00B0:  CLRF   00
00B2:  DECFSZ 00,F
00B4:  BRA    00B2
00B6:  DECFSZ 01,F
00B8:  BRA    00B0
00BA:  MOVLW  4A
00BC:  MOVWF  00
00BE:  DECFSZ 00,F
00C0:  BRA    00BE
00C2:  BRA    00C4
00C4:  DECFSZ FEF,F
00C6:  BRA    00AC
00C8:  RETLW  00
....................  
.................... #include "SHT11.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                           // 
.................... // Driver file for SHT75 Temperature & Humidity Sensor                       // 
.................... //                                                                           // 
.................... // ***** To initialise SHT75 sensor upon power up *****                      // 
.................... //                                                                           // 
.................... // Function : sht_init()                                                     // 
.................... // Return   : none                                                           // 
.................... //                                                                           // 
.................... //                                                                           // 
.................... // ***** To measure and caluculate SHT75 temp & real RH *****                // 
.................... //                                                                           // 
.................... // Function : sht_rd (temp, truehumid)                                       // 
.................... // Return   : temperature & true humidity in float values                    // 
.................... //                                                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................   
.................... #define sht_data_pin   PIN_B7 
.................... #define sht_clk_pin    PIN_B6 
....................  
.................... //***** Function to alert SHT75 ***** 
....................   
.................... void comstart (void) 
.................... { 
....................  output_float(sht_data_pin);  //data high 
*
0192:  BSF    F93.7
....................  output_low(sht_clk_pin);  //clk low 
0194:  BCF    F93.6
0196:  BCF    F8A.6
....................  delay_us(1); 
0198:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
019A:  BCF    F93.6
019C:  BSF    F8A.6
....................  delay_us(1); 
019E:  NOP   
....................  output_low(sht_data_pin); //data low 
01A0:  BCF    F93.7
01A2:  BCF    F8A.7
....................  delay_us(1); 
01A4:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
01A6:  BCF    F93.6
01A8:  BCF    F8A.6
....................  delay_us(2); 
01AA:  BRA    01AC
....................  output_high(sht_clk_pin);  //clk high 
01AC:  BCF    F93.6
01AE:  BSF    F8A.6
....................  delay_us(1); 
01B0:  NOP   
....................  output_float(sht_data_pin);  //data high 
01B2:  BSF    F93.7
....................  delay_us(1); 
01B4:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
01B6:  BCF    F93.6
01B8:  BCF    F8A.6
.................... } 
01BA:  RETLW  00
....................   
.................... //***** Function to write data to SHT75 ***** 
....................   
.................... int1 comwrite (int8 iobyte) 
.................... { 
*
0988:  MOVLW  80
098A:  MOVWF  33
....................  int8 i, mask = 0x80; 
....................  int1 ack; 
....................   
....................  //Shift out command 
....................  delay_us(4); 
098C:  BRA    098E
098E:  BRA    0990
....................  for(i=0; i<8; i++) 
0990:  CLRF   32
0992:  MOVF   32,W
0994:  SUBLW  07
0996:  BNC   09BA
....................   { 
....................    output_low(sht_clk_pin);                          //clk low 
0998:  BCF    F93.6
099A:  BCF    F8A.6
....................    if((iobyte & mask) > 0) output_float(sht_data_pin);  //data high if MSB high 
099C:  MOVF   31,W
099E:  ANDWF  33,W
09A0:  BZ    09A6
09A2:  BSF    F93.7
....................    else output_low(sht_data_pin);                    //data low if MSB low 
09A4:  BRA    09AA
09A6:  BCF    F93.7
09A8:  BCF    F8A.7
....................    delay_us(1); 
09AA:  NOP   
....................    output_high(sht_clk_pin);                          //clk high 
09AC:  BCF    F93.6
09AE:  BSF    F8A.6
....................    delay_us(1); 
09B0:  NOP   
....................    mask = mask >> 1;                                    //shift to next bit 
09B2:  BCF    FD8.0
09B4:  RRCF   33,F
....................   } 
09B6:  INCF   32,F
09B8:  BRA    0992
....................   
....................  //Shift in ack 
....................  output_low(sht_clk_pin);  //clk low 
09BA:  BCF    F93.6
09BC:  BCF    F8A.6
....................  delay_us(1); 
09BE:  NOP   
....................  ack = input(sht_data_pin);   //get ack bit 
09C0:  BSF    F93.7
09C2:  BCF    34.0
09C4:  BTFSC  F81.7
09C6:  BSF    34.0
....................  output_high(sht_clk_pin);  //clk high 
09C8:  BCF    F93.6
09CA:  BSF    F8A.6
....................  delay_us(1); 
09CC:  NOP   
....................  output_low(sht_clk_pin);  //clk low 
09CE:  BCF    F93.6
09D0:  BCF    F8A.6
....................  return(ack); 
09D2:  MOVLW  00
09D4:  BTFSC  34.0
09D6:  MOVLW  01
09D8:  MOVWF  01
.................... } 
09DA:  RETLW  00
....................   
.................... //***** Function to read data from SHT75 ***** 
....................   
.................... int16 comread (void) 
.................... { 
*
0A10:  CLRF   33
0A12:  CLRF   32
....................  int8 i; 
....................  int16 iobyte = 0; 
....................  const int16 mask0 = 0x0000; 
....................  const int16 mask1 = 0x0001; 
....................   
....................  //shift in MSB data 
....................  for(i=0; i<8; i++) 
0A14:  CLRF   31
0A16:  MOVF   31,W
0A18:  SUBLW  07
0A1A:  BNC   0A3C
....................   { 
....................    iobyte = iobyte << 1; 
0A1C:  BCF    FD8.0
0A1E:  RLCF   32,F
0A20:  RLCF   33,F
....................    output_high(sht_clk_pin);                //clk high 
0A22:  BCF    F93.6
0A24:  BSF    F8A.6
....................    delay_us(1); 
0A26:  NOP   
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
0A28:  BSF    F93.7
0A2A:  BTFSS  F81.7
0A2C:  BRA    0A32
0A2E:  BSF    32.0
....................    else iobyte |= mask0; 
0A30:  BRA    0A32
....................    output_low(sht_clk_pin);                //clk low 
0A32:  BCF    F93.6
0A34:  BCF    F8A.6
....................    delay_us(1); 
0A36:  NOP   
....................   } 
0A38:  INCF   31,F
0A3A:  BRA    0A16
....................   
....................  //send ack 0 bit 
....................  output_low(sht_data_pin); //data low 
0A3C:  BCF    F93.7
0A3E:  BCF    F8A.7
....................  delay_us(1); 
0A40:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
0A42:  BCF    F93.6
0A44:  BSF    F8A.6
....................  delay_us(2); 
0A46:  BRA    0A48
....................  output_low(sht_clk_pin);  //clk low 
0A48:  BCF    F93.6
0A4A:  BCF    F8A.6
....................  delay_us(1); 
0A4C:  NOP   
....................  output_float(sht_data_pin);  //data high 
0A4E:  BSF    F93.7
....................   
....................  //shift in LSB data 
....................  for(i=0; i<8; i++) 
0A50:  CLRF   31
0A52:  MOVF   31,W
0A54:  SUBLW  07
0A56:  BNC   0A78
....................   { 
....................    iobyte = iobyte << 1; 
0A58:  BCF    FD8.0
0A5A:  RLCF   32,F
0A5C:  RLCF   33,F
....................    output_high(sht_clk_pin);                //clk high 
0A5E:  BCF    F93.6
0A60:  BSF    F8A.6
....................    delay_us(1); 
0A62:  NOP   
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit 
0A64:  BSF    F93.7
0A66:  BTFSS  F81.7
0A68:  BRA    0A6E
0A6A:  BSF    32.0
....................    else iobyte |= mask0; 
0A6C:  BRA    0A6E
....................    output_low(sht_clk_pin);                //clk low 
0A6E:  BCF    F93.6
0A70:  BCF    F8A.6
....................    delay_us(1); 
0A72:  NOP   
....................   } 
0A74:  INCF   31,F
0A76:  BRA    0A52
....................   
....................  //send ack 1 bit 
....................  output_float(sht_data_pin);  //data high 
0A78:  BSF    F93.7
....................  delay_us(1); 
0A7A:  NOP   
....................  output_high(sht_clk_pin);  //clk high 
0A7C:  BCF    F93.6
0A7E:  BSF    F8A.6
....................  delay_us(2); 
0A80:  BRA    0A82
....................  output_low(sht_clk_pin);  //clk low 
0A82:  BCF    F93.6
0A84:  BCF    F8A.6
....................   
....................  return(iobyte); 
0A86:  MOVFF  32,01
0A8A:  MOVFF  33,02
.................... } 
0A8E:  RETLW  00
....................   
.................... //***** Function to wait for SHT75 reading ***** 
....................   
.................... void comwait (void) 
.................... { 
....................  int16 sht_delay; 
....................   
....................  output_float(sht_data_pin);                     //data high 
*
09DC:  BSF    F93.7
....................  output_low(sht_clk_pin);                     //clk low 
09DE:  BCF    F93.6
09E0:  BCF    F8A.6
....................  delay_us(1); 
09E2:  NOP   
....................  for(sht_delay=0; sht_delay<30000; sht_delay++)  // wait for max 300ms 
09E4:  CLRF   32
09E6:  CLRF   31
09E8:  MOVF   32,W
09EA:  SUBLW  75
09EC:  BNC   0A0E
09EE:  BNZ   09F6
09F0:  MOVF   31,W
09F2:  SUBLW  2F
09F4:  BNC   0A0E
....................   { 
....................    if (!input(sht_data_pin)) break;              //if sht_data_pin low, SHT75 ready 
09F6:  BSF    F93.7
09F8:  BTFSC  F81.7
09FA:  BRA    09FE
09FC:  BRA    0A0E
....................    delay_us(10); 
09FE:  MOVLW  03
0A00:  MOVWF  00
0A02:  DECFSZ 00,F
0A04:  BRA    0A02
....................   } 
0A06:  INCF   31,F
0A08:  BTFSC  FD8.2
0A0A:  INCF   32,F
0A0C:  BRA    09E8
.................... } 
0A0E:  RETLW  00
....................   
.................... //***** Function to reset SHT75 communication ***** 
....................   
.................... void comreset (void) 
.................... { 
....................  int8 i; 
....................   
....................  output_float(sht_data_pin);    //data high 
*
01BC:  BSF    F93.7
....................  output_low(sht_clk_pin);    //clk low 
01BE:  BCF    F93.6
01C0:  BCF    F8A.6
....................  delay_us(2); 
01C2:  BRA    01C4
....................  for(i=0; i<9; i++) 
01C4:  CLRF   1E
01C6:  MOVF   1E,W
01C8:  SUBLW  08
01CA:  BNC   01DC
....................   { 
....................    output_high(sht_clk_pin);  //toggle clk 9 times 
01CC:  BCF    F93.6
01CE:  BSF    F8A.6
....................    delay_us(2); 
01D0:  BRA    01D2
....................    output_low(sht_clk_pin); 
01D2:  BCF    F93.6
01D4:  BCF    F8A.6
....................    delay_us(2); 
01D6:  BRA    01D8
....................  } 
01D8:  INCF   1E,F
01DA:  BRA    01C6
....................  comstart(); 
01DC:  RCALL  0192
.................... } 
01DE:  GOTO   01E4 (RETURN)
....................   
.................... //***** Function to soft reset SHT75 ***** 
....................   
.................... void sht_soft_reset (void) 
.................... { 
....................  comreset();           //SHT75 communication reset 
....................  comwrite(0x1e);       //send SHT75 reset command 
....................  delay_ms(15);         //pause 15 ms 
.................... } 
....................   
.................... //***** Function to measure SHT75 temperature ***** 
....................   
.................... int16 measuretemp (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();             //alert SHT75 
*
0A90:  CALL   0192
....................  ack = comwrite(0x03);   //send measure temp command and read ack status 
0A94:  MOVLW  03
0A96:  MOVWF  31
0A98:  RCALL  0988
0A9A:  BCF    2E.0
0A9C:  BTFSC  01.0
0A9E:  BSF    2E.0
....................  if(ack == 1) return; 
0AA0:  BTFSS  2E.0
0AA2:  BRA    0AA6
0AA4:  BRA    0ABA
....................  comwait();              //wait for SHT75 measurement to complete 
0AA6:  RCALL  09DC
....................  iobyte = comread();     //read SHT75 temp data 
0AA8:  RCALL  0A10
0AAA:  MOVFF  02,30
0AAE:  MOVFF  01,2F
....................  return(iobyte); 
0AB2:  MOVFF  2F,01
0AB6:  MOVFF  30,02
.................... } 
0ABA:  GOTO   123E (RETURN)
....................   
.................... //***** Function to measure SHT75 RH ***** 
....................   
.................... int16 measurehumid (void) 
.................... { 
....................  int1 ack; 
....................  int16 iobyte; 
....................   
....................  comstart();            //alert SHT75 
0ABE:  CALL   0192
....................  ack = comwrite(0x05);  //send measure RH command and read ack status 
0AC2:  MOVLW  05
0AC4:  MOVWF  31
0AC6:  RCALL  0988
0AC8:  BCF    2E.0
0ACA:  BTFSC  01.0
0ACC:  BSF    2E.0
....................  if(ack == 1) return; 
0ACE:  BTFSS  2E.0
0AD0:  BRA    0AD4
0AD2:  BRA    0AE8
....................  comwait();             //wait for SHT75 measurement to complete 
0AD4:  RCALL  09DC
....................  iobyte = comread();    //read SHT75 temp data 
0AD6:  RCALL  0A10
0AD8:  MOVFF  02,30
0ADC:  MOVFF  01,2F
....................  return(iobyte); 
0AE0:  MOVFF  2F,01
0AE4:  MOVFF  30,02
.................... } 
0AE8:  GOTO   1248 (RETURN)
....................   
.................... //***** Function to calculate SHT75 temp & RH ***** 
....................   
.................... void calculate_data (int16 temp, int16 humid, float & tc, float & rhlin, float & rhtrue) 
.................... { 
....................  float truehumid1, rh; 
....................   
....................  //calculate temperature reading 
....................  tc = ((float) temp * 0.01) - 40.0; 
*
1260:  MOVFF  2F,47
1264:  MOVFF  2E,46
1268:  CALL   04B6
126C:  MOVFF  00,3A
1270:  MOVFF  01,3B
1274:  MOVFF  02,3C
1278:  MOVFF  03,3D
127C:  MOVFF  03,51
1280:  MOVFF  02,50
1284:  MOVFF  01,4F
1288:  MOVFF  00,4E
128C:  MOVLW  0A
128E:  MOVWF  55
1290:  MOVLW  D7
1292:  MOVWF  54
1294:  MOVLW  23
1296:  MOVWF  53
1298:  MOVLW  78
129A:  MOVWF  52
129C:  CALL   0840
12A0:  MOVFF  00,3A
12A4:  MOVFF  01,3B
12A8:  MOVFF  02,3C
12AC:  MOVFF  03,3D
12B0:  BSF    FD8.1
12B2:  MOVFF  03,4D
12B6:  MOVFF  02,4C
12BA:  MOVFF  01,4B
12BE:  MOVFF  00,4A
12C2:  CLRF   51
12C4:  CLRF   50
12C6:  MOVLW  20
12C8:  MOVWF  4F
12CA:  MOVLW  84
12CC:  MOVWF  4E
12CE:  CALL   0562
12D2:  MOVFF  03,07
12D6:  MOVFF  02,06
12DA:  MOVFF  01,05
12DE:  MOVFF  00,04
....................   
....................   
....................  //calculate Real RH reading 
....................  rh = (float) humid; 
12E2:  MOVFF  31,47
12E6:  MOVFF  30,46
12EA:  CALL   04B6
12EE:  MOVFF  03,39
12F2:  MOVFF  02,38
12F6:  MOVFF  01,37
12FA:  MOVFF  00,36
....................   
....................  rhlin = (rh * 0.0405) - (rh * rh * 0.0000028) - 4.0; 
12FE:  MOVFF  39,51
1302:  MOVFF  38,50
1306:  MOVFF  37,4F
130A:  MOVFF  36,4E
130E:  MOVLW  54
1310:  MOVWF  55
1312:  MOVLW  E3
1314:  MOVWF  54
1316:  MOVLW  25
1318:  MOVWF  53
131A:  MOVLW  7A
131C:  MOVWF  52
131E:  CALL   0840
1322:  MOVFF  00,3A
1326:  MOVFF  01,3B
132A:  MOVFF  02,3C
132E:  MOVFF  03,3D
1332:  MOVFF  39,51
1336:  MOVFF  38,50
133A:  MOVFF  37,4F
133E:  MOVFF  36,4E
1342:  MOVFF  39,55
1346:  MOVFF  38,54
134A:  MOVFF  37,53
134E:  MOVFF  36,52
1352:  CALL   0840
1356:  MOVFF  00,3E
135A:  MOVFF  01,3F
135E:  MOVFF  02,40
1362:  MOVFF  03,41
1366:  MOVFF  03,51
136A:  MOVFF  02,50
136E:  MOVFF  01,4F
1372:  MOVFF  00,4E
1376:  MOVLW  A2
1378:  MOVWF  55
137A:  MOVLW  E7
137C:  MOVWF  54
137E:  MOVLW  3B
1380:  MOVWF  53
1382:  MOVLW  6C
1384:  MOVWF  52
1386:  CALL   0840
138A:  BSF    FD8.1
138C:  MOVFF  3D,4D
1390:  MOVFF  3C,4C
1394:  MOVFF  3B,4B
1398:  MOVFF  3A,4A
139C:  MOVFF  03,51
13A0:  MOVFF  02,50
13A4:  MOVFF  01,4F
13A8:  MOVFF  00,4E
13AC:  CALL   0562
13B0:  MOVFF  00,3A
13B4:  MOVFF  01,3B
13B8:  MOVFF  02,3C
13BC:  MOVFF  03,3D
13C0:  BSF    FD8.1
13C2:  MOVFF  03,4D
13C6:  MOVFF  02,4C
13CA:  MOVFF  01,4B
13CE:  MOVFF  00,4A
13D2:  CLRF   51
13D4:  CLRF   50
13D6:  CLRF   4F
13D8:  MOVLW  81
13DA:  MOVWF  4E
13DC:  CALL   0562
13E0:  MOVFF  03,25
13E4:  MOVFF  02,24
13E8:  MOVFF  01,23
13EC:  MOVFF  00,22
....................   
....................  //calculate True RH reading 
....................  rhtrue = ((tc - 25.0) * (0.01 + (0.00008 * rh))) + rhlin; 
13F0:  BSF    FD8.1
13F2:  MOVFF  07,4D
13F6:  MOVFF  06,4C
13FA:  MOVFF  05,4B
13FE:  MOVFF  04,4A
1402:  CLRF   51
1404:  CLRF   50
1406:  MOVLW  48
1408:  MOVWF  4F
140A:  MOVLW  83
140C:  MOVWF  4E
140E:  CALL   0562
1412:  MOVFF  00,3A
1416:  MOVFF  01,3B
141A:  MOVFF  02,3C
141E:  MOVFF  03,3D
1422:  MOVLW  AC
1424:  MOVWF  51
1426:  MOVLW  C5
1428:  MOVWF  50
142A:  MOVLW  27
142C:  MOVWF  4F
142E:  MOVLW  71
1430:  MOVWF  4E
1432:  MOVFF  39,55
1436:  MOVFF  38,54
143A:  MOVFF  37,53
143E:  MOVFF  36,52
1442:  CALL   0840
1446:  BCF    FD8.1
1448:  MOVLW  0A
144A:  MOVWF  4D
144C:  MOVLW  D7
144E:  MOVWF  4C
1450:  MOVLW  23
1452:  MOVWF  4B
1454:  MOVLW  78
1456:  MOVWF  4A
1458:  MOVFF  03,51
145C:  MOVFF  02,50
1460:  MOVFF  01,4F
1464:  MOVFF  00,4E
1468:  CALL   0562
146C:  MOVFF  3D,51
1470:  MOVFF  3C,50
1474:  MOVFF  3B,4F
1478:  MOVFF  3A,4E
147C:  MOVFF  03,55
1480:  MOVFF  02,54
1484:  MOVFF  01,53
1488:  MOVFF  00,52
148C:  CALL   0840
1490:  MOVFF  00,3A
1494:  MOVFF  01,3B
1498:  MOVFF  02,3C
149C:  MOVFF  03,3D
14A0:  BCF    FD8.1
14A2:  MOVFF  03,4D
14A6:  MOVFF  02,4C
14AA:  MOVFF  01,4B
14AE:  MOVFF  00,4A
14B2:  MOVFF  25,51
14B6:  MOVFF  24,50
14BA:  MOVFF  23,4F
14BE:  MOVFF  22,4E
14C2:  CALL   0562
14C6:  MOVFF  03,0B
14CA:  MOVFF  02,0A
14CE:  MOVFF  01,09
14D2:  MOVFF  00,08
.................... } 
....................   
.................... //***** Function to measure & calculate SHT75 temp & RH ***** 
....................   
.................... void sht_rd (float & temp, float & truehumid) 
.................... { 
....................  int16 restemp, reshumid; 
....................  float realhumid; 
....................  restemp = 0; truehumid = 0; 
*
1230:  CLRF   1F
1232:  CLRF   1E
1234:  CLRF   0B
1236:  CLRF   0A
1238:  CLRF   09
123A:  CLRF   08
....................   
....................  restemp = measuretemp();    //measure temp 
123C:  BRA    0A90
123E:  MOVFF  02,1F
1242:  MOVFF  01,1E
....................  reshumid = measurehumid();  //measure RH 
1246:  BRA    0ABE
1248:  MOVFF  02,21
124C:  MOVFF  01,20
.................... calculate_data (restemp, reshumid, temp, realhumid, truehumid);  //calculate temp & RH 
1250:  MOVFF  1F,2F
1254:  MOVFF  1E,2E
1258:  MOVFF  21,31
125C:  MOVFF  20,30
.................... } 
....................   
.................... //***** Function to initialise SHT75 on power-up ***** 
....................   
.................... void sht_init (void) 
.................... { 
....................  comreset();    //reset SHT75 
*
01E2:  BRA    01BC
....................  delay_ms(20);  //delay for power-up 
01E4:  MOVLW  14
01E6:  MOVWF  2C
01E8:  RCALL  00A2
.................... } 
01EA:  GOTO   0F1E (RETURN)
....................  
....................  
....................  
.................... #include "new_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
....................  
.................... #define LCD_E     PIN_D0 
.................... #define LCD_RS    PIN_D1 
.................... //#define LCD_RW    0 
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW   1 
....................  
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0x0C,//0xf,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
.................... /* 
.................... byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xC, 1,6}; 
....................  
.................... Value   Cursor  Blink 
.................... 0x0C     Off      Off 
.................... 0x0D     Off      On 
.................... 0x0E     On       Off 
.................... 0x0F     On       On 
....................  
.................... */ 
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
00CA:  BTFSC  33.0
00CC:  BRA    00D2
00CE:  BCF    F8C.4
00D0:  BRA    00D4
00D2:  BSF    F8C.4
00D4:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
00D6:  BTFSC  33.1
00D8:  BRA    00DE
00DA:  BCF    F8C.5
00DC:  BRA    00E0
00DE:  BSF    F8C.5
00E0:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
00E2:  BTFSC  33.2
00E4:  BRA    00EA
00E6:  BCF    F8C.6
00E8:  BRA    00EC
00EA:  BSF    F8C.6
00EC:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
00EE:  BTFSC  33.3
00F0:  BRA    00F6
00F2:  BCF    F8C.7
00F4:  BRA    00F8
00F6:  BSF    F8C.7
00F8:  BCF    F95.7
....................  
....................  delay_cycles(1); 
00FA:  NOP   
....................  output_high(LCD_E); 
00FC:  BCF    F95.0
00FE:  BSF    F8C.0
....................  delay_us(2); 
0100:  BRA    0102
....................  output_low(LCD_E); 
0102:  BCF    F95.0
0104:  BCF    F8C.0
.................... } 
0106:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0108:  BCF    F95.1
010A:  BCF    F8C.1
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
010C:  MOVLW  13
010E:  MOVWF  00
0110:  DECFSZ 00,F
0112:  BRA    0110
0114:  BRA    0116
.................... #endif 
....................  
.................... if(address) 
0116:  MOVF   30,F
0118:  BZ    0120
....................    output_high(LCD_RS); 
011A:  BCF    F95.1
011C:  BSF    F8C.1
.................... else 
011E:  BRA    0124
....................    output_low(LCD_RS); 
0120:  BCF    F95.1
0122:  BCF    F8C.1
....................  
....................  delay_cycles(1); 
0124:  NOP   
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0126:  BCF    F95.0
0128:  BCF    F8C.0
....................  
.................... lcd_send_nibble(n >> 4); 
012A:  SWAPF  31,W
012C:  MOVWF  32
012E:  MOVLW  0F
0130:  ANDWF  32,F
0132:  MOVFF  32,33
0136:  RCALL  00CA
.................... lcd_send_nibble(n & 0xf); 
0138:  MOVF   31,W
013A:  ANDLW  0F
013C:  MOVWF  32
013E:  MOVWF  33
0140:  RCALL  00CA
.................... } 
0142:  RETLW  00
....................  
.................... //---------------------------- 
....................  
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0144:  BCF    F95.1
0146:  BCF    F8C.1
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0148:  BCF    F95.0
014A:  BCF    F8C.0
....................  
.................... delay_ms(15); 
014C:  MOVLW  0F
014E:  MOVWF  2C
0150:  RCALL  00A2
....................  
.................... for(i=0 ;i < 3; i++) 
0152:  CLRF   1E
0154:  MOVF   1E,W
0156:  SUBLW  02
0158:  BNC   016A
....................    { 
....................     lcd_send_nibble(0x03); 
015A:  MOVLW  03
015C:  MOVWF  33
015E:  RCALL  00CA
....................     delay_ms(5); 
0160:  MOVLW  05
0162:  MOVWF  2C
0164:  RCALL  00A2
....................    } 
0166:  INCF   1E,F
0168:  BRA    0154
....................  
.................... lcd_send_nibble(0x02); 
016A:  MOVLW  02
016C:  MOVWF  33
016E:  RCALL  00CA
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0170:  CLRF   1E
0172:  MOVF   1E,W
0174:  SUBLW  03
0176:  BNC   0190
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0178:  CLRF   03
017A:  MOVF   1E,W
017C:  RCALL  0004
017E:  MOVWF  1F
0180:  CLRF   30
0182:  MOVWF  31
0184:  RCALL  0108
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
0186:  MOVLW  05
0188:  MOVWF  2C
018A:  RCALL  00A2
....................     #endif 
....................    } 
018C:  INCF   1E,F
018E:  BRA    0172
....................  
.................... } 
0190:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0340:  DECFSZ 2D,W
0342:  BRA    0346
0344:  BRA    034C
....................    address = lcd_line_two; 
0346:  MOVLW  40
0348:  MOVWF  2E
.................... else 
034A:  BRA    034E
....................    address=0; 
034C:  CLRF   2E
....................  
.................... address += x-1; 
034E:  MOVLW  01
0350:  SUBWF  2C,W
0352:  ADDWF  2E,F
.................... lcd_send_byte(0, 0x80 | address); 
0354:  MOVF   2E,W
0356:  IORLW  80
0358:  MOVWF  2F
035A:  CLRF   30
035C:  MOVWF  31
035E:  RCALL  0108
.................... } 
0360:  RETLW  00
....................  
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
0362:  MOVF   2B,W
0364:  XORLW  0C
0366:  BZ    0372
0368:  XORLW  06
036A:  BZ    0382
036C:  XORLW  02
036E:  BZ    038E
0370:  BRA    0398
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0372:  CLRF   30
0374:  MOVLW  01
0376:  MOVWF  31
0378:  RCALL  0108
....................       delay_ms(2); 
037A:  MOVLW  02
037C:  MOVWF  2C
037E:  RCALL  00A2
....................       break; 
0380:  BRA    03A4
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
0382:  MOVLW  01
0384:  MOVWF  2C
0386:  MOVLW  02
0388:  MOVWF  2D
038A:  RCALL  0340
....................        break; 
038C:  BRA    03A4
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
038E:  CLRF   30
0390:  MOVLW  10
0392:  MOVWF  31
0394:  RCALL  0108
....................        break; 
0396:  BRA    03A4
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
0398:  MOVLW  01
039A:  MOVWF  30
039C:  MOVFF  2B,31
03A0:  RCALL  0108
....................        break; 
03A2:  BRA    03A4
....................    } 
.................... } 
03A4:  RETLW  00
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
....................  
.................... //3x4 tuþ takýmý 
.................... #define sat1   pin_c0  
.................... #define sat2   pin_c1  
.................... #define sat3   pin_c2 
....................  
.................... #define sat4   pin_c3  
.................... #define sut1   pin_c4 
.................... #define sut2   pin_c5  
.................... #define sut3   pin_c6  
....................  
.................... // ýsýtýcý ve soðutucu 
.................... #define isitici   pin_b0  
.................... #define sogutucu  pin_b1 
....................  
.................... //sht11 algýlayýcý             
.................... #define sht_data_pin   PIN_b7//(Data pin veya input) 
.................... #define sht_clk_pin    PIN_b6 
....................  
.................... // sensor kontrol 
.................... #define ses_sensor   pin_b5  
....................  
.................... float temp=0,humid=0,sicaklik=0,nem=0; 
.................... int i=1, negatif=0, flag=0, derece=25, tus=99, pres = 99; 
....................  
.................... int anticounter=10000, counterpid=0, flagmode=0, mode=0; 
....................          
.................... //fonksiyonlar 
.................... int keypad_oku() // Fonksiyon ismi 
.................... {    
.................... output_c(0x00); // D portu çýkýþý sýfýrlanýyor 
*
0210:  CLRF   F94
0212:  CLRF   F8B
....................  
....................    output_high(sat1);  
0214:  BCF    F94.0
0216:  BSF    F8B.0
....................       if (input(sut1))   
0218:  BSF    F94.4
021A:  BTFSS  F82.4
021C:  BRA    022E
....................          { delay_ms(20); tus=1;output_low(sat1);} 
021E:  MOVLW  14
0220:  MOVWF  2C
0222:  RCALL  00A2
0224:  MOVLW  01
0226:  MOVWF  18
0228:  BCF    F94.0
022A:  BCF    F8B.0
....................       else if (input(sut2))    
022C:  BRA    025E
022E:  BSF    F94.5
0230:  BTFSS  F82.5
0232:  BRA    0244
....................          { delay_ms(20); tus=2;output_low(sat1);} 
0234:  MOVLW  14
0236:  MOVWF  2C
0238:  RCALL  00A2
023A:  MOVLW  02
023C:  MOVWF  18
023E:  BCF    F94.0
0240:  BCF    F8B.0
....................       else if (input(sut3)) 
0242:  BRA    025E
0244:  BSF    F94.6
0246:  BTFSS  F82.6
0248:  BRA    025A
....................          { delay_ms(20); tus=3;output_low(sat1);} 
024A:  MOVLW  14
024C:  MOVWF  2C
024E:  RCALL  00A2
0250:  MOVLW  03
0252:  MOVWF  18
0254:  BCF    F94.0
0256:  BCF    F8B.0
....................       else 
0258:  BRA    025E
....................         output_low(sat1); 
025A:  BCF    F94.0
025C:  BCF    F8B.0
....................     
....................    output_high(sat2); 
025E:  BCF    F94.1
0260:  BSF    F8B.1
....................       if (input(sut1))   
0262:  BSF    F94.4
0264:  BTFSS  F82.4
0266:  BRA    0278
....................          { delay_ms(20); tus=4;output_low(sat2);} 
0268:  MOVLW  14
026A:  MOVWF  2C
026C:  RCALL  00A2
026E:  MOVLW  04
0270:  MOVWF  18
0272:  BCF    F94.1
0274:  BCF    F8B.1
....................       else if (input(sut2))  
0276:  BRA    02A8
0278:  BSF    F94.5
027A:  BTFSS  F82.5
027C:  BRA    028E
....................          { delay_ms(20); tus=5;output_low(sat2);} 
027E:  MOVLW  14
0280:  MOVWF  2C
0282:  RCALL  00A2
0284:  MOVLW  05
0286:  MOVWF  18
0288:  BCF    F94.1
028A:  BCF    F8B.1
....................       else if (input(sut3))   
028C:  BRA    02A8
028E:  BSF    F94.6
0290:  BTFSS  F82.6
0292:  BRA    02A4
....................          { delay_ms(20); tus=6;output_low(sat2);} 
0294:  MOVLW  14
0296:  MOVWF  2C
0298:  RCALL  00A2
029A:  MOVLW  06
029C:  MOVWF  18
029E:  BCF    F94.1
02A0:  BCF    F8B.1
....................       else 
02A2:  BRA    02A8
....................         output_low(sat2);  
02A4:  BCF    F94.1
02A6:  BCF    F8B.1
....................  
....................     output_high(sat3);  
02A8:  BCF    F94.2
02AA:  BSF    F8B.2
....................       if (input(sut1))    
02AC:  BSF    F94.4
02AE:  BTFSS  F82.4
02B0:  BRA    02C2
....................          { delay_ms(20); tus=7;output_low(sat3);} 
02B2:  MOVLW  14
02B4:  MOVWF  2C
02B6:  RCALL  00A2
02B8:  MOVLW  07
02BA:  MOVWF  18
02BC:  BCF    F94.2
02BE:  BCF    F8B.2
....................       else if (input(sut2))  
02C0:  BRA    02F2
02C2:  BSF    F94.5
02C4:  BTFSS  F82.5
02C6:  BRA    02D8
....................          { delay_ms(20); tus=8;output_low(sat3);} 
02C8:  MOVLW  14
02CA:  MOVWF  2C
02CC:  RCALL  00A2
02CE:  MOVLW  08
02D0:  MOVWF  18
02D2:  BCF    F94.2
02D4:  BCF    F8B.2
....................       else if (input(sut3))   
02D6:  BRA    02F2
02D8:  BSF    F94.6
02DA:  BTFSS  F82.6
02DC:  BRA    02EE
....................          { delay_ms(20); tus=9;output_low(sat3);} 
02DE:  MOVLW  14
02E0:  MOVWF  2C
02E2:  RCALL  00A2
02E4:  MOVLW  09
02E6:  MOVWF  18
02E8:  BCF    F94.2
02EA:  BCF    F8B.2
....................       else 
02EC:  BRA    02F2
....................         output_low(sat3);  
02EE:  BCF    F94.2
02F0:  BCF    F8B.2
....................     
....................   output_high(sat4); 
02F2:  BCF    F94.3
02F4:  BSF    F8B.3
....................       if (input(sut1))   
02F6:  BSF    F94.4
02F8:  BTFSS  F82.4
02FA:  BRA    030C
....................          { delay_ms(20); tus=10;output_low(sat4);} 
02FC:  MOVLW  14
02FE:  MOVWF  2C
0300:  RCALL  00A2
0302:  MOVLW  0A
0304:  MOVWF  18
0306:  BCF    F94.3
0308:  BCF    F8B.3
....................       else if (input(sut2))    
030A:  BRA    033A
030C:  BSF    F94.5
030E:  BTFSS  F82.5
0310:  BRA    0320
....................          { delay_ms(20); tus=0;output_low(sat4);} 
0312:  MOVLW  14
0314:  MOVWF  2C
0316:  RCALL  00A2
0318:  CLRF   18
031A:  BCF    F94.3
031C:  BCF    F8B.3
....................       else if (input(sut3))  
031E:  BRA    033A
0320:  BSF    F94.6
0322:  BTFSS  F82.6
0324:  BRA    0336
....................          { delay_ms(20); tus=19;output_low(sat4);} 
0326:  MOVLW  14
0328:  MOVWF  2C
032A:  RCALL  00A2
032C:  MOVLW  13
032E:  MOVWF  18
0330:  BCF    F94.3
0332:  BCF    F8B.3
....................       else 
0334:  BRA    033A
....................         output_low(sat4); 
0336:  BCF    F94.3
0338:  BCF    F8B.3
....................  
....................    return tus;  
033A:  MOVFF  18,01
.................... } 
033E:  RETLW  00
....................  
.................... void allkeypadlow() 
.................... { 
....................    output_low(sat1); 
*
01EE:  BCF    F94.0
01F0:  BCF    F8B.0
....................    output_low(sat2); 
01F2:  BCF    F94.1
01F4:  BCF    F8B.1
....................    output_low(sat3); 
01F6:  BCF    F94.2
01F8:  BCF    F8B.2
....................    output_low(sat4); 
01FA:  BCF    F94.3
01FC:  BCF    F8B.3
....................    output_low(sut1); 
01FE:  BCF    F94.4
0200:  BCF    F8B.4
....................    output_low(sut2); 
0202:  BCF    F94.5
0204:  BCF    F8B.5
....................    output_low(sut3); 
0206:  BCF    F94.6
0208:  BCF    F8B.6
....................    tus=99; 
020A:  MOVLW  63
020C:  MOVWF  18
.................... } 
020E:  RETLW  00
....................  
.................... void pid() 
.................... { 
....................      
....................       if(negatif == 1 && derece != 0) 
*
0D2C:  DECFSZ 15,W
0D2E:  BRA    0D3E
0D30:  MOVF   17,F
0D32:  BZ    0D3E
....................       { 
....................        output_low(isitici); 
0D34:  BCF    F93.0
0D36:  BCF    F8A.0
....................        output_high(sogutucu); 
0D38:  BCF    F93.1
0D3A:  BSF    F8A.1
....................          
....................       } 
....................       else if(derece >= sicaklik-0.2 && derece <= sicaklik+0.2) 
0D3C:  BRA    0E88
0D3E:  BSF    FD8.1
0D40:  MOVFF  0F,4D
0D44:  MOVFF  0E,4C
0D48:  MOVFF  0D,4B
0D4C:  MOVFF  0C,4A
0D50:  MOVLW  CD
0D52:  MOVWF  51
0D54:  MOVLW  CC
0D56:  MOVWF  50
0D58:  MOVLW  4C
0D5A:  MOVWF  4F
0D5C:  MOVLW  7C
0D5E:  MOVWF  4E
0D60:  RCALL  0562
0D62:  MOVFF  00,1E
0D66:  MOVFF  01,1F
0D6A:  MOVFF  02,20
0D6E:  MOVFF  03,21
0D72:  CLRF   47
0D74:  MOVFF  17,46
0D78:  CALL   04B6
0D7C:  MOVFF  21,2D
0D80:  MOVFF  20,2C
0D84:  MOVFF  1F,2B
0D88:  MOVFF  1E,2A
0D8C:  MOVFF  03,31
0D90:  MOVFF  02,30
0D94:  MOVFF  01,2F
0D98:  MOVFF  00,2E
0D9C:  CALL   04EC
0DA0:  BC    0DA4
0DA2:  BNZ   0E16
0DA4:  BCF    FD8.1
0DA6:  MOVFF  0F,4D
0DAA:  MOVFF  0E,4C
0DAE:  MOVFF  0D,4B
0DB2:  MOVFF  0C,4A
0DB6:  MOVLW  CD
0DB8:  MOVWF  51
0DBA:  MOVLW  CC
0DBC:  MOVWF  50
0DBE:  MOVLW  4C
0DC0:  MOVWF  4F
0DC2:  MOVLW  7C
0DC4:  MOVWF  4E
0DC6:  CALL   0562
0DCA:  MOVFF  00,22
0DCE:  MOVFF  01,23
0DD2:  MOVFF  02,24
0DD6:  MOVFF  03,25
0DDA:  CLRF   47
0DDC:  MOVFF  17,46
0DE0:  CALL   04B6
0DE4:  MOVFF  03,2D
0DE8:  MOVFF  02,2C
0DEC:  MOVFF  01,2B
0DF0:  MOVFF  00,2A
0DF4:  MOVFF  25,31
0DF8:  MOVFF  24,30
0DFC:  MOVFF  23,2F
0E00:  MOVFF  22,2E
0E04:  CALL   04EC
0E08:  BC    0E0C
0E0A:  BNZ   0E16
....................       { 
....................        output_low(isitici); 
0E0C:  BCF    F93.0
0E0E:  BCF    F8A.0
....................        output_low(sogutucu); 
0E10:  BCF    F93.1
0E12:  BCF    F8A.1
....................       }   
....................       else if(derece > sicaklik ) 
0E14:  BRA    0E88
0E16:  CLRF   47
0E18:  MOVFF  17,46
0E1C:  CALL   04B6
0E20:  MOVFF  0F,2D
0E24:  MOVFF  0E,2C
0E28:  MOVFF  0D,2B
0E2C:  MOVFF  0C,2A
0E30:  MOVFF  03,31
0E34:  MOVFF  02,30
0E38:  MOVFF  01,2F
0E3C:  MOVFF  00,2E
0E40:  CALL   04EC
0E44:  BNC   0E50
....................       { 
....................        output_high(isitici); 
0E46:  BCF    F93.0
0E48:  BSF    F8A.0
....................        output_low(sogutucu);  
0E4A:  BCF    F93.1
0E4C:  BCF    F8A.1
....................  
....................       } 
....................       else if(derece < sicaklik) 
0E4E:  BRA    0E88
0E50:  CLRF   47
0E52:  MOVFF  17,46
0E56:  CALL   04B6
0E5A:  MOVFF  03,2D
0E5E:  MOVFF  02,2C
0E62:  MOVFF  01,2B
0E66:  MOVFF  00,2A
0E6A:  MOVFF  0F,31
0E6E:  MOVFF  0E,30
0E72:  MOVFF  0D,2F
0E76:  MOVFF  0C,2E
0E7A:  CALL   04EC
0E7E:  BNC   0E88
....................       { 
....................        output_low(isitici); 
0E80:  BCF    F93.0
0E82:  BCF    F8A.0
....................        output_high(sogutucu); 
0E84:  BCF    F93.1
0E86:  BSF    F8A.1
....................       } 
....................       counterpid -= 1; 
0E88:  MOVLW  01
0E8A:  SUBWF  1B,F
.................... } 
0E8C:  GOTO   178E (RETURN)
....................  
.................... float absdiff(float x,float y) 
.................... { 
....................     if(x>y) 
*
07CC:  MOVFF  29,2D
07D0:  MOVFF  28,2C
07D4:  MOVFF  27,2B
07D8:  MOVFF  26,2A
07DC:  MOVFF  25,31
07E0:  MOVFF  24,30
07E4:  MOVFF  23,2F
07E8:  MOVFF  22,2E
07EC:  RCALL  04EC
07EE:  BNC   0818
....................       return x-y; 
07F0:  BSF    FD8.1
07F2:  MOVFF  25,4D
07F6:  MOVFF  24,4C
07FA:  MOVFF  23,4B
07FE:  MOVFF  22,4A
0802:  MOVFF  29,51
0806:  MOVFF  28,50
080A:  MOVFF  27,4F
080E:  MOVFF  26,4E
0812:  RCALL  0562
0814:  BRA    083E
....................     else 
0816:  BRA    083E
....................       return y-x; 
0818:  BSF    FD8.1
081A:  MOVFF  29,4D
081E:  MOVFF  28,4C
0822:  MOVFF  27,4B
0826:  MOVFF  26,4A
082A:  MOVFF  25,51
082E:  MOVFF  24,50
0832:  MOVFF  23,4F
0836:  MOVFF  22,4E
083A:  RCALL  0562
083C:  BRA    083E
.................... } 
083E:  RETLW  00
....................  
....................  
....................  
....................  
.................... // ana program 
.................... void main() 
.................... { 
*
0E90:  CLRF   FF8
0E92:  BCF    FD0.7
0E94:  CLRF   FEA
0E96:  CLRF   FE9
0E98:  CLRF   07
0E9A:  CLRF   06
0E9C:  CLRF   05
0E9E:  CLRF   04
0EA0:  CLRF   0B
0EA2:  CLRF   0A
0EA4:  CLRF   09
0EA6:  CLRF   08
0EA8:  CLRF   0F
0EAA:  CLRF   0E
0EAC:  CLRF   0D
0EAE:  CLRF   0C
0EB0:  CLRF   13
0EB2:  CLRF   12
0EB4:  CLRF   11
0EB6:  CLRF   10
0EB8:  MOVLW  01
0EBA:  MOVWF  14
0EBC:  CLRF   15
0EBE:  CLRF   16
0EC0:  MOVLW  19
0EC2:  MOVWF  17
0EC4:  MOVLW  63
0EC6:  MOVWF  18
0EC8:  MOVWF  19
0ECA:  MOVLW  10
0ECC:  MOVWF  1A
0ECE:  CLRF   1B
0ED0:  CLRF   1C
0ED2:  CLRF   1D
0ED4:  BSF    FC1.0
0ED6:  BSF    FC1.1
0ED8:  BSF    FC1.2
0EDA:  BCF    FC1.3
....................    setup_adc_ports(NO_ANALOGS); 
0EDC:  BSF    FC1.0
0EDE:  BSF    FC1.1
0EE0:  BSF    FC1.2
0EE2:  BCF    FC1.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0EE4:  BCF    FC1.6
0EE6:  BCF    FC2.6
0EE8:  BCF    FC2.7
0EEA:  BCF    FC1.7
0EEC:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0EEE:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0EF0:  BCF    FC6.5
0EF2:  BCF    F94.5
0EF4:  BSF    F94.4
0EF6:  BCF    F94.3
0EF8:  MOVLW  01
0EFA:  MOVWF  FC6
0EFC:  MOVLW  00
0EFE:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0F00:  BCF    FD1.0
....................    setup_timer_1(T1_DISABLED); 
0F02:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0F04:  MOVWF  FCA
0F06:  MOVLW  00
0F08:  MOVWF  FCB
....................    setup_ccp1(CCP_OFF); 
0F0A:  BSF    F94.2
0F0C:  CLRF   FBD
....................     
....................    lcd_init(); 
0F0E:  CALL   0144
....................    delay_ms(100); 
0F12:  MOVLW  64
0F14:  MOVWF  2C
0F16:  CALL   00A2
....................    sht_init(); 
0F1A:  GOTO   01E2
....................    delay_ms(100); 
0F1E:  MOVLW  64
0F20:  MOVWF  2C
0F22:  CALL   00A2
....................   
....................   
....................    set_tris_a(0x00);   // A portu komple çýkýþ 
0F26:  MOVLW  00
0F28:  MOVWF  F92
....................    set_tris_b(0x00); 
0F2A:  MOVWF  F93
....................    set_tris_c(0x0f);    
0F2C:  MOVLW  0F
0F2E:  MOVWF  F94
....................    set_tris_d(0x00);    
0F30:  MOVLW  00
0F32:  MOVWF  F95
....................  
....................    lcd_init();   // LCD hazýrlanýyor 
0F34:  CALL   0144
....................     
....................  
....................    while(1) 
....................    {       
....................       allkeypadlow(); 
0F38:  CALL   01EE
....................       keypad_oku(); 
0F3C:  CALL   0210
....................       pres = tus; 
0F40:  MOVFF  18,19
....................       allkeypadlow(); 
0F44:  CALL   01EE
....................  
....................  
....................       //kare 
....................       if(pres == 19) 
0F48:  MOVF   19,W
0F4A:  SUBLW  13
0F4C:  BNZ   0F5A
....................       { 
....................           flagmode = 1; 
0F4E:  MOVLW  01
0F50:  MOVWF  1C
....................           printf(lcd_putc,"\f");  
0F52:  MOVLW  0C
0F54:  MOVWF  2B
0F56:  CALL   0362
....................       }  
....................           
....................       while(flagmode==1) 
....................       {      
0F5A:  DECFSZ 1C,W
0F5C:  BRA    1104
....................         lcd_gotoxy(1,1);      
0F5E:  MOVLW  01
0F60:  MOVWF  2C
0F62:  MOVWF  2D
0F64:  CALL   0340
....................         printf(lcd_putc,"Mod gir"); 
0F68:  MOVLW  18
0F6A:  MOVWF  FF6
0F6C:  MOVLW  00
0F6E:  MOVWF  FF7
0F70:  CALL   03A6
....................         keypad_oku(); 
0F74:  CALL   0210
....................         pres = tus;     
0F78:  MOVFF  18,19
....................         if(pres == 19) 
0F7C:  MOVF   19,W
0F7E:  SUBLW  13
0F80:  BNZ   0F86
....................           pres = 99; 
0F82:  MOVLW  63
0F84:  MOVWF  19
....................         allkeypadlow(); 
0F86:  CALL   01EE
....................                  
....................         if(pres == 1) 
0F8A:  DECFSZ 19,W
0F8C:  BRA    0FE6
....................         { 
....................           lcd_gotoxy(2,2); 
0F8E:  MOVLW  02
0F90:  MOVWF  2C
0F92:  MOVWF  2D
0F94:  CALL   0340
....................           printf(lcd_putc,"%d",pres); 
0F98:  MOVFF  19,1E
0F9C:  MOVLW  1F
0F9E:  MOVWF  1F
0FA0:  CALL   03EE
....................           mode = 0;           
0FA4:  CLRF   1D
....................           delay_ms(1000); 
0FA6:  MOVLW  04
0FA8:  MOVWF  1E
0FAA:  MOVLW  FA
0FAC:  MOVWF  2C
0FAE:  CALL   00A2
0FB2:  DECFSZ 1E,F
0FB4:  BRA    0FAA
....................           printf(lcd_putc,"\f"); 
0FB6:  MOVLW  0C
0FB8:  MOVWF  2B
0FBA:  CALL   0362
....................           lcd_gotoxy(1,1);      
0FBE:  MOVLW  01
0FC0:  MOVWF  2C
0FC2:  MOVWF  2D
0FC4:  CALL   0340
....................           printf(lcd_putc,"On-Off Ayarlandi.");           
0FC8:  MOVLW  20
0FCA:  MOVWF  FF6
0FCC:  MOVLW  00
0FCE:  MOVWF  FF7
0FD0:  CALL   03A6
....................           delay_ms(1000); 
0FD4:  MOVLW  04
0FD6:  MOVWF  1E
0FD8:  MOVLW  FA
0FDA:  MOVWF  2C
0FDC:  CALL   00A2
0FE0:  DECFSZ 1E,F
0FE2:  BRA    0FD8
....................           flagmode = 0;        
0FE4:  CLRF   1C
....................         } 
....................                  
....................         if(pres == 2) 
0FE6:  MOVF   19,W
0FE8:  SUBLW  02
0FEA:  BNZ   10CC
....................         { 
....................           lcd_gotoxy(2,2); 
0FEC:  MOVLW  02
0FEE:  MOVWF  2C
0FF0:  MOVWF  2D
0FF2:  CALL   0340
....................           printf(lcd_putc,"%d",pres); 
0FF6:  MOVFF  19,1E
0FFA:  MOVLW  1F
0FFC:  MOVWF  1F
0FFE:  CALL   03EE
....................           mode = 1;           
1002:  MOVLW  01
1004:  MOVWF  1D
....................           delay_ms(1000); 
1006:  MOVLW  04
1008:  MOVWF  1E
100A:  MOVLW  FA
100C:  MOVWF  2C
100E:  CALL   00A2
1012:  DECFSZ 1E,F
1014:  BRA    100A
....................           printf(lcd_putc,"\f"); 
1016:  MOVLW  0C
1018:  MOVWF  2B
101A:  CALL   0362
....................           lcd_gotoxy(1,1);      
101E:  MOVLW  01
1020:  MOVWF  2C
1022:  MOVWF  2D
1024:  CALL   0340
....................           printf(lcd_putc,"PID Ayarlandi.");            
1028:  MOVLW  32
102A:  MOVWF  FF6
102C:  MOVLW  00
102E:  MOVWF  FF7
1030:  CALL   03A6
....................           delay_ms(1000); 
1034:  MOVLW  04
1036:  MOVWF  1E
1038:  MOVLW  FA
103A:  MOVWF  2C
103C:  CALL   00A2
1040:  DECFSZ 1E,F
1042:  BRA    1038
....................           flagmode = 0; 
1044:  CLRF   1C
....................           counterpid = absdiff(sicaklik,derece)* 10000;        
1046:  CLRF   47
1048:  MOVFF  17,46
104C:  CALL   04B6
1050:  MOVFF  00,1E
1054:  MOVFF  01,1F
1058:  MOVFF  02,20
105C:  MOVFF  03,21
1060:  MOVFF  0F,25
1064:  MOVFF  0E,24
1068:  MOVFF  0D,23
106C:  MOVFF  0C,22
1070:  MOVFF  03,29
1074:  MOVFF  02,28
1078:  MOVFF  01,27
107C:  MOVFF  00,26
1080:  CALL   07CC
1084:  MOVFF  00,1E
1088:  MOVFF  01,1F
108C:  MOVFF  02,20
1090:  MOVFF  03,21
1094:  MOVFF  03,51
1098:  MOVFF  02,50
109C:  MOVFF  01,4F
10A0:  MOVFF  00,4E
10A4:  CLRF   55
10A6:  MOVLW  40
10A8:  MOVWF  54
10AA:  MOVLW  1C
10AC:  MOVWF  53
10AE:  MOVLW  8C
10B0:  MOVWF  52
10B2:  CALL   0840
10B6:  MOVFF  03,21
10BA:  MOVFF  02,20
10BE:  MOVFF  01,1F
10C2:  MOVFF  00,1E
10C6:  RCALL  0932
10C8:  MOVFF  01,1B
....................         } 
....................                  
....................         if(pres == 3) 
10CC:  MOVF   19,W
10CE:  SUBLW  03
10D0:  BNZ   1102
....................         { 
....................           flagmode = 0;          
10D2:  CLRF   1C
....................           printf(lcd_putc,"\f"); 
10D4:  MOVLW  0C
10D6:  MOVWF  2B
10D8:  CALL   0362
....................           lcd_gotoxy(1,1);      
10DC:  MOVLW  01
10DE:  MOVWF  2C
10E0:  MOVWF  2D
10E2:  CALL   0340
....................           printf(lcd_putc,"CikiS.");           
10E6:  MOVLW  42
10E8:  MOVWF  FF6
10EA:  MOVLW  00
10EC:  MOVWF  FF7
10EE:  CALL   03A6
....................           delay_ms(1000);        
10F2:  MOVLW  04
10F4:  MOVWF  1E
10F6:  MOVLW  FA
10F8:  MOVWF  2C
10FA:  CALL   00A2
10FE:  DECFSZ 1E,F
1100:  BRA    10F6
....................         } 
....................         
....................       } 
1102:  BRA    0F5A
....................        
....................        
....................       //yýldýz 
....................       if(pres == 10) 
1104:  MOVF   19,W
1106:  SUBLW  0A
1108:  BNZ   1116
....................       { 
....................           flag = 1; 
110A:  MOVLW  01
110C:  MOVWF  16
....................           printf(lcd_putc,"\f");  
110E:  MOVLW  0C
1110:  MOVWF  2B
1112:  CALL   0362
....................       }   
....................           
....................       while(flag==1) 
....................       {   
1116:  DECFSZ 16,W
1118:  BRA    1230
....................         lcd_gotoxy(1,1);      
111A:  MOVLW  01
111C:  MOVWF  2C
111E:  MOVWF  2D
1120:  CALL   0340
....................         printf(lcd_putc,"SIC gir"); 
1124:  MOVLW  4A
1126:  MOVWF  FF6
1128:  MOVLW  00
112A:  MOVWF  FF7
112C:  CALL   03A6
....................         keypad_oku(); 
1130:  CALL   0210
....................         pres = tus; 
1134:  MOVFF  18,19
....................         if(pres == 10 && i == 1) 
1138:  MOVF   19,W
113A:  SUBLW  0A
113C:  BNZ   1146
113E:  DECFSZ 14,W
1140:  BRA    1146
....................           pres = 99; 
1142:  MOVLW  63
1144:  MOVWF  19
....................         allkeypadlow();   
1146:  CALL   01EE
....................         if( pres >= 0 && pres <= 9) 
114A:  MOVF   19,W
114C:  SUBLW  09
114E:  BNC   118E
....................         { 
....................           lcd_gotoxy(i,2); 
1150:  MOVFF  14,2C
1154:  MOVLW  02
1156:  MOVWF  2D
1158:  CALL   0340
....................           if(i==1) 
115C:  DECFSZ 14,W
115E:  BRA    1162
....................             derece = 0; 
1160:  CLRF   17
....................           printf(lcd_putc,"%d",pres); 
1162:  MOVFF  19,1E
1166:  MOVLW  1F
1168:  MOVWF  1F
116A:  CALL   03EE
....................           delay_ms(1000); 
116E:  MOVLW  04
1170:  MOVWF  1E
1172:  MOVLW  FA
1174:  MOVWF  2C
1176:  CALL   00A2
117A:  DECFSZ 1E,F
117C:  BRA    1172
....................           derece = (derece*10) + pres; 
117E:  MOVF   17,W
1180:  MULLW  0A
1182:  MOVF   FF3,W
1184:  ADDWF  19,W
1186:  MOVWF  17
....................           i += 1;     
1188:  MOVLW  01
118A:  ADDWF  14,F
....................          } 
....................          else if(pres == 19) 
118C:  BRA    122E
118E:  MOVF   19,W
1190:  SUBLW  13
1192:  BNZ   11DA
....................          { 
....................           printf(lcd_putc,"\f%d derece \nayarlandi.",derece); 
1194:  MOVLW  0C
1196:  MOVWF  2B
1198:  CALL   0362
119C:  MOVFF  17,1E
11A0:  MOVLW  1F
11A2:  MOVWF  1F
11A4:  CALL   03EE
11A8:  MOVLW  55
11AA:  MOVWF  FF6
11AC:  MOVLW  00
11AE:  MOVWF  FF7
11B0:  MOVLW  13
11B2:  MOVWF  1E
11B4:  CALL   096A
....................           flag = 0; 
11B8:  CLRF   16
....................           negatif = 0; 
11BA:  CLRF   15
....................           delay_ms(1000); 
11BC:  MOVLW  04
11BE:  MOVWF  1E
11C0:  MOVLW  FA
11C2:  MOVWF  2C
11C4:  CALL   00A2
11C8:  DECFSZ 1E,F
11CA:  BRA    11C0
....................           i=1; 
11CC:  MOVLW  01
11CE:  MOVWF  14
....................           printf(lcd_putc,"\f"); 
11D0:  MOVLW  0C
11D2:  MOVWF  2B
11D4:  CALL   0362
....................          } 
....................          else if(pres == 10) 
11D8:  BRA    122E
11DA:  MOVF   19,W
11DC:  SUBLW  0A
11DE:  BNZ   122E
....................          { 
....................             printf(lcd_putc,"\f-%d derece \nayarlandi.",derece); 
11E0:  MOVLW  0C
11E2:  MOVWF  2B
11E4:  CALL   0362
11E8:  MOVLW  2D
11EA:  MOVWF  2B
11EC:  CALL   0362
11F0:  MOVFF  17,1E
11F4:  MOVLW  1F
11F6:  MOVWF  1F
11F8:  CALL   03EE
11FC:  MOVLW  6E
11FE:  MOVWF  FF6
1200:  MOVLW  00
1202:  MOVWF  FF7
1204:  MOVLW  13
1206:  MOVWF  1E
1208:  CALL   096A
....................             flag = 0; 
120C:  CLRF   16
....................             delay_ms(1000); 
120E:  MOVLW  04
1210:  MOVWF  1E
1212:  MOVLW  FA
1214:  MOVWF  2C
1216:  CALL   00A2
121A:  DECFSZ 1E,F
121C:  BRA    1212
....................             negatif = 1; 
121E:  MOVLW  01
1220:  MOVWF  15
....................             i=1; 
1222:  MOVWF  14
....................             printf(lcd_putc,"\f"); 
1224:  MOVLW  0C
1226:  MOVWF  2B
1228:  CALL   0362
....................          } 
....................          else{;} 
122C:  BRA    122E
....................  
....................       } 
122E:  BRA    1116
....................  
....................       sht_rd (temp, humid); 
....................       sicaklik=(float)temp; 
*
14D6:  MOVFF  07,0F
14DA:  MOVFF  06,0E
14DE:  MOVFF  05,0D
14E2:  MOVFF  04,0C
....................       nem=(float)humid; 
14E6:  MOVFF  0B,13
14EA:  MOVFF  0A,12
14EE:  MOVFF  09,11
14F2:  MOVFF  08,10
....................       lcd_gotoxy(1,1); 
14F6:  MOVLW  01
14F8:  MOVWF  2C
14FA:  MOVWF  2D
14FC:  CALL   0340
....................       printf(lcd_putc,"SICAKLIK %2.2f C",sicaklik); 
1500:  MOVLW  82
1502:  MOVWF  FF6
1504:  MOVLW  00
1506:  MOVWF  FF7
1508:  MOVLW  09
150A:  MOVWF  1E
150C:  CALL   096A
1510:  MOVLW  89
1512:  MOVWF  FE9
1514:  MOVFF  0F,21
1518:  MOVFF  0E,20
151C:  MOVFF  0D,1F
1520:  MOVFF  0C,1E
1524:  MOVLW  02
1526:  MOVWF  22
1528:  CALL   0BA6
152C:  MOVLW  20
152E:  MOVWF  2B
1530:  CALL   0362
1534:  MOVLW  43
1536:  MOVWF  2B
1538:  CALL   0362
....................       lcd_gotoxy(1,2); 
153C:  MOVLW  01
153E:  MOVWF  2C
1540:  MOVLW  02
1542:  MOVWF  2D
1544:  CALL   0340
....................       printf(lcd_putc,"NEM %2.2f RH",nem); 
1548:  MOVLW  94
154A:  MOVWF  FF6
154C:  MOVLW  00
154E:  MOVWF  FF7
1550:  MOVLW  04
1552:  MOVWF  1E
1554:  CALL   096A
1558:  MOVLW  89
155A:  MOVWF  FE9
155C:  MOVFF  13,21
1560:  MOVFF  12,20
1564:  MOVFF  11,1F
1568:  MOVFF  10,1E
156C:  MOVLW  02
156E:  MOVWF  22
1570:  CALL   0BA6
1574:  MOVLW  20
1576:  MOVWF  2B
1578:  CALL   0362
157C:  MOVLW  52
157E:  MOVWF  2B
1580:  CALL   0362
1584:  MOVLW  48
1586:  MOVWF  2B
1588:  CALL   0362
....................        
....................       //sensor kontrol 
....................       output_low(ses_sensor); 
158C:  BCF    F93.5
158E:  BCF    F8A.5
....................           delay_ms(1000); 
1590:  MOVLW  04
1592:  MOVWF  1E
1594:  MOVLW  FA
1596:  MOVWF  2C
1598:  CALL   00A2
159C:  DECFSZ 1E,F
159E:  BRA    1594
....................       if(nem < 1) 
15A0:  MOVFF  13,2D
15A4:  MOVFF  12,2C
15A8:  MOVFF  11,2B
15AC:  MOVFF  10,2A
15B0:  CLRF   31
15B2:  CLRF   30
15B4:  CLRF   2F
15B6:  MOVLW  7F
15B8:  MOVWF  2E
15BA:  CALL   04EC
15BE:  BNC   15D4
....................       { 
....................        output_high(ses_sensor); 
15C0:  BCF    F93.5
15C2:  BSF    F8A.5
....................           delay_ms(1000); 
15C4:  MOVLW  04
15C6:  MOVWF  1E
15C8:  MOVLW  FA
15CA:  MOVWF  2C
15CC:  CALL   00A2
15D0:  DECFSZ 1E,F
15D2:  BRA    15C8
....................       } 
....................  
....................  
....................        
....................       if(negatif == 1 && derece != 0 && mode == 0) 
15D4:  DECFSZ 15,W
15D6:  BRA    15FA
15D8:  MOVF   17,F
15DA:  BZ    15FA
15DC:  MOVF   1D,F
15DE:  BNZ   15FA
....................       { 
....................        output_low(isitici); 
15E0:  BCF    F93.0
15E2:  BCF    F8A.0
....................        output_high(sogutucu); 
15E4:  BCF    F93.1
15E6:  BSF    F8A.1
....................         delay_ms(1000); 
15E8:  MOVLW  04
15EA:  MOVWF  1E
15EC:  MOVLW  FA
15EE:  MOVWF  2C
15F0:  CALL   00A2
15F4:  DECFSZ 1E,F
15F6:  BRA    15EC
....................       } 
....................       else if(derece >= sicaklik-0.2 && derece <= sicaklik+0.2 && mode == 0) 
15F8:  BRA    1782
15FA:  BSF    FD8.1
15FC:  MOVFF  0F,4D
1600:  MOVFF  0E,4C
1604:  MOVFF  0D,4B
1608:  MOVFF  0C,4A
160C:  MOVLW  CD
160E:  MOVWF  51
1610:  MOVLW  CC
1612:  MOVWF  50
1614:  MOVLW  4C
1616:  MOVWF  4F
1618:  MOVLW  7C
161A:  MOVWF  4E
161C:  CALL   0562
1620:  MOVFF  00,1E
1624:  MOVFF  01,1F
1628:  MOVFF  02,20
162C:  MOVFF  03,21
1630:  CLRF   47
1632:  MOVFF  17,46
1636:  CALL   04B6
163A:  MOVFF  21,2D
163E:  MOVFF  20,2C
1642:  MOVFF  1F,2B
1646:  MOVFF  1E,2A
164A:  MOVFF  03,31
164E:  MOVFF  02,30
1652:  MOVFF  01,2F
1656:  MOVFF  00,2E
165A:  CALL   04EC
165E:  BC    1662
1660:  BNZ   16E8
1662:  BCF    FD8.1
1664:  MOVFF  0F,4D
1668:  MOVFF  0E,4C
166C:  MOVFF  0D,4B
1670:  MOVFF  0C,4A
1674:  MOVLW  CD
1676:  MOVWF  51
1678:  MOVLW  CC
167A:  MOVWF  50
167C:  MOVLW  4C
167E:  MOVWF  4F
1680:  MOVLW  7C
1682:  MOVWF  4E
1684:  CALL   0562
1688:  MOVFF  00,22
168C:  MOVFF  01,23
1690:  MOVFF  02,24
1694:  MOVFF  03,25
1698:  CLRF   47
169A:  MOVFF  17,46
169E:  CALL   04B6
16A2:  MOVFF  03,2D
16A6:  MOVFF  02,2C
16AA:  MOVFF  01,2B
16AE:  MOVFF  00,2A
16B2:  MOVFF  25,31
16B6:  MOVFF  24,30
16BA:  MOVFF  23,2F
16BE:  MOVFF  22,2E
16C2:  CALL   04EC
16C6:  BC    16CA
16C8:  BNZ   16E8
16CA:  MOVF   1D,F
16CC:  BNZ   16E8
....................       { 
....................        output_low(isitici); 
16CE:  BCF    F93.0
16D0:  BCF    F8A.0
....................        output_low(sogutucu); 
16D2:  BCF    F93.1
16D4:  BCF    F8A.1
....................           delay_ms(1000); 
16D6:  MOVLW  04
16D8:  MOVWF  1E
16DA:  MOVLW  FA
16DC:  MOVWF  2C
16DE:  CALL   00A2
16E2:  DECFSZ 1E,F
16E4:  BRA    16DA
....................       }   
....................       else if(derece > sicaklik && mode == 0) 
16E6:  BRA    1782
16E8:  CLRF   47
16EA:  MOVFF  17,46
16EE:  CALL   04B6
16F2:  MOVFF  0F,2D
16F6:  MOVFF  0E,2C
16FA:  MOVFF  0D,2B
16FE:  MOVFF  0C,2A
1702:  MOVFF  03,31
1706:  MOVFF  02,30
170A:  MOVFF  01,2F
170E:  MOVFF  00,2E
1712:  CALL   04EC
1716:  BNC   1736
1718:  MOVF   1D,F
171A:  BNZ   1736
....................       { 
....................        output_high(isitici); 
171C:  BCF    F93.0
171E:  BSF    F8A.0
....................        output_low(sogutucu);   
1720:  BCF    F93.1
1722:  BCF    F8A.1
....................           delay_ms(1000);    
1724:  MOVLW  04
1726:  MOVWF  1E
1728:  MOVLW  FA
172A:  MOVWF  2C
172C:  CALL   00A2
1730:  DECFSZ 1E,F
1732:  BRA    1728
....................       } 
....................       else if(derece < sicaklik && mode == 0) 
1734:  BRA    1782
1736:  CLRF   47
1738:  MOVFF  17,46
173C:  CALL   04B6
1740:  MOVFF  03,2D
1744:  MOVFF  02,2C
1748:  MOVFF  01,2B
174C:  MOVFF  00,2A
1750:  MOVFF  0F,31
1754:  MOVFF  0E,30
1758:  MOVFF  0D,2F
175C:  MOVFF  0C,2E
1760:  CALL   04EC
1764:  BNC   1782
1766:  MOVF   1D,F
1768:  BNZ   1782
....................       { 
....................        output_low(isitici); 
176A:  BCF    F93.0
176C:  BCF    F8A.0
....................        output_high(sogutucu);   
176E:  BCF    F93.1
1770:  BSF    F8A.1
....................           delay_ms(1000); 
1772:  MOVLW  04
1774:  MOVWF  1E
1776:  MOVLW  FA
1778:  MOVWF  2C
177A:  CALL   00A2
177E:  DECFSZ 1E,F
1780:  BRA    1776
....................       } 
....................        
....................       if(mode == 1 && counterpid != 0) 
1782:  DECFSZ 1D,W
1784:  BRA    1794
1786:  MOVF   1B,F
1788:  BZ    1794
....................       { 
....................         pid(); 
178A:  GOTO   0D2C
....................         anticounter = 10000;  //bekleme süresi 
178E:  MOVLW  10
1790:  MOVWF  1A
....................       } 
....................       else  if(mode == 1 && counterpid == 0) 
1792:  BRA    1836
1794:  DECFSZ 1D,W
1796:  BRA    1836
1798:  MOVF   1B,F
179A:  BNZ   1836
....................       { 
....................         if(anticounter == 0) 
179C:  MOVF   1A,F
179E:  BNZ   182A
....................             counterpid = absdiff(sicaklik,derece)* 10000; //2 derece arasýndaki farkla orantýlý çalýþma süresi 
17A0:  CLRF   47
17A2:  MOVFF  17,46
17A6:  CALL   04B6
17AA:  MOVFF  00,1E
17AE:  MOVFF  01,1F
17B2:  MOVFF  02,20
17B6:  MOVFF  03,21
17BA:  MOVFF  0F,25
17BE:  MOVFF  0E,24
17C2:  MOVFF  0D,23
17C6:  MOVFF  0C,22
17CA:  MOVFF  03,29
17CE:  MOVFF  02,28
17D2:  MOVFF  01,27
17D6:  MOVFF  00,26
17DA:  CALL   07CC
17DE:  MOVFF  00,1E
17E2:  MOVFF  01,1F
17E6:  MOVFF  02,20
17EA:  MOVFF  03,21
17EE:  MOVFF  03,51
17F2:  MOVFF  02,50
17F6:  MOVFF  01,4F
17FA:  MOVFF  00,4E
17FE:  CLRF   55
1800:  MOVLW  40
1802:  MOVWF  54
1804:  MOVLW  1C
1806:  MOVWF  53
1808:  MOVLW  8C
180A:  MOVWF  52
180C:  CALL   0840
1810:  MOVFF  03,21
1814:  MOVFF  02,20
1818:  MOVFF  01,1F
181C:  MOVFF  00,1E
1820:  CALL   0932
1824:  MOVFF  01,1B
....................         else 
1828:  BRA    1836
....................         { 
....................             anticounter -= 1; 
182A:  MOVLW  01
182C:  SUBWF  1A,F
....................             output_low(isitici); 
182E:  BCF    F93.0
1830:  BCF    F8A.0
....................             output_low(sogutucu); 
1832:  BCF    F93.1
1834:  BCF    F8A.1
....................         } 
....................       } 
....................        
....................  
....................    } 
1836:  GOTO   0F38
....................  
.................... } 
....................  
....................  
....................  //      if(countstable == 0) // baþlangýçmýþ gibi atama 
....................  //     { 
....................  //            counterpid = absdiff(sýcaklýk,derece)* 100000; 
....................  //            countstable = 
....................  //      } 
....................  //      else 
....................  //        countstable -= 1; 
183A:  SLEEP 

Configuration Fuses:
   Word  1: 2100   XT NOOSCSEN
   Word  2: 0E0D   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0080   NOSTVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
