
Keypad-II.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000228  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009f  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000489  00000000  00000000  0000039f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002a4  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003ca  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017b  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000198  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8e:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init>:
**	Params:	None
**	Returns: None
** -----------------------------------------------------------------------*/
void init()
{
	CMD_PORT = _BV(CLOCK) | _BV(MOSI) | _BV(LATCH) | _BV(LOAD);
  96:	8e e2       	ldi	r24, 0x2E	; 46
  98:	87 b9       	out	0x07, r24	; 7

	DATA_PORT = _BV(LATCH) | _BV(LOAD);
  9a:	86 e0       	ldi	r24, 0x06	; 6
  9c:	88 b9       	out	0x08, r24	; 8
}
  9e:	08 95       	ret

000000a0 <output_data>:
**	Params:	byte - data to send
**	Returns: None
** -----------------------------------------------------------------------*/
void output_data(byte data)
{
	DATA_PORT &= ~_BV(LATCH);
  a0:	42 98       	cbi	0x08, 2	; 8
  a2:	90 e0       	ldi	r25, 0x00	; 0

	//Shift data bits out one at a time
	for (byte i = 0; i < 8;i++)
	{
		//Set the data bit 0 or 1
		if ((data & 0x80) == 0x80)
  a4:	87 ff       	sbrs	r24, 7
  a6:	02 c0       	rjmp	.+4      	; 0xac <output_data+0xc>
			DATA_PORT |= _BV(MOSI);
  a8:	43 9a       	sbi	0x08, 3	; 8
  aa:	01 c0       	rjmp	.+2      	; 0xae <output_data+0xe>
		else
			DATA_PORT &= ~_BV(MOSI);
  ac:	43 98       	cbi	0x08, 3	; 8

		//Clock the bit into the shift register
		DATA_PORT &= ~_BV(CLOCK);
  ae:	45 98       	cbi	0x08, 5	; 8
		DATA_PORT |= _BV(CLOCK);
  b0:	45 9a       	sbi	0x08, 5	; 8
void output_data(byte data)
{
	DATA_PORT &= ~_BV(LATCH);

	//Shift data bits out one at a time
	for (byte i = 0; i < 8;i++)
  b2:	9f 5f       	subi	r25, 0xFF	; 255
  b4:	98 30       	cpi	r25, 0x08	; 8
  b6:	11 f0       	breq	.+4      	; 0xbc <output_data+0x1c>

		//Clock the bit into the shift register
		DATA_PORT &= ~_BV(CLOCK);
		DATA_PORT |= _BV(CLOCK);

		data <<= 1;
  b8:	88 0f       	add	r24, r24
  ba:	f4 cf       	rjmp	.-24     	; 0xa4 <output_data+0x4>
	}
	//Latch the data we just sent
	DATA_PORT |= _BV(LATCH);
  bc:	42 9a       	sbi	0x08, 2	; 8
}
  be:	08 95       	ret

000000c0 <input_data>:
**
**	Params:	None
**	Returns: byte - data returned from shift register
** -----------------------------------------------------------------------*/
byte input_data()
{
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	0f 92       	push	r0
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	volatile byte result = 0;
  ca:	19 82       	std	Y+1, r1	; 0x01

	//Load the parallel data into the shift register
	DATA_PORT &= ~_BV(LOAD);
  cc:	41 98       	cbi	0x08, 1	; 8
	DATA_PORT |= _BV(LOAD);
  ce:	41 9a       	sbi	0x08, 1	; 8
  d0:	90 e0       	ldi	r25, 0x00	; 0

	//Shift data bits out one at a time
	for (byte i = 0; i < 8;i++)
	{		
		result <<= 1;
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	88 0f       	add	r24, r24
  d6:	89 83       	std	Y+1, r24	; 0x01

		if ((PINC & 0x10) == 0x10)
  d8:	34 9b       	sbis	0x06, 4	; 6
  da:	03 c0       	rjmp	.+6      	; 0xe2 <input_data+0x22>
			result |= 0x01;		
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	89 83       	std	Y+1, r24	; 0x01

		//Clock the bit into the shift register
		DATA_PORT &= ~_BV(CLOCK);
  e2:	45 98       	cbi	0x08, 5	; 8
		DATA_PORT |= _BV(CLOCK);
  e4:	45 9a       	sbi	0x08, 5	; 8
	//Load the parallel data into the shift register
	DATA_PORT &= ~_BV(LOAD);
	DATA_PORT |= _BV(LOAD);

	//Shift data bits out one at a time
	for (byte i = 0; i < 8;i++)
  e6:	9f 5f       	subi	r25, 0xFF	; 255
  e8:	98 30       	cpi	r25, 0x08	; 8
  ea:	99 f7       	brne	.-26     	; 0xd2 <input_data+0x12>

		//Clock the bit into the shift register
		DATA_PORT &= ~_BV(CLOCK);
		DATA_PORT |= _BV(CLOCK);
	}
	return result;
  ec:	89 81       	ldd	r24, Y+1	; 0x01
}
  ee:	0f 90       	pop	r0
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <scan>:
**
**	Params:	None
**	Returns: ushort - 2 bit scan code made up of row and column
** -----------------------------------------------------------------------*/
ushort scan()
{
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	0f 92       	push	r0
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	byte mask = 0x80;
	volatile byte result = 0;
 108:	19 82       	std	Y+1, r1	; 0x01
	ushort scan_code;

	scan_code.Short = 0;
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	e8 2e       	mov	r14, r24
 112:	ff 24       	eor	r15, r15
	for(byte i = 0; i < 8; i++)
	{
		//Shift in column data
		output_data(mask);
 114:	8e 2d       	mov	r24, r14
 116:	0e 94 50 00 	call	0xa0	; 0xa0 <output_data>

		result = input_data();
 11a:	0e 94 60 00 	call	0xc0	; 0xc0 <input_data>
 11e:	89 83       	std	Y+1, r24	; 0x01
		if (result != 0)
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	88 23       	and	r24, r24
 124:	21 f0       	breq	.+8      	; 0x12e <scan+0x38>
		{
			scan_code.Byte[0] = result; 
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	08 2f       	mov	r16, r24
			scan_code.Byte[1] = mask;
 12a:	1e 2d       	mov	r17, r14
 12c:	06 c0       	rjmp	.+12     	; 0x13a <scan+0x44>
	byte mask = 0x80;
	volatile byte result = 0;
	ushort scan_code;

	scan_code.Short = 0;
	for(byte i = 0; i < 8; i++)
 12e:	f3 94       	inc	r15
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	f8 16       	cp	r15, r24
 134:	11 f0       	breq	.+4      	; 0x13a <scan+0x44>
		{
			scan_code.Byte[0] = result; 
			scan_code.Byte[1] = mask;
			break;
		}
		mask >>= 1;
 136:	e6 94       	lsr	r14
 138:	ed cf       	rjmp	.-38     	; 0x114 <scan+0x1e>
	}
	return scan_code;
}
 13a:	c8 01       	movw	r24, r16
 13c:	0f 90       	pop	r0
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	08 95       	ret

0000014c <convert_result>:
**
**	Params:	byte - number to be converted
**	Returns: byte - converted value
** -----------------------------------------------------------------------*/
byte convert_result(byte data)
{
 14c:	98 2f       	mov	r25, r24
 14e:	80 e0       	ldi	r24, 0x00	; 0
	byte value = 0;
	
	do
	{
		if (data & 1)
 150:	90 fd       	sbrc	r25, 0
 152:	05 c0       	rjmp	.+10     	; 0x15e <convert_result+0x12>
			break;

		++value;
 154:	8f 5f       	subi	r24, 0xFF	; 255
		data >>= 1;

	} while(value < 8);
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	11 f0       	breq	.+4      	; 0x15e <convert_result+0x12>
	{
		if (data & 1)
			break;

		++value;
		data >>= 1;
 15a:	96 95       	lsr	r25
 15c:	f9 cf       	rjmp	.-14     	; 0x150 <convert_result+0x4>

	} while(value < 8);

	return value;
}
 15e:	08 95       	ret

00000160 <main>:
**
**	Params:	None
**	Returns: int
** -----------------------------------------------------------------------*/
int main()
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
**	Params:	None
**	Returns: None
** -----------------------------------------------------------------------*/
void init()
{
	CMD_PORT = _BV(CLOCK) | _BV(MOSI) | _BV(LATCH) | _BV(LOAD);
 168:	8e e2       	ldi	r24, 0x2E	; 46
 16a:	87 b9       	out	0x07, r24	; 7

	DATA_PORT = _BV(LATCH) | _BV(LOAD);
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	88 b9       	out	0x08, r24	; 8
	char chr;

	init();

	//Initialize our UART0 (PC<->Master)
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU) );
 170:	87 e6       	ldi	r24, 0x67	; 103
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 178:	c0 e9       	ldi	r28, 0x90	; 144
 17a:	d1 e0       	ldi	r29, 0x01	; 1

	while(1)
	{
		//Scan keypad
		result = scan();
 17c:	0e 94 7b 00 	call	0xf6	; 0xf6 <scan>
 180:	09 2f       	mov	r16, r25
 182:	28 2f       	mov	r18, r24
 184:	39 2f       	mov	r19, r25

		//If a key was pressed convert values and do lookup
		if (result.Short > 0)
 186:	21 15       	cp	r18, r1
 188:	31 05       	cpc	r19, r1
 18a:	d1 f0       	breq	.+52     	; 0x1c0 <main+0x60>
		{
			row = convert_result(result.Byte[0]);
 18c:	0e 94 a6 00 	call	0x14c	; 0x14c <convert_result>
 190:	18 2f       	mov	r17, r24
			col = convert_result(result.Byte[1]);
 192:	80 2f       	mov	r24, r16
 194:	0e 94 a6 00 	call	0x14c	; 0x14c <convert_result>
			chr = scan_table[col][row];

			buffer[9] = chr;
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	e8 0f       	add	r30, r24
 1a6:	f9 1f       	adc	r31, r25
 1a8:	e1 0f       	add	r30, r17
 1aa:	f1 1d       	adc	r31, r1
 1ac:	e0 50       	subi	r30, 0x00	; 0
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	80 81       	ld	r24, Z
 1b2:	80 93 22 01 	sts	0x0122, r24
			
			//Send result via UART to PC
			SendDataPacket(buffer, 10);
 1b6:	89 e1       	ldi	r24, 0x19	; 25
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	6a e0       	ldi	r22, 0x0A	; 10
 1bc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <SendDataPacket>
 1c0:	80 ed       	ldi	r24, 0xD0	; 208
 1c2:	97 e0       	ldi	r25, 0x07	; 7
 1c4:	fe 01       	movw	r30, r28
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x66>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1cc:	b9 f2       	breq	.-82     	; 0x17c <main+0x1c>
 1ce:	fa cf       	rjmp	.-12     	; 0x1c4 <main+0x64>

000001d0 <uart_init>:
**	Params:	None
**	Returns: None
** -----------------------------------------------------------------------*/
void uart_init(word baud)
{
	UCSR0B |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	20 81       	ld	r18, Z
 1d6:	28 69       	ori	r18, 0x98	; 152
 1d8:	20 83       	st	Z, r18
	UCSR0C |= _BV(UCSZ00) | _BV(UCSZ01);
 1da:	e2 ec       	ldi	r30, 0xC2	; 194
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	20 81       	ld	r18, Z
 1e0:	26 60       	ori	r18, 0x06	; 6
 1e2:	20 83       	st	Z, r18

	UBRR0 = baud;
 1e4:	90 93 c5 00 	sts	0x00C5, r25
 1e8:	80 93 c4 00 	sts	0x00C4, r24
}
 1ec:	08 95       	ret

000001ee <SendByte>:
**
**	Params:	uint8_t	byte to send
**	Returns: None
** -----------------------------------------------------------------------*/
void SendByte(byte data)
{
 1ee:	98 2f       	mov	r25, r24
   // Wait for empty transmit buffer
   while ( !( UCSR0A & (1<<UDRE0)) );             
 1f0:	80 91 c0 00 	lds	r24, 0x00C0
 1f4:	85 ff       	sbrs	r24, 5
 1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <SendByte+0x2>
   // Putting data into the buffer, forces transmission
   UDR0 = data;                                   
 1f8:	90 93 c6 00 	sts	0x00C6, r25
}
 1fc:	08 95       	ret

000001fe <SendDataPacket>:
**	Params:	byte* - pointer to buffer
**			byte	- number of bytes to send
**	Returns: None
** -----------------------------------------------------------------------*/
void SendDataPacket(char* buf, byte len)
{
 1fe:	fc 01       	movw	r30, r24
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < len; i++)
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	0a c0       	rjmp	.+20     	; 0x21c <SendDataPacket+0x1e>
		SendByte(*buf++);
 208:	90 81       	ld	r25, Z
**	Returns: None
** -----------------------------------------------------------------------*/
void SendByte(byte data)
{
   // Wait for empty transmit buffer
   while ( !( UCSR0A & (1<<UDRE0)) );             
 20a:	80 91 c0 00 	lds	r24, 0x00C0
 20e:	85 ff       	sbrs	r24, 5
 210:	fc cf       	rjmp	.-8      	; 0x20a <SendDataPacket+0xc>
**	Returns: None
** -----------------------------------------------------------------------*/
void SendDataPacket(char* buf, byte len)
{
	for(int i = 0; i < len; i++)
		SendByte(*buf++);
 212:	31 96       	adiw	r30, 0x01	; 1
void SendByte(byte data)
{
   // Wait for empty transmit buffer
   while ( !( UCSR0A & (1<<UDRE0)) );             
   // Putting data into the buffer, forces transmission
   UDR0 = data;                                   
 214:	90 93 c6 00 	sts	0x00C6, r25
**			byte	- number of bytes to send
**	Returns: None
** -----------------------------------------------------------------------*/
void SendDataPacket(char* buf, byte len)
{
	for(int i = 0; i < len; i++)
 218:	2f 5f       	subi	r18, 0xFF	; 255
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	26 17       	cp	r18, r22
 21e:	37 07       	cpc	r19, r23
 220:	9c f3       	brlt	.-26     	; 0x208 <SendDataPacket+0xa>
		SendByte(*buf++);
}
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
